{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\nconst path = require('path');\nconst valueParser = require('postcss-value-parser');\nconst normalize = require('normalize-url');\n\nconst multiline = /\\\\[\\r\\n]/;\n// eslint-disable-next-line no-useless-escape\nconst escapeChars = /([\\s\\(\\)\"'])/g;\n\n// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/;\n// Windows paths like `c:\\`\nconst WINDOWS_PATH_REGEX = /^[a-zA-Z]:\\\\/;\n\n/**\n * Originally in sindresorhus/is-absolute-url\n *\n * @param {string} url\n */\nfunction isAbsolute(url) {\n  if (WINDOWS_PATH_REGEX.test(url)) {\n    return false;\n  }\n  return ABSOLUTE_URL_REGEX.test(url);\n}\n\n/**\n * @param {string} url\n * @param {normalize.Options} options\n * @return {string}\n */\nfunction convert(url, options) {\n  if (isAbsolute(url) || url.startsWith('//')) {\n    let normalizedURL;\n\n    try {\n      normalizedURL = normalize(url, options);\n    } catch (e) {\n      normalizedURL = url;\n    }\n\n    return normalizedURL;\n  }\n\n  // `path.normalize` always returns backslashes on Windows, need replace in `/`\n  return path.normalize(url).replace(new RegExp('\\\\' + path.sep, 'g'), '/');\n}\n\n/**\n * @param {import('postcss').AtRule} rule\n * @return {void}\n */\nfunction transformNamespace(rule) {\n  rule.params = valueParser(rule.params)\n    .walk((node) => {\n      if (\n        node.type === 'function' &&\n        node.value.toLowerCase() === 'url' &&\n        node.nodes.length\n      ) {\n        /** @type {valueParser.Node} */ (node).type = 'string';\n        /** @type {any} */ (node).quote =\n          node.nodes[0].type === 'string' ? node.nodes[0].quote : '\"';\n        node.value = node.nodes[0].value;\n      }\n      if (node.type === 'string') {\n        node.value = node.value.trim();\n      }\n      return false;\n    })\n    .toString();\n}\n\n/**\n * @param {import('postcss').Declaration} decl\n * @param {normalize.Options} opts\n * @return {void}\n */\nfunction transformDecl(decl, opts) {\n  decl.value = valueParser(decl.value)\n    .walk((node) => {\n      if (node.type !== 'function' || node.value.toLowerCase() !== 'url') {\n        return false;\n      }\n\n      node.before = node.after = '';\n\n      if (!node.nodes.length) {\n        return false;\n      }\n      let url = node.nodes[0];\n      let escaped;\n\n      url.value = url.value.trim().replace(multiline, '');\n\n      // Skip empty URLs\n      // Empty URL function equals request to current stylesheet where it is declared\n      if (url.value.length === 0) {\n        /** @type {any} */ (url).quote = '';\n\n        return false;\n      }\n\n      if (/^data:(.*)?,/i.test(url.value)) {\n        return false;\n      }\n\n      if (!/^.+-extension:\\//i.test(url.value)) {\n        url.value = convert(url.value, opts);\n      }\n\n      if (escapeChars.test(url.value) && url.type === 'string') {\n        escaped = url.value.replace(escapeChars, '\\\\$1');\n\n        if (escaped.length < url.value.length + 2) {\n          url.value = escaped;\n          /** @type {valueParser.Node} */ (url).type = 'word';\n        }\n      } else {\n        url.type = 'word';\n      }\n\n      return false;\n    })\n    .toString();\n}\n\n/** @typedef {normalize.Options} Options */\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options} opts\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator(opts) {\n  opts = Object.assign(\n    {},\n    {\n      normalizeProtocol: false,\n      sortQueryParameters: false,\n      stripHash: false,\n      stripWWW: false,\n      stripTextFragment: false,\n    },\n    opts\n  );\n\n  return {\n    postcssPlugin: 'postcss-normalize-url',\n\n    OnceExit(css) {\n      css.walk((node) => {\n        if (node.type === 'decl') {\n          return transformDecl(node, opts);\n        } else if (\n          node.type === 'atrule' &&\n          node.name.toLowerCase() === 'namespace'\n        ) {\n          return transformNamespace(node);\n        }\n      });\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]}