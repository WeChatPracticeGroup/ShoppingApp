{"version":3,"sources":["autoprefixer.js","browsers.js","utils.js","prefixes.js","vendor.js","declaration.js","prefixer.js","resolution.js","transition.js","processor.js","value.js","old-value.js","hacks/grid-utils.js","supports.js","brackets.js","selector.js","old-selector.js","at-rule.js","hacks/fullscreen.js","hacks/placeholder.js","hacks/placeholder-shown.js","hacks/file-selector-button.js","hacks/flex.js","hacks/flex-spec.js","hacks/order.js","hacks/filter.js","hacks/grid-end.js","hacks/animation.js","hacks/flex-flow.js","hacks/flex-grow.js","hacks/flex-wrap.js","hacks/grid-area.js","hacks/place-self.js","hacks/grid-start.js","hacks/align-self.js","hacks/appearance.js","hacks/flex-basis.js","hacks/mask-border.js","hacks/mask-composite.js","hacks/align-items.js","hacks/user-select.js","hacks/flex-shrink.js","hacks/break-props.js","hacks/writing-mode.js","hacks/border-image.js","hacks/align-content.js","hacks/border-radius.js","hacks/block-logical.js","hacks/grid-template.js","hacks/inline-logical.js","hacks/grid-row-align.js","hacks/transform-decl.js","hacks/flex-direction.js","hacks/image-rendering.js","hacks/backdrop-filter.js","hacks/background-clip.js","hacks/text-decoration.js","hacks/justify-content.js","hacks/background-size.js","hacks/grid-row-column.js","hacks/grid-rows-columns.js","hacks/grid-column-align.js","hacks/print-color-adjust.js","hacks/overscroll-behavior.js","hacks/grid-template-areas.js","hacks/text-emphasis-position.js","hacks/text-decoration-skip-ink.js","hacks/gradient.js","hacks/intrinsic.js","hacks/pixelated.js","hacks/image-set.js","hacks/cross-fade.js","hacks/display-flex.js","hacks/display-grid.js","hacks/filter-value.js","hacks/autofill.js","../data/prefixes.js","info.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AIZA,AFMA,ADGA,AENA;AJaA,ACHA,AIZA,AFMA,ADGA,AENA;AJaA,ACHA,AIZA,AFMA,ADGA,AENA;AJaA,ACHA,AIZA,ACHA,AHSA,ADGA,AENA;AJaA,ACHA,AIZA,ACHA,AHSA,ADGA,AENA;AJaA,ACHA,AIZA,ACHA,AHSA,ADGA,AENA;AJaA,ACHA,AIZA,ACHA,AHSA,AIZA,ALeA,AENA;AJaA,ACHA,AIZA,ACHA,AHSA,AIZA,ALeA,AENA;AJaA,ACHA,AIZA,ACHA,AHSA,AIZA,ALeA,AENA;AJaA,ACHA,AIZA,ACHA,AHSA,AIZA,ACHA,ANkBA,AENA;AJaA,ACHA,AIZA,ACHA,AHSA,AIZA,ACHA,ANkBA,AENA;AJaA,ACHA,AIZA,ACHA,AHSA,AIZA,ACHA,ANkBA,AENA;AJaA,ACHA,AIZA,ACHA,AHSA,AMlBA,AFMA,ACHA,ANkBA;AFOA,ACHA,AIZA,ACHA,AHSA,AMlBA,AFMA,ACHA,ANkBA;AFOA,ACHA,AIZA,ACHA,AHSA,AMlBA,AFMA,ACHA,ANkBA;AFOA,ACHA,AIZA,ACHA,AHSA,AMlBA,AFMA,ACHA,ANkBA,AQxBA;AV+BA,ACHA,AIZA,ACHA,AHSA,AMlBA,AFMA,ACHA,ANkBA,AQxBA;AV+BA,ACHA,AIZA,ACHA,AHSA,AMlBA,AFMA,ACHA,ANkBA,AQxBA;AV+BA,ACHA,AIZA,AMlBA,ALeA,AHSA,AMlBA,AFMA,ACHA,ANkBA,AQxBA;AV+BA,ACHA,AIZA,AMlBA,ALeA,AHSA,AMlBA,AFMA,ACHA,ANkBA,AQxBA;AV+BA,ACHA,AIZA,AMlBA,ALeA,AHSA,AMlBA,AFMA,ACHA,ANkBA,AQxBA;AV+BA,ACHA,AIZA,AOrBA,ADGA,ALeA,AHSA,AMlBA,AFMA,ACHA,ANkBA,AQxBA;AV+BA,ACHA,AIZA,AOrBA,ADGA,ALeA,AHSA,AMlBA,AFMA,ACHA,ANkBA,AQxBA;AV+BA,ACHA,AIZA,AOrBA,ADGA,ALeA,AHSA,AMlBA,AFMA,ACHA,ANkBA,AQxBA;AV+BA,ACHA,AIZA,AOrBA,ADGA,ALeA,AHSA,AMlBA,AFMA,AMlBA,ALeA,ANkBA,AQxBA;AV+BA,ACHA,AIZA,AOrBA,ADGA,ALeA,AHSA,AMlBA,AFMA,AMlBA,ALeA,ANkBA,AQxBA;AV+BA,ACHA,AIZA,AOrBA,ADGA,ALeA,AHSA,AMlBA,AFMA,AMlBA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AbuCA,AIZA,AOrBA,ADGA,ALeA,AHSA,AMlBA,AFMA,AMlBA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AbuCA,AIZA,AOrBA,ADGA,ALeA,AHSA,AMlBA,AFMA,AMlBA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AbuCA,AIZA,AOrBA,ADGA,ALeA,AHSA,AMlBA,AFMA,AMlBA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AbuCA,AIZA,AOrBA,ADGA,ALeA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AbuCA,AIZA,AOrBA,ADGA,ALeA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AbuCA,AIZA,AOrBA,ADGA,ALeA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AbuCA,AIZA,AOrBA,AIZA,ALeA,ALeA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AbuCA,AIZA,AOrBA,AIZA,ALeA,ALeA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AbuCA,AIZA,AOrBA,AIZA,ALeA,ALeA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AOrBA,AIZA,ALeA,ALeA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AOrBA,AIZA,ALeA,ALeA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AOrBA,AIZA,ALeA,ALeA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AavCA,ANkBA,AIZA,ALeA,ALeA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AavCA,ANkBA,AIZA,ALeA,ALeA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AavCA,ANkBA,AIZA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AavCA,ANkBA,AOrBA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AavCA,ANkBA,AOrBA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AavCA,ANkBA,AOrBA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AavCA,ANkBA,AQxBA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AavCA,ANkBA,AQxBA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AavCA,ANkBA,AQxBA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AHSA,ANkBA,AQxBA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AHSA,ANkBA,AQxBA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AHSA,ANkBA,AQxBA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,ACHA,AJYA,ANkBA,AQxBA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,ACHA,AJYA,ANkBA,AQxBA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,ACHA,AJYA,ANkBA,AQxBA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AENA,ADGA,AJYA,ANkBA,AQxBA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AENA,ADGA,AJYA,ANkBA,AQxBA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AENA,ADGA,AJYA,ANkBA,AQxBA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AENA,ADGA,AJYA,ANkBA,AYpCA,AJYA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AENA,ADGA,AJYA,ANkBA,AYpCA,AJYA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AENA,ADGA,AJYA,ANkBA,AYpCA,AJYA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AIZA,AFMA,ADGA,AV8BA,AYpCA,AJYA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AIZA,AFMA,ADGA,AV8BA,AYpCA,AJYA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AIZA,AFMA,ADGA,AV8BA,AYpCA,AJYA,ADGA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AIZA,AFMA,ADGA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AIZA,AFMA,ADGA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AgBhDA,AIZA,AFMA,ADGA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AsBlEA,ANkBA,AIZA,AFMA,ADGA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AbuCA,AIZA,AsBlEA,ANkBA,AIZA,AFMA,ADGA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AT2BA,AsBlEA,ANkBA,AIZA,AFMA,ADGA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AT2BA,AsBlEA,ANkBA,AIZA,AGTA,ALeA,ADGA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AT2BA,AsBlEA,ANkBA,AIZA,AGTA,ALeA,ADGA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AOpBA,AjBmDA,Ac1CA,AT2BA,AsBlEA,ANkBA,AIZA,AGTA,ALeA,ADGA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AT2BA,AsBlEA,ANkBA,AIZA,AGTA,ACHA,ANkBA,ADGA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AT2BA,AsBlEA,ANkBA,AIZA,AGTA,ACHA,ANkBA,ADGA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AT2BA,AsBlEA,ANkBA,AIZA,AGTA,ACHA,APqBA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AT2BA,AsBlEA,AFMA,AGTA,ACHA,ACHA,ARwBA,AIZA,Ad0CA,AYpCA,ALeA,AHSA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AT2BA,AsBlEA,AFMA,AGTA,ACHA,ACHA,ARwBA,AIZA,Ad0CA,AYpCA,ARwBA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AT2BA,AsBlEA,AFMA,AGTA,ACHA,ACHA,ARwBA,AIZA,Ad0CA,AYpCA,ARwBA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,Ac1CA,AT2BA,AsBlEA,AFMA,AGTA,ACHA,ACHA,ARwBA,AS3BA,ALeA,Ad0CA,AYpCA,ARwBA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,AKfA,AsBlEA,AFMA,AGTA,ACHA,ACHA,ARwBA,AS3BA,ALeA,Ad0CA,AYpCA,ARwBA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,AKfA,AsBlEA,ACHA,ACHA,ACHA,ARwBA,AS3BA,ALeA,Ad0CA,AYpCA,ARwBA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,AKfA,AsBlEA,ACHA,ACHA,ACHA,ARwBA,AS3BA,ALeA,Ad0CA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,AKfA,AsBlEA,ACHA,ACHA,ACHA,ARwBA,AS3BA,ALeA,Ad0CA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,AKfA,AsBlEA,ACHA,ACHA,ACHA,ARwBA,AS3BA,ALeA,Ad0CA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,AKfA,AuBrEA,ACHA,ACHA,ARwBA,AS3BA,ALeA,AOrBA,ArB+DA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,ANkBA,AQxBA;AV+BA,AKfA,AuBrEA,ACHA,ACHA,ARwBA,AS3BA,ALeA,AOrBA,ArB+DA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,AuBrEA,ACHA,ACHA,ARwBA,AS3BA,ALeA,AOrBA,ArB+DA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ANkBA,ACHA,ACHA,ARwBA,AS3BA,ALeA,AOrBA,ArB+DA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ANkBA,ACHA,ACHA,ARwBA,AS3BA,ALeA,AOrBA,ArB+DA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ANkBA,ACHA,ACHA,ARwBA,AS3BA,ALeA,AOrBA,ArB+DA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ACHA,APqBA,ACHA,ACHA,ARwBA,AS3BA,ALeA,AOrBA,ArB+DA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ACHA,APqBA,ACHA,ACHA,ARwBA,AS3BA,ALeA,AOrBA,ArB+DA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ACHA,APqBA,ACHA,ACHA,ARwBA,AS3BA,ALeA,AOrBA,ArB+DA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ACHA,ACHA,ARwBA,ACHA,ACHA,ARwBA,AS3BA,ALeA,AOrBA,ArB+DA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ACHA,ACHA,ARwBA,ACHA,ACHA,ARwBA,AS3BA,ALeA,AOrBA,ArB+DA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ACHA,ACHA,ARwBA,ACHA,APqBA,AS3BA,ALeA,AOrBA,ArB+DA,AYpCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ACHA,ACHA,ARwBA,ACHA,APqBA,AS3BA,ALeA,AOrBA,ArB+DA,AyB3EA,AbuCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ACHA,ACHA,ARwBA,ACHA,APqBA,AS3BA,ALeA,AOrBA,ArB+DA,AyB3EA,AbuCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ACHA,ACHA,ARwBA,ACHA,APqBA,AS3BA,ALeA,AOrBA,ArB+DA,AyB3EA,AbuCA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ACHA,ACHA,ARwBA,ACHA,APqBA,AS3BA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,Ad0CA,AQxBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ACHA,ACHA,ARwBA,ACHA,APqBA,AS3BA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,AhBgDA,AV8BA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,A6BvFA,ACHA,ACHA,ARwBA,ACHA,APqBA,AS3BA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,A1B8EA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,ACHA,ACHA,ARwBA,ACHA,APqBA,AS3BA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,A1B8EA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,ACHA,ACHA,ARwBA,ANkBA,AS3BA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,A1B8EA,AHSA,AMlBA,AFMA,AQxBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,ACHA,ACHA,ARwBA,ANkBA,AS3BA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,A1B8EA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,ACHA,ACHA,ARwBA,ANkBA,AS3BA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,AQxBA,AlCsGA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,ACHA,ACHA,ARwBA,AGTA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,AQxBA,AlCsGA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,ACHA,ACHA,ARwBA,AGTA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,AQxBA,AlCsGA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,ACHA,ACHA,ARwBA,AavCA,AV8BA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,AQxBA,AlCsGA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,ACHA,ACHA,ARwBA,AavCA,AV8BA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,AQxBA,AlCsGA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,ACHA,ACHA,ARwBA,AavCA,AV8BA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,AQxBA,AlCsGA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,ACHA,AOrBA,ANkBA,ARwBA,AavCA,AV8BA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,AQxBA,AlCsGA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,ACHA,AOrBA,ANkBA,ARwBA,AavCA,AV8BA,ALeA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,AQxBA,AlCsGA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,ACHA,AOrBA,ANkBA,ARwBA,AavCA,Af6CA,AOrBA,ArB+DA,AyB3EA,ACHA,ANkBA,AQxBA,AlCsGA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,AQxBA,ANkBA,ARwBA,AavCA,Af6CA,AOrBA,ArB+DA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,AQxBA,ANkBA,ARwBA,AavCA,Af6CA,AOrBA,ArB+DA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,AQxBA,ANkBA,ARwBA,AavCA,ARwBA,ArB+DA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,AU9BA,AFMA,ANkBA,ARwBA,AavCA,ARwBA,ArB+DA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,AU9BA,AFMA,ANkBA,ARwBA,AavCA,A7BuFA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AkCtGA,ALeA,AU9BA,AFMA,ANkBA,ARwBA,AavCA,A7BuFA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AU9BA,AFMA,ANkBA,ARwBA,AavCA,A7BuFA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AU9BA,AFMA,ANkBA,ARwBA,AavCA,A7BuFA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AU9BA,AFMA,ANkBA,ARwBA,AavCA,A7BuFA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AU9BA,AENA,AJYA,ANkBA,AKfA,A7BuFA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AU9BA,AENA,AJYA,ANkBA,AKfA,A7BuFA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AU9BA,AENA,AJYA,ANkBA,AKfA,A7BuFA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,AHSA,AENA,AJYA,ANkBA,AKfA,A7BuFA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,AHSA,AENA,AJYA,ANkBA,AKfA,A7BuFA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,AHSA,AENA,AJYA,ANkBA,AKfA,A7BuFA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,AHSA,AENA,AJYA,ANkBA,AKfA,AOrBA,ApC4GA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,AHSA,AENA,AJYA,ANkBA,AKfA,AOrBA,ApC4GA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,AHSA,AENA,AJYA,ANkBA,AKfA,AOrBA,ApC4GA,AyB3EA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,AHSA,AENA,AJYA,ANkBA,AKfA,AOrBA,ApC4GA,AqC/GA,AZoCA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,ADGA,AJYA,ADGA,AOrBA,ApC4GA,AqC/GA,AZoCA,ACHA,AENA,AGTA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,ADGA,AJYA,ADGA,AOrBA,ApC4GA,AqC/GA,AZoCA,ACHA,AKfA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,ADGA,AJYA,ADGA,AS3BA,AFMA,ApC4GA,AqC/GA,AXiCA,AKfA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,ADGA,AJYA,ADGA,AS3BA,AFMA,ApC4GA,AqC/GA,AXiCA,AKfA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,ADGA,AJYA,ADGA,AS3BA,AFMA,ApC4GA,AqC/GA,AXiCA,AKfA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,ADGA,AJYA,ADGA,AS3BA,AFMA,ApC4GA,AqC/GA,AXiCA,AavCA,ARwBA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,ADGA,AJYA,ADGA,AS3BA,AFMA,ApC4GA,AqC/GA,AXiCA,AavCA,ARwBA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,ADGA,AJYA,ADGA,AS3BA,AFMA,ApC4GA,AqC/GA,AXiCA,AavCA,ARwBA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA,AENA;AV+BA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,ADGA,AJYA,AU9BA,AXiCA,AS3BA,AFMA,ApC4GA,AqC/GA,AXiCA,AavCA,ARwBA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA;ARyBA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,ADGA,AJYA,AU9BA,AXiCA,AS3BA,AFMA,ApC4GA,AqC/GA,AXiCA,AavCA,ARwBA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA;ARyBA,AKfA,AwCxHA,ANkBA,ALeA,AavCA,ADGA,AJYA,AU9BA,AXiCA,AS3BA,AFMA,ApC4GA,AqC/GA,AXiCA,AavCA,ARwBA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA;ARyBA,AKfA,AwCxHA,ANkBA,AQxBA,ADGA,AJYA,AU9BA,AXiCA,AS3BA,AFMA,ApC4GA,AyC3HA,AJYA,AXiCA,AavCA,ARwBA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA;ARyBA,AKfA,AwCxHA,ANkBA,AQxBA,ADGA,AJYA,AU9BA,AXiCA,AS3BA,AFMA,ApC4GA,AyC3HA,AJYA,AXiCA,AavCA,ARwBA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA;ARyBA,AKfA,AwCxHA,ANkBA,AQxBA,ADGA,AJYA,AU9BA,AXiCA,AS3BA,AFMA,ApC4GA,AyC3HA,AJYA,AXiCA,AavCA,ARwBA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA;ARyBA,AKfA,AwCxHA,ANkBA,Ae7CA,APqBA,ADGA,AJYA,AU9BA,AXiCA,AS3BA,AFMA,ApC4GA,AyC3HA,AJYA,AXiCA,AavCA,ARwBA,ArC+GA,AHSA,AMlBA,AMlBA,AFMA,ALeA;ARyBA,AKfA,AwCxHA,ANkBA,Ae7CA,APqBA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AXiCA,AavCA,ARwBA,AxCwHA,AMlBA,AMlBA,AFMA,ALeA;ARyBA,AKfA,AwCxHA,AS3BA,APqBA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AXiCA,AavCA,ARwBA,AxCwHA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,ARwBA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AXiCA,AavCA,ARwBA,AxCwHA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,ARwBA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AXiCA,AavCA,ARwBA,AxCwHA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,ARwBA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AXiCA,AavCA,ARwBA,AxCwHA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,ARwBA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AXiCA,AkBtDA,ALeA,ARwBA,AxCwHA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,ARwBA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AXiCA,AkBtDA,ALeA,ARwBA,AxCwHA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,ARwBA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AXiCA,AkBtDA,ALeA,ARwBA,AxCwHA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,ARwBA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AQxBA,AnByDA,AkBtDA,ALeA,ARwBA,AxCwHA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,ARwBA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AQxBA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,ARwBA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AQxBA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,AGTA,AXiCA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AQxBA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,AGTA,AXiCA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AQxBA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,AGTA,AXiCA,ADGA,AJYA,AU9BA,AFMA,AFMA,ApC4GA,AyC3HA,AJYA,AQxBA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,AGTA,AXiCA,ADGA,AJYA,AU9BA,AFMA,AS3BA,AXiCA,ApC4GA,AyC3HA,AJYA,AQxBA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,AGTA,AXiCA,ADGA,AJYA,AU9BA,AFMA,AS3BA,AXiCA,ApC4GA,AyC3HA,AJYA,AQxBA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,AGTA,AXiCA,ALeA,AU9BA,AOrBA,AXiCA,ApC4GA,AyC3HA,AJYA,AQxBA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,AGTA,AXiCA,ALeA,AU9BA,AOrBA,ACHA,AZoCA,ApC4GA,AyC3HA,AJYA,AQxBA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,AGTA,AXiCA,ALeA,AU9BA,AOrBA,ACHA,AZoCA,ApC4GA,AyC3HA,AJYA,AQxBA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AS3BA,ACHA,AGTA,AhBgDA,AU9BA,AOrBA,ACHA,AZoCA,ApC4GA,AyC3HA,AIZA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AU9BA,AGTA,AhBgDA,AU9BA,AS3BA,AFMA,ACHA,AZoCA,ApC4GA,AyC3HA,AIZA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AwCxHA,AU9BA,AGTA,AhBgDA,AU9BA,AS3BA,AFMA,ACHA,AZoCA,ApC4GA,AyC3HA,AIZA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AkDtJA,AGTA,AhBgDA,AU9BA,AS3BA,AFMA,ACHA,AZoCA,ApC4GA,AyC3HA,AIZA,AnByDA,AkBtDA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AkDtJA,AGTA,AhBgDA,AU9BA,AS3BA,AFMA,ACHA,AZoCA,ApC4GA,AyC3HA,AIZA,AnByDA,AwBxEA,ANkBA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AkDtJA,AGTA,AhBgDA,AU9BA,AS3BA,AFMA,ACHA,AZoCA,ApC4GA,AyC3HA,AIZA,AnByDA,AwBxEA,ANkBA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AkDtJA,AGTA,AhBgDA,AU9BA,AS3BA,AFMA,ACHA,AZoCA,ApC4GA,AyC3HA,AIZA,AnByDA,AwBxEA,ANkBA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AkDtJA,AGTA,AhBgDA,AU9BA,AS3BA,AFMA,ACHA,AZoCA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,ANkBA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AqD/JA,ANkBA,AS3BA,AFMA,ACHA,AZoCA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,ANkBA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AqD/JA,ANkBA,AS3BA,AFMA,ACHA,AZoCA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,ANkBA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AqD/JA,ANkBA,AS3BA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,ANkBA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AqD/JA,ANkBA,AS3BA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,ANkBA,ALeA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AqD/JA,ANkBA,AS3BA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,AXiCA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AqD/JA,ANkBA,AS3BA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,AGTA,Ad0CA,AhDgJA,AMlBA,AMlBA,AFMA,ALeA;AHUA,AqD/JA,ANkBA,AS3BA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,AGTA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;AHUA,AqD/JA,ANkBA,AS3BA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,AGTA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;AHUA,A+C7IA,AS3BA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,AIZA,ADGA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;AHUA,A+C7IA,AS3BA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,AIZA,ADGA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;AHUA,A+C7IA,AS3BA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,AIZA,ADGA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;AHUA,A+C7IA,Ae7CA,ANkBA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,AIZA,ADGA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;AHUA,A+C7IA,Ae7CA,ANkBA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,AIZA,AnByDA,AyB3EA,ADGA,AIZA,ADGA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;A4CnIA,Ae7CA,ANkBA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,AIZA,AMlBA,ADGA,AIZA,ADGA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;A4CnIA,Ae7CA,ANkBA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,Ae7CA,AXiCA,AMlBA,ADGA,AIZA,ADGA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;A4CnIA,Ae7CA,ANkBA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,Ae7CA,AXiCA,AMlBA,ADGA,AIZA,ADGA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;A4CnIA,Ae7CA,ANkBA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,Ae7CA,AXiCA,AMlBA,ADGA,AIZA,ADGA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;A4CnIA,Ae7CA,ANkBA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AyC3HA,Ae7CA,AXiCA,AMlBA,AMlBA,APqBA,AIZA,ADGA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;A4CnIA,Ae7CA,ANkBA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AwDxKA,AXiCA,AMlBA,AMlBA,APqBA,AIZA,ADGA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;A4CnIA,Ae7CA,ANkBA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,AwDxKA,AXiCA,AMlBA,AMlBA,APqBA,AIZA,ADGA,Ad0CA,AhDgJA,AMlBA,AIZA,ALeA;A4CnIA,Ae7CA,ANkBA,AFMA,ACHA,AIZA,AhBgDA,ApC4GA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,APqBA,AIZA,Af6CA,AhDgJA,AMlBA,AIZA,ALeA;A4CnIA,Ae7CA,ANkBA,ADGA,AIZA,AhBgDA,ApC4GA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,APqBA,AIZA,Af6CA,AhDgJA,AMlBA,AIZA,ALeA;A4CnIA,Ae7CA,APqBA,AIZA,AhBgDA,ApC4GA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,AHSA,Af6CA,AhDgJA,AMlBA,AIZA,ALeA;A+D5LA,AnByDA,Ae7CA,APqBA,AIZA,AhBgDA,ApC4GA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,AHSA,Af6CA,AhDgJA,AMlBA,AIZA,ALeA;A+D5LA,AnByDA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,AHSA,Af6CA,AhDgJA,AMlBA,AIZA,ALeA;A+D5LA,AnByDA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,AHSA,Af6CA,AhDgJA,AMlBA,AIZA,ALeA;A+D5LA,ACHA,ApB4DA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,AHSA,Af6CA,AhDgJA,AMlBA,AIZA,ALeA;A+D5LA,ACHA,ApB4DA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,AHSA,Af6CA,AhDgJA,AMlBA,AIZA,ALeA;A+D5LA,ACHA,ApB4DA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,AHSA,Af6CA,AhDgJA,AMlBA,AIZA,ALeA;A+D5LA,ACHA,ACHA,ArB+DA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,AHSA,Af6CA,AhDgJA,AMlBA,AIZA,ALeA;A+D5LA,ACHA,ACHA,ArB+DA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,AHSA,Af6CA,AhDgJA,AMlBA,AIZA,ALeA;A+D5LA,ACHA,ACHA,ArB+DA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,AHSA,Af6CA,AhDgJA,AMlBA,AIZA,ALeA;A+D5LA,ACHA,ACHA,ACHA,AtBkEA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,AXiCA,AMlBA,AMlBA,AlBsDA,AhDgJA,AMlBA,AIZA,ALeA;A+D5LA,ACHA,ACHA,ACHA,AtBkEA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,AXiCA,AYpCA,AlBsDA,AhDgJA,AMlBA,AIZA,ALeA;A+D5LA,ACHA,ACHA,ACHA,AtBkEA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,AXiCA,AYpCA,AlBsDA,AhDgJA,AMlBA,AIZA,ALeA;AmExMA,AJYA,ACHA,ACHA,ACHA,AtBkEA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,AXiCA,AYpCA,AlBsDA,AhDgJA,AMlBA,AIZA,ALeA;AmExMA,AJYA,ACHA,ACHA,ACHA,AtBkEA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,ACHA,AlBsDA,AhDgJA,AMlBA,AIZA,ALeA;AmExMA,AJYA,ACHA,ACHA,ACHA,AtBkEA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,ACHA,AlBsDA,AhDgJA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ACHA,AtBkEA,Ae7CA,APqBA,AIZA,ApD4JA,A0D9KA,AFMA,ACHA,AlBsDA,AhDgJA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ACHA,APqBA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AlBsDA,AhDgJA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ACHA,APqBA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AlBsDA,AhDgJA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ACHA,APqBA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AlBsDA,A0B9EA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ACHA,APqBA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AlBsDA,A0B9EA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ACHA,APqBA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AQxBA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ACHA,APqBA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AQxBA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ACHA,APqBA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AQxBA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ACHA,APqBA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AQxBA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ANkBA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AQxBA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ANkBA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AQxBA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ANkBA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AQxBA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ACHA,ANkBA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AQxBA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,ACHA,AQxBA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AJYA,ACHA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AHSA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AHSA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,ADGA,AHSA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AwDxKA,AS3BA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AIZA,ApD4JA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AJYA,ALeA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,APqBA,AhDgJA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,AIZA,ALeA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,ADGA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,ADGA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,ADGA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,ADGA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,ADGA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,ADGA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,ADGA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,ADGA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,ADGA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,ADGA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,ADGA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA,ADGA;AoE3MA,AT2BA,AvDqKA,AiEnMA,A1E8NA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AT2BA,AMlBA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AT2BA,AvDqKA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA,AHSA;AmExMA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;AgE/LA,AhEgMA;Agfile":"index.js","sourcesContent":["let browserslist = require('browserslist')\nlet { agents } = require('caniuse-lite/dist/unpacker/agents')\nlet pico = require('picocolors')\n\nlet Browsers = require('./browsers')\nlet Prefixes = require('./prefixes')\nlet dataPrefixes = require('../data/prefixes')\nlet getInfo = require('./info')\n\nlet autoprefixerData = { browsers: agents, prefixes: dataPrefixes }\n\nconst WARNING =\n  '\\n' +\n  '  Replace Autoprefixer `browsers` option to Browserslist config.\\n' +\n  '  Use `browserslist` key in `package.json` or `.browserslistrc` file.\\n' +\n  '\\n' +\n  '  Using `browsers` option can cause errors. Browserslist config can\\n' +\n  '  be used for Babel, Autoprefixer, postcss-normalize and other tools.\\n' +\n  '\\n' +\n  '  If you really need to use option, rename it to `overrideBrowserslist`.\\n' +\n  '\\n' +\n  '  Learn more at:\\n' +\n  '  https://github.com/browserslist/browserslist#readme\\n' +\n  '  https://twitter.com/browserslist\\n' +\n  '\\n'\n\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.apply(obj) === '[object Object]'\n}\n\nlet cache = new Map()\n\nfunction timeCapsule(result, prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return\n  }\n  if (prefixes.add.selectors.length > 0) {\n    return\n  }\n  if (Object.keys(prefixes.add).length > 2) {\n    return\n  }\n  /* c8 ignore next 11 */\n  result.warn(\n    'Autoprefixer target browsers do not need any prefixes.' +\n      'You do not need Autoprefixer anymore.\\n' +\n      'Check your Browserslist config to be sure that your targets ' +\n      'are set up correctly.\\n' +\n      '\\n' +\n      '  Learn more at:\\n' +\n      '  https://github.com/postcss/autoprefixer#readme\\n' +\n      '  https://github.com/browserslist/browserslist#readme\\n' +\n      '\\n'\n  )\n}\n\nmodule.exports = plugin\n\nfunction plugin(...reqs) {\n  let options\n  if (reqs.length === 1 && isPlainObject(reqs[0])) {\n    options = reqs[0]\n    reqs = undefined\n  } else if (reqs.length === 0 || (reqs.length === 1 && !reqs[0])) {\n    reqs = undefined\n  } else if (reqs.length <= 2 && (Array.isArray(reqs[0]) || !reqs[0])) {\n    options = reqs[1]\n    reqs = reqs[0]\n  } else if (typeof reqs[reqs.length - 1] === 'object') {\n    options = reqs.pop()\n  }\n\n  if (!options) {\n    options = {}\n  }\n\n  if (options.browser) {\n    throw new Error(\n      'Change `browser` option to `overrideBrowserslist` in Autoprefixer'\n    )\n  } else if (options.browserslist) {\n    throw new Error(\n      'Change `browserslist` option to `overrideBrowserslist` in Autoprefixer'\n    )\n  }\n\n  if (options.overrideBrowserslist) {\n    reqs = options.overrideBrowserslist\n  } else if (options.browsers) {\n    if (typeof console !== 'undefined' && console.warn) {\n      console.warn(\n        pico.red(WARNING.replace(/`[^`]+`/g, i => pico.yellow(i.slice(1, -1))))\n      )\n    }\n    reqs = options.browsers\n  }\n\n  let brwlstOpts = {\n    ignoreUnknownVersions: options.ignoreUnknownVersions,\n    stats: options.stats,\n    env: options.env\n  }\n\n  function loadPrefixes(opts) {\n    let d = autoprefixerData\n    let browsers = new Browsers(d.browsers, reqs, opts, brwlstOpts)\n    let key = browsers.selected.join(', ') + JSON.stringify(options)\n\n    if (!cache.has(key)) {\n      cache.set(key, new Prefixes(d.prefixes, browsers, options))\n    }\n\n    return cache.get(key)\n  }\n\n  return {\n    postcssPlugin: 'autoprefixer',\n\n    prepare(result) {\n      let prefixes = loadPrefixes({\n        from: result.opts.from,\n        env: options.env\n      })\n\n      return {\n        OnceExit(root) {\n          timeCapsule(result, prefixes)\n          if (options.remove !== false) {\n            prefixes.processor.remove(root, result)\n          }\n          if (options.add !== false) {\n            prefixes.processor.add(root, result)\n          }\n        }\n      }\n    },\n\n    info(opts) {\n      opts = opts || {}\n      opts.from = opts.from || process.cwd()\n      return getInfo(loadPrefixes(opts))\n    },\n\n    options,\n    browsers: reqs\n  }\n}\n\nplugin.postcss = true\n\n/**\n * Autoprefixer data\n */\nplugin.data = autoprefixerData\n\n/**\n * Autoprefixer default browsers\n */\nplugin.defaults = browserslist.defaults\n\n/**\n * Inspect with default Autoprefixer\n */\nplugin.info = () => plugin().info()\n","let browserslist = require('browserslist')\nlet { agents } = require('caniuse-lite/dist/unpacker/agents')\n\nlet utils = require('./utils')\n\nclass Browsers {\n  /**\n   * Return all prefixes for default browser data\n   */\n  static prefixes() {\n    if (this.prefixesCache) {\n      return this.prefixesCache\n    }\n\n    this.prefixesCache = []\n    for (let name in agents) {\n      this.prefixesCache.push(`-${agents[name].prefix}-`)\n    }\n\n    this.prefixesCache = utils\n      .uniq(this.prefixesCache)\n      .sort((a, b) => b.length - a.length)\n\n    return this.prefixesCache\n  }\n\n  /**\n   * Check is value contain any possible prefix\n   */\n  static withPrefix(value) {\n    if (!this.prefixesRegexp) {\n      this.prefixesRegexp = new RegExp(this.prefixes().join('|'))\n    }\n\n    return this.prefixesRegexp.test(value)\n  }\n\n  constructor(data, requirements, options, browserslistOpts) {\n    this.data = data\n    this.options = options || {}\n    this.browserslistOpts = browserslistOpts || {}\n    this.selected = this.parse(requirements)\n  }\n\n  /**\n   * Return browsers selected by requirements\n   */\n  parse(requirements) {\n    let opts = {}\n    for (let i in this.browserslistOpts) {\n      opts[i] = this.browserslistOpts[i]\n    }\n    opts.path = this.options.from\n    return browserslist(requirements, opts)\n  }\n\n  /**\n   * Return prefix for selected browser\n   */\n  prefix(browser) {\n    let [name, version] = browser.split(' ')\n    let data = this.data[name]\n\n    let prefix = data.prefix_exceptions && data.prefix_exceptions[version]\n    if (!prefix) {\n      prefix = data.prefix\n    }\n    return `-${prefix}-`\n  }\n\n  /**\n   * Is browser is selected by requirements\n   */\n  isSelected(browser) {\n    return this.selected.includes(browser)\n  }\n}\n\nmodule.exports = Browsers\n","let { list } = require('postcss')\n\n/**\n * Throw special error, to tell beniary,\n * that this error is from Autoprefixer.\n */\nmodule.exports.error = function (text) {\n  let err = new Error(text)\n  err.autoprefixer = true\n  throw err\n}\n\n/**\n * Return array, that doesn’t contain duplicates.\n */\nmodule.exports.uniq = function (array) {\n  return [...new Set(array)]\n}\n\n/**\n * Return \"-webkit-\" on \"-webkit- old\"\n */\nmodule.exports.removeNote = function (string) {\n  if (!string.includes(' ')) {\n    return string\n  }\n\n  return string.split(' ')[0]\n}\n\n/**\n * Escape RegExp symbols\n */\nmodule.exports.escapeRegexp = function (string) {\n  return string.replace(/[$()*+-.?[\\\\\\]^{|}]/g, '\\\\$&')\n}\n\n/**\n * Return regexp to check, that CSS string contain word\n */\nmodule.exports.regexp = function (word, escape = true) {\n  if (escape) {\n    word = this.escapeRegexp(word)\n  }\n  return new RegExp(`(^|[\\\\s,(])(${word}($|[\\\\s(,]))`, 'gi')\n}\n\n/**\n * Change comma list\n */\nmodule.exports.editList = function (value, callback) {\n  let origin = list.comma(value)\n  let changed = callback(origin, [])\n\n  if (origin === changed) {\n    return value\n  }\n\n  let join = value.match(/,\\s*/)\n  join = join ? join[0] : ', '\n  return changed.join(join)\n}\n\n/**\n * Split the selector into parts.\n * It returns 3 level deep array because selectors can be comma\n * separated (1), space separated (2), and combined (3)\n * @param {String} selector selector string\n * @return {Array<Array<Array>>} 3 level deep array of split selector\n * @see utils.test.js for examples\n */\nmodule.exports.splitSelector = function (selector) {\n  return list.comma(selector).map(i => {\n    return list.space(i).map(k => {\n      return k.split(/(?=\\.|#)/g)\n    })\n  })\n}\n\n/**\n * Return true if a given value only contains numbers.\n * @param {*} value\n * @returns {boolean}\n */\nmodule.exports.isPureNumber = function (value) {\n  if (typeof value === 'number') {\n    return true\n  }\n  if (typeof value === 'string') {\n    return /^[0-9]+$/.test(value)\n  }\n  return false\n}\n","let vendor = require('./vendor')\nlet Declaration = require('./declaration')\nlet Resolution = require('./resolution')\nlet Transition = require('./transition')\nlet Processor = require('./processor')\nlet Supports = require('./supports')\nlet Browsers = require('./browsers')\nlet Selector = require('./selector')\nlet AtRule = require('./at-rule')\nlet Value = require('./value')\nlet utils = require('./utils')\nlet hackFullscreen = require('./hacks/fullscreen')\nlet hackPlaceholder = require('./hacks/placeholder')\nlet hackPlaceholderShown = require('./hacks/placeholder-shown')\nlet hackFileSelectorButton = require('./hacks/file-selector-button')\nlet hackFlex = require('./hacks/flex')\nlet hackOrder = require('./hacks/order')\nlet hackFilter = require('./hacks/filter')\nlet hackGridEnd = require('./hacks/grid-end')\nlet hackAnimation = require('./hacks/animation')\nlet hackFlexFlow = require('./hacks/flex-flow')\nlet hackFlexGrow = require('./hacks/flex-grow')\nlet hackFlexWrap = require('./hacks/flex-wrap')\nlet hackGridArea = require('./hacks/grid-area')\nlet hackPlaceSelf = require('./hacks/place-self')\nlet hackGridStart = require('./hacks/grid-start')\nlet hackAlignSelf = require('./hacks/align-self')\nlet hackAppearance = require('./hacks/appearance')\nlet hackFlexBasis = require('./hacks/flex-basis')\nlet hackMaskBorder = require('./hacks/mask-border')\nlet hackMaskComposite = require('./hacks/mask-composite')\nlet hackAlignItems = require('./hacks/align-items')\nlet hackUserSelect = require('./hacks/user-select')\nlet hackFlexShrink = require('./hacks/flex-shrink')\nlet hackBreakProps = require('./hacks/break-props')\nlet hackWritingMode = require('./hacks/writing-mode')\nlet hackBorderImage = require('./hacks/border-image')\nlet hackAlignContent = require('./hacks/align-content')\nlet hackBorderRadius = require('./hacks/border-radius')\nlet hackBlockLogical = require('./hacks/block-logical')\nlet hackGridTemplate = require('./hacks/grid-template')\nlet hackInlineLogical = require('./hacks/inline-logical')\nlet hackGridRowAlign = require('./hacks/grid-row-align')\nlet hackTransformDecl = require('./hacks/transform-decl')\nlet hackFlexDirection = require('./hacks/flex-direction')\nlet hackImageRendering = require('./hacks/image-rendering')\nlet hackBackdropFilter = require('./hacks/backdrop-filter')\nlet hackBackgroundClip = require('./hacks/background-clip')\nlet hackTextDecoration = require('./hacks/text-decoration')\nlet hackJustifyContent = require('./hacks/justify-content')\nlet hackBackgroundSize = require('./hacks/background-size')\nlet hackGridRowColumn = require('./hacks/grid-row-column')\nlet hackGridRowsColumns = require('./hacks/grid-rows-columns')\nlet hackGridColumnAlign = require('./hacks/grid-column-align')\nlet hackPrintColorAdjust = require('./hacks/print-color-adjust')\nlet hackOverscrollBehavior = require('./hacks/overscroll-behavior')\nlet hackGridTemplateAreas = require('./hacks/grid-template-areas')\nlet hackTextEmphasisPosition = require('./hacks/text-emphasis-position')\nlet hackTextDecorationSkipInk = require('./hacks/text-decoration-skip-ink')\nlet hackGradient = require('./hacks/gradient')\nlet hackIntrinsic = require('./hacks/intrinsic')\nlet hackPixelated = require('./hacks/pixelated')\nlet hackImageSet = require('./hacks/image-set')\nlet hackCrossFade = require('./hacks/cross-fade')\nlet hackDisplayFlex = require('./hacks/display-flex')\nlet hackDisplayGrid = require('./hacks/display-grid')\nlet hackFilterValue = require('./hacks/filter-value')\nlet hackAutofill = require('./hacks/autofill')\n\nSelector.hack(hackAutofill)\nSelector.hack(hackFullscreen)\nSelector.hack(hackPlaceholder)\nSelector.hack(hackPlaceholderShown)\nSelector.hack(hackFileSelectorButton)\nDeclaration.hack(hackFlex)\nDeclaration.hack(hackOrder)\nDeclaration.hack(hackFilter)\nDeclaration.hack(hackGridEnd)\nDeclaration.hack(hackAnimation)\nDeclaration.hack(hackFlexFlow)\nDeclaration.hack(hackFlexGrow)\nDeclaration.hack(hackFlexWrap)\nDeclaration.hack(hackGridArea)\nDeclaration.hack(hackPlaceSelf)\nDeclaration.hack(hackGridStart)\nDeclaration.hack(hackAlignSelf)\nDeclaration.hack(hackAppearance)\nDeclaration.hack(hackFlexBasis)\nDeclaration.hack(hackMaskBorder)\nDeclaration.hack(hackMaskComposite)\nDeclaration.hack(hackAlignItems)\nDeclaration.hack(hackUserSelect)\nDeclaration.hack(hackFlexShrink)\nDeclaration.hack(hackBreakProps)\nDeclaration.hack(hackWritingMode)\nDeclaration.hack(hackBorderImage)\nDeclaration.hack(hackAlignContent)\nDeclaration.hack(hackBorderRadius)\nDeclaration.hack(hackBlockLogical)\nDeclaration.hack(hackGridTemplate)\nDeclaration.hack(hackInlineLogical)\nDeclaration.hack(hackGridRowAlign)\nDeclaration.hack(hackTransformDecl)\nDeclaration.hack(hackFlexDirection)\nDeclaration.hack(hackImageRendering)\nDeclaration.hack(hackBackdropFilter)\nDeclaration.hack(hackBackgroundClip)\nDeclaration.hack(hackTextDecoration)\nDeclaration.hack(hackJustifyContent)\nDeclaration.hack(hackBackgroundSize)\nDeclaration.hack(hackGridRowColumn)\nDeclaration.hack(hackGridRowsColumns)\nDeclaration.hack(hackGridColumnAlign)\nDeclaration.hack(hackOverscrollBehavior)\nDeclaration.hack(hackGridTemplateAreas)\nDeclaration.hack(hackPrintColorAdjust)\nDeclaration.hack(hackTextEmphasisPosition)\nDeclaration.hack(hackTextDecorationSkipInk)\nValue.hack(hackGradient)\nValue.hack(hackIntrinsic)\nValue.hack(hackPixelated)\nValue.hack(hackImageSet)\nValue.hack(hackCrossFade)\nValue.hack(hackDisplayFlex)\nValue.hack(hackDisplayGrid)\nValue.hack(hackFilterValue)\n\nlet declsCache = new Map()\n\nclass Prefixes {\n  constructor(data, browsers, options = {}) {\n    this.data = data\n    this.browsers = browsers\n    this.options = options\n    ;[this.add, this.remove] = this.preprocess(this.select(this.data))\n    this.transition = new Transition(this)\n    this.processor = new Processor(this)\n  }\n\n  /**\n   * Return clone instance to remove all prefixes\n   */\n  cleaner() {\n    if (this.cleanerCache) {\n      return this.cleanerCache\n    }\n\n    if (this.browsers.selected.length) {\n      let empty = new Browsers(this.browsers.data, [])\n      this.cleanerCache = new Prefixes(this.data, empty, this.options)\n    } else {\n      return this\n    }\n\n    return this.cleanerCache\n  }\n\n  /**\n   * Select prefixes from data, which is necessary for selected browsers\n   */\n  select(list) {\n    let selected = { add: {}, remove: {} }\n\n    for (let name in list) {\n      let data = list[name]\n      let add = data.browsers.map(i => {\n        let params = i.split(' ')\n        return {\n          browser: `${params[0]} ${params[1]}`,\n          note: params[2]\n        }\n      })\n\n      let notes = add\n        .filter(i => i.note)\n        .map(i => `${this.browsers.prefix(i.browser)} ${i.note}`)\n      notes = utils.uniq(notes)\n\n      add = add\n        .filter(i => this.browsers.isSelected(i.browser))\n        .map(i => {\n          let prefix = this.browsers.prefix(i.browser)\n          if (i.note) {\n            return `${prefix} ${i.note}`\n          } else {\n            return prefix\n          }\n        })\n      add = this.sort(utils.uniq(add))\n\n      if (this.options.flexbox === 'no-2009') {\n        add = add.filter(i => !i.includes('2009'))\n      }\n\n      let all = data.browsers.map(i => this.browsers.prefix(i))\n      if (data.mistakes) {\n        all = all.concat(data.mistakes)\n      }\n      all = all.concat(notes)\n      all = utils.uniq(all)\n\n      if (add.length) {\n        selected.add[name] = add\n        if (add.length < all.length) {\n          selected.remove[name] = all.filter(i => !add.includes(i))\n        }\n      } else {\n        selected.remove[name] = all\n      }\n    }\n\n    return selected\n  }\n\n  /**\n   * Sort vendor prefixes\n   */\n  sort(prefixes) {\n    return prefixes.sort((a, b) => {\n      let aLength = utils.removeNote(a).length\n      let bLength = utils.removeNote(b).length\n\n      if (aLength === bLength) {\n        return b.length - a.length\n      } else {\n        return bLength - aLength\n      }\n    })\n  }\n\n  /**\n   * Cache prefixes data to fast CSS processing\n   */\n  preprocess(selected) {\n    let add = {\n      'selectors': [],\n      '@supports': new Supports(Prefixes, this)\n    }\n    for (let name in selected.add) {\n      let prefixes = selected.add[name]\n      if (name === '@keyframes' || name === '@viewport') {\n        add[name] = new AtRule(name, prefixes, this)\n      } else if (name === '@resolution') {\n        add[name] = new Resolution(name, prefixes, this)\n      } else if (this.data[name].selector) {\n        add.selectors.push(Selector.load(name, prefixes, this))\n      } else {\n        let props = this.data[name].props\n\n        if (props) {\n          let value = Value.load(name, prefixes, this)\n          for (let prop of props) {\n            if (!add[prop]) {\n              add[prop] = { values: [] }\n            }\n            add[prop].values.push(value)\n          }\n        } else {\n          let values = (add[name] && add[name].values) || []\n          add[name] = Declaration.load(name, prefixes, this)\n          add[name].values = values\n        }\n      }\n    }\n\n    let remove = { selectors: [] }\n    for (let name in selected.remove) {\n      let prefixes = selected.remove[name]\n      if (this.data[name].selector) {\n        let selector = Selector.load(name, prefixes)\n        for (let prefix of prefixes) {\n          remove.selectors.push(selector.old(prefix))\n        }\n      } else if (name === '@keyframes' || name === '@viewport') {\n        for (let prefix of prefixes) {\n          let prefixed = `@${prefix}${name.slice(1)}`\n          remove[prefixed] = { remove: true }\n        }\n      } else if (name === '@resolution') {\n        remove[name] = new Resolution(name, prefixes, this)\n      } else {\n        let props = this.data[name].props\n        if (props) {\n          let value = Value.load(name, [], this)\n          for (let prefix of prefixes) {\n            let old = value.old(prefix)\n            if (old) {\n              for (let prop of props) {\n                if (!remove[prop]) {\n                  remove[prop] = {}\n                }\n                if (!remove[prop].values) {\n                  remove[prop].values = []\n                }\n                remove[prop].values.push(old)\n              }\n            }\n          }\n        } else {\n          for (let p of prefixes) {\n            let olds = this.decl(name).old(name, p)\n            if (name === 'align-self') {\n              let a = add[name] && add[name].prefixes\n              if (a) {\n                if (p === '-webkit- 2009' && a.includes('-webkit-')) {\n                  continue\n                } else if (p === '-webkit-' && a.includes('-webkit- 2009')) {\n                  continue\n                }\n              }\n            }\n            for (let prefixed of olds) {\n              if (!remove[prefixed]) {\n                remove[prefixed] = {}\n              }\n              remove[prefixed].remove = true\n            }\n          }\n        }\n      }\n    }\n\n    return [add, remove]\n  }\n\n  /**\n   * Declaration loader with caching\n   */\n  decl(prop) {\n    if (!declsCache.has(prop)) {\n      declsCache.set(prop, Declaration.load(prop))\n    }\n\n    return declsCache.get(prop)\n  }\n\n  /**\n   * Return unprefixed version of property\n   */\n  unprefixed(prop) {\n    let value = this.normalize(vendor.unprefixed(prop))\n    if (value === 'flex-direction') {\n      value = 'flex-flow'\n    }\n    return value\n  }\n\n  /**\n   * Normalize prefix for remover\n   */\n  normalize(prop) {\n    return this.decl(prop).normalize(prop)\n  }\n\n  /**\n   * Return prefixed version of property\n   */\n  prefixed(prop, prefix) {\n    prop = vendor.unprefixed(prop)\n    return this.decl(prop).prefixed(prop, prefix)\n  }\n\n  /**\n   * Return values, which must be prefixed in selected property\n   */\n  values(type, prop) {\n    let data = this[type]\n\n    let global = data['*'] && data['*'].values\n    let values = data[prop] && data[prop].values\n\n    if (global && values) {\n      return utils.uniq(global.concat(values))\n    } else {\n      return global || values || []\n    }\n  }\n\n  /**\n   * Group declaration by unprefixed property to check them\n   */\n  group(decl) {\n    let rule = decl.parent\n    let index = rule.index(decl)\n    let { length } = rule.nodes\n    let unprefixed = this.unprefixed(decl.prop)\n\n    let checker = (step, callback) => {\n      index += step\n      while (index >= 0 && index < length) {\n        let other = rule.nodes[index]\n        if (other.type === 'decl') {\n          if (step === -1 && other.prop === unprefixed) {\n            if (!Browsers.withPrefix(other.value)) {\n              break\n            }\n          }\n\n          if (this.unprefixed(other.prop) !== unprefixed) {\n            break\n          } else if (callback(other) === true) {\n            return true\n          }\n\n          if (step === +1 && other.prop === unprefixed) {\n            if (!Browsers.withPrefix(other.value)) {\n              break\n            }\n          }\n        }\n\n        index += step\n      }\n      return false\n    }\n\n    return {\n      up(callback) {\n        return checker(-1, callback)\n      },\n      down(callback) {\n        return checker(+1, callback)\n      }\n    }\n  }\n}\n\nmodule.exports = Prefixes\n","module.exports = {\n  prefix(prop) {\n    let match = prop.match(/^(-\\w+-)/)\n    if (match) {\n      return match[0]\n    }\n\n    return ''\n  },\n\n  unprefixed(prop) {\n    return prop.replace(/^-\\w+-/, '')\n  }\n}\n","let Prefixer = require('./prefixer')\nlet Browsers = require('./browsers')\nlet utils = require('./utils')\n\nclass Declaration extends Prefixer {\n  /**\n   * Always true, because we already get prefixer by property name\n   */\n  check(/* decl */) {\n    return true\n  }\n\n  /**\n   * Return prefixed version of property\n   */\n  prefixed(prop, prefix) {\n    return prefix + prop\n  }\n\n  /**\n   * Return unprefixed version of property\n   */\n  normalize(prop) {\n    return prop\n  }\n\n  /**\n   * Check `value`, that it contain other prefixes, rather than `prefix`\n   */\n  otherPrefixes(value, prefix) {\n    for (let other of Browsers.prefixes()) {\n      if (other === prefix) {\n        continue\n      }\n      if (value.includes(other)) {\n        return value.replace(/var\\([^)]+\\)/, '').includes(other)\n      }\n    }\n    return false\n  }\n\n  /**\n   * Set prefix to declaration\n   */\n  set(decl, prefix) {\n    decl.prop = this.prefixed(decl.prop, prefix)\n    return decl\n  }\n\n  /**\n   * Should we use visual cascade for prefixes\n   */\n  needCascade(decl) {\n    if (!decl._autoprefixerCascade) {\n      decl._autoprefixerCascade =\n        this.all.options.cascade !== false && decl.raw('before').includes('\\n')\n    }\n    return decl._autoprefixerCascade\n  }\n\n  /**\n   * Return maximum length of possible prefixed property\n   */\n  maxPrefixed(prefixes, decl) {\n    if (decl._autoprefixerMax) {\n      return decl._autoprefixerMax\n    }\n\n    let max = 0\n    for (let prefix of prefixes) {\n      prefix = utils.removeNote(prefix)\n      if (prefix.length > max) {\n        max = prefix.length\n      }\n    }\n    decl._autoprefixerMax = max\n\n    return decl._autoprefixerMax\n  }\n\n  /**\n   * Calculate indentation to create visual cascade\n   */\n  calcBefore(prefixes, decl, prefix = '') {\n    let max = this.maxPrefixed(prefixes, decl)\n    let diff = max - utils.removeNote(prefix).length\n\n    let before = decl.raw('before')\n    if (diff > 0) {\n      before += Array(diff).fill(' ').join('')\n    }\n\n    return before\n  }\n\n  /**\n   * Remove visual cascade\n   */\n  restoreBefore(decl) {\n    let lines = decl.raw('before').split('\\n')\n    let min = lines[lines.length - 1]\n\n    this.all.group(decl).up(prefixed => {\n      let array = prefixed.raw('before').split('\\n')\n      let last = array[array.length - 1]\n      if (last.length < min.length) {\n        min = last\n      }\n    })\n\n    lines[lines.length - 1] = min\n    decl.raws.before = lines.join('\\n')\n  }\n\n  /**\n   * Clone and insert new declaration\n   */\n  insert(decl, prefix, prefixes) {\n    let cloned = this.set(this.clone(decl), prefix)\n    if (!cloned) return undefined\n\n    let already = decl.parent.some(\n      i => i.prop === cloned.prop && i.value === cloned.value\n    )\n    if (already) {\n      return undefined\n    }\n\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    return decl.parent.insertBefore(decl, cloned)\n  }\n\n  /**\n   * Did this declaration has this prefix above\n   */\n  isAlready(decl, prefixed) {\n    let already = this.all.group(decl).up(i => i.prop === prefixed)\n    if (!already) {\n      already = this.all.group(decl).down(i => i.prop === prefixed)\n    }\n    return already\n  }\n\n  /**\n   * Clone and add prefixes for declaration\n   */\n  add(decl, prefix, prefixes, result) {\n    let prefixed = this.prefixed(decl.prop, prefix)\n    if (\n      this.isAlready(decl, prefixed) ||\n      this.otherPrefixes(decl.value, prefix)\n    ) {\n      return undefined\n    }\n    return this.insert(decl, prefix, prefixes, result)\n  }\n\n  /**\n   * Add spaces for visual cascade\n   */\n  process(decl, result) {\n    if (!this.needCascade(decl)) {\n      super.process(decl, result)\n      return\n    }\n\n    let prefixes = super.process(decl, result)\n\n    if (!prefixes || !prefixes.length) {\n      return\n    }\n\n    this.restoreBefore(decl)\n    decl.raws.before = this.calcBefore(prefixes, decl)\n  }\n\n  /**\n   * Return list of prefixed properties to clean old prefixes\n   */\n  old(prop, prefix) {\n    return [this.prefixed(prop, prefix)]\n  }\n}\n\nmodule.exports = Declaration\n","let Browsers = require('./browsers')\nlet vendor = require('./vendor')\nlet utils = require('./utils')\n\n/**\n * Recursively clone objects\n */\nfunction clone(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i of Object.keys(obj || {})) {\n    let value = obj[i]\n    if (i === 'parent' && typeof value === 'object') {\n      if (parent) {\n        cloned[i] = parent\n      }\n    } else if (i === 'source' || i === null) {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(x => clone(x, cloned))\n    } else if (\n      i !== '_autoprefixerPrefix' &&\n      i !== '_autoprefixerValues' &&\n      i !== 'proxyCache'\n    ) {\n      if (typeof value === 'object' && value !== null) {\n        value = clone(value, cloned)\n      }\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Prefixer {\n  /**\n   * Add hack to selected names\n   */\n  static hack(klass) {\n    if (!this.hacks) {\n      this.hacks = {}\n    }\n    return klass.names.map(name => {\n      this.hacks[name] = klass\n      return this.hacks[name]\n    })\n  }\n\n  /**\n   * Load hacks for some names\n   */\n  static load(name, prefixes, all) {\n    let Klass = this.hacks && this.hacks[name]\n    if (Klass) {\n      return new Klass(name, prefixes, all)\n    } else {\n      return new this(name, prefixes, all)\n    }\n  }\n\n  /**\n   * Clone node and clean autprefixer custom caches\n   */\n  static clone(node, overrides) {\n    let cloned = clone(node)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  constructor(name, prefixes, all) {\n    this.prefixes = prefixes\n    this.name = name\n    this.all = all\n  }\n\n  /**\n   * Find prefix in node parents\n   */\n  parentPrefix(node) {\n    let prefix\n\n    if (typeof node._autoprefixerPrefix !== 'undefined') {\n      prefix = node._autoprefixerPrefix\n    } else if (node.type === 'decl' && node.prop[0] === '-') {\n      prefix = vendor.prefix(node.prop)\n    } else if (node.type === 'root') {\n      prefix = false\n    } else if (\n      node.type === 'rule' &&\n      node.selector.includes(':-') &&\n      /:(-\\w+-)/.test(node.selector)\n    ) {\n      prefix = node.selector.match(/:(-\\w+-)/)[1]\n    } else if (node.type === 'atrule' && node.name[0] === '-') {\n      prefix = vendor.prefix(node.name)\n    } else {\n      prefix = this.parentPrefix(node.parent)\n    }\n\n    if (!Browsers.prefixes().includes(prefix)) {\n      prefix = false\n    }\n\n    node._autoprefixerPrefix = prefix\n\n    return node._autoprefixerPrefix\n  }\n\n  /**\n   * Clone node with prefixes\n   */\n  process(node, result) {\n    if (!this.check(node)) {\n      return undefined\n    }\n\n    let parent = this.parentPrefix(node)\n\n    let prefixes = this.prefixes.filter(\n      prefix => !parent || parent === utils.removeNote(prefix)\n    )\n\n    let added = []\n    for (let prefix of prefixes) {\n      if (this.add(node, prefix, added.concat([prefix]), result)) {\n        added.push(prefix)\n      }\n    }\n\n    return added\n  }\n\n  /**\n   * Shortcut for Prefixer.clone\n   */\n  clone(node, overrides) {\n    return Prefixer.clone(node, overrides)\n  }\n}\n\nmodule.exports = Prefixer\n","let FractionJs = require('fraction.js')\n\nlet Prefixer = require('./prefixer')\nlet utils = require('./utils')\n\nconst REGEXP = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpcm|dpi|x)/gi\nconst SPLIT = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpcm|dpi|x)/i\n\nclass Resolution extends Prefixer {\n  /**\n   * Return prefixed query name\n   */\n  prefixName(prefix, name) {\n    if (prefix === '-moz-') {\n      return name + '--moz-device-pixel-ratio'\n    } else {\n      return prefix + name + '-device-pixel-ratio'\n    }\n  }\n\n  /**\n   * Return prefixed query\n   */\n  prefixQuery(prefix, name, colon, value, units) {\n    value = new FractionJs(value)\n\n    // 1dpcm = 2.54dpi\n    // 1dppx = 96dpi\n    if (units === 'dpi') {\n      value = value.div(96)\n    } else if (units === 'dpcm') {\n      value = value.mul(2.54).div(96)\n    }\n    value = value.simplify()\n\n    if (prefix === '-o-') {\n      value = value.n + '/' + value.d\n    }\n    return this.prefixName(prefix, name) + colon + value\n  }\n\n  /**\n   * Remove prefixed queries\n   */\n  clean(rule) {\n    if (!this.bad) {\n      this.bad = []\n      for (let prefix of this.prefixes) {\n        this.bad.push(this.prefixName(prefix, 'min'))\n        this.bad.push(this.prefixName(prefix, 'max'))\n      }\n    }\n\n    rule.params = utils.editList(rule.params, queries => {\n      return queries.filter(query => this.bad.every(i => !query.includes(i)))\n    })\n  }\n\n  /**\n   * Add prefixed queries\n   */\n  process(rule) {\n    let parent = this.parentPrefix(rule)\n    let prefixes = parent ? [parent] : this.prefixes\n\n    rule.params = utils.editList(rule.params, (origin, prefixed) => {\n      for (let query of origin) {\n        if (\n          !query.includes('min-resolution') &&\n          !query.includes('max-resolution')\n        ) {\n          prefixed.push(query)\n          continue\n        }\n\n        for (let prefix of prefixes) {\n          let processed = query.replace(REGEXP, str => {\n            let parts = str.match(SPLIT)\n            return this.prefixQuery(\n              prefix,\n              parts[1],\n              parts[2],\n              parts[3],\n              parts[4]\n            )\n          })\n          prefixed.push(processed)\n        }\n        prefixed.push(query)\n      }\n\n      return utils.uniq(prefixed)\n    })\n  }\n}\n\nmodule.exports = Resolution\n","let { list } = require('postcss')\nlet parser = require('postcss-value-parser')\n\nlet Browsers = require('./browsers')\nlet vendor = require('./vendor')\n\nclass Transition {\n  constructor(prefixes) {\n    this.props = ['transition', 'transition-property']\n    this.prefixes = prefixes\n  }\n\n  /**\n   * Process transition and add prefixes for all necessary properties\n   */\n  add(decl, result) {\n    let prefix, prop\n    let add = this.prefixes.add[decl.prop]\n    let vendorPrefixes = this.ruleVendorPrefixes(decl)\n    let declPrefixes = vendorPrefixes || (add && add.prefixes) || []\n\n    let params = this.parse(decl.value)\n    let names = params.map(i => this.findProp(i))\n    let added = []\n\n    if (names.some(i => i[0] === '-')) {\n      return\n    }\n\n    for (let param of params) {\n      prop = this.findProp(param)\n      if (prop[0] === '-') continue\n\n      let prefixer = this.prefixes.add[prop]\n      if (!prefixer || !prefixer.prefixes) continue\n\n      for (prefix of prefixer.prefixes) {\n        if (vendorPrefixes && !vendorPrefixes.some(p => prefix.includes(p))) {\n          continue\n        }\n\n        let prefixed = this.prefixes.prefixed(prop, prefix)\n        if (prefixed !== '-ms-transform' && !names.includes(prefixed)) {\n          if (!this.disabled(prop, prefix)) {\n            added.push(this.clone(prop, prefixed, param))\n          }\n        }\n      }\n    }\n\n    params = params.concat(added)\n    let value = this.stringify(params)\n\n    let webkitClean = this.stringify(\n      this.cleanFromUnprefixed(params, '-webkit-')\n    )\n    if (declPrefixes.includes('-webkit-')) {\n      this.cloneBefore(decl, `-webkit-${decl.prop}`, webkitClean)\n    }\n    this.cloneBefore(decl, decl.prop, webkitClean)\n    if (declPrefixes.includes('-o-')) {\n      let operaClean = this.stringify(this.cleanFromUnprefixed(params, '-o-'))\n      this.cloneBefore(decl, `-o-${decl.prop}`, operaClean)\n    }\n\n    for (prefix of declPrefixes) {\n      if (prefix !== '-webkit-' && prefix !== '-o-') {\n        let prefixValue = this.stringify(\n          this.cleanOtherPrefixes(params, prefix)\n        )\n        this.cloneBefore(decl, prefix + decl.prop, prefixValue)\n      }\n    }\n\n    if (value !== decl.value && !this.already(decl, decl.prop, value)) {\n      this.checkForWarning(result, decl)\n      decl.cloneBefore()\n      decl.value = value\n    }\n  }\n\n  /**\n   * Find property name\n   */\n  findProp(param) {\n    let prop = param[0].value\n    if (/^\\d/.test(prop)) {\n      for (let [i, token] of param.entries()) {\n        if (i !== 0 && token.type === 'word') {\n          return token.value\n        }\n      }\n    }\n    return prop\n  }\n\n  /**\n   * Does we already have this declaration\n   */\n  already(decl, prop, value) {\n    return decl.parent.some(i => i.prop === prop && i.value === value)\n  }\n\n  /**\n   * Add declaration if it is not exist\n   */\n  cloneBefore(decl, prop, value) {\n    if (!this.already(decl, prop, value)) {\n      decl.cloneBefore({ prop, value })\n    }\n  }\n\n  /**\n   * Show transition-property warning\n   */\n  checkForWarning(result, decl) {\n    if (decl.prop !== 'transition-property') {\n      return\n    }\n\n    let isPrefixed = false\n    let hasAssociatedProp = false\n\n    decl.parent.each(i => {\n      if (i.type !== 'decl') {\n        return undefined\n      }\n      if (i.prop.indexOf('transition-') !== 0) {\n        return undefined\n      }\n      let values = list.comma(i.value)\n      // check if current Rule's transition-property comma separated value list needs prefixes\n      if (i.prop === 'transition-property') {\n        values.forEach(value => {\n          let lookup = this.prefixes.add[value]\n          if (lookup && lookup.prefixes && lookup.prefixes.length > 0) {\n            isPrefixed = true\n          }\n        })\n        return undefined\n      }\n      // check if another transition-* prop in current Rule has comma separated value list\n      hasAssociatedProp = hasAssociatedProp || values.length > 1\n      return false\n    })\n\n    if (isPrefixed && hasAssociatedProp) {\n      decl.warn(\n        result,\n        'Replace transition-property to transition, ' +\n          'because Autoprefixer could not support ' +\n          'any cases of transition-property ' +\n          'and other transition-*'\n      )\n    }\n  }\n\n  /**\n   * Process transition and remove all unnecessary properties\n   */\n  remove(decl) {\n    let params = this.parse(decl.value)\n    params = params.filter(i => {\n      let prop = this.prefixes.remove[this.findProp(i)]\n      return !prop || !prop.remove\n    })\n    let value = this.stringify(params)\n\n    if (decl.value === value) {\n      return\n    }\n\n    if (params.length === 0) {\n      decl.remove()\n      return\n    }\n\n    let double = decl.parent.some(i => {\n      return i.prop === decl.prop && i.value === value\n    })\n    let smaller = decl.parent.some(i => {\n      return i !== decl && i.prop === decl.prop && i.value.length > value.length\n    })\n\n    if (double || smaller) {\n      decl.remove()\n      return\n    }\n\n    decl.value = value\n  }\n\n  /**\n   * Parse properties list to array\n   */\n  parse(value) {\n    let ast = parser(value)\n    let result = []\n    let param = []\n    for (let node of ast.nodes) {\n      param.push(node)\n      if (node.type === 'div' && node.value === ',') {\n        result.push(param)\n        param = []\n      }\n    }\n    result.push(param)\n    return result.filter(i => i.length > 0)\n  }\n\n  /**\n   * Return properties string from array\n   */\n  stringify(params) {\n    if (params.length === 0) {\n      return ''\n    }\n    let nodes = []\n    for (let param of params) {\n      if (param[param.length - 1].type !== 'div') {\n        param.push(this.div(params))\n      }\n      nodes = nodes.concat(param)\n    }\n    if (nodes[0].type === 'div') {\n      nodes = nodes.slice(1)\n    }\n    if (nodes[nodes.length - 1].type === 'div') {\n      nodes = nodes.slice(0, +-2 + 1 || undefined)\n    }\n    return parser.stringify({ nodes })\n  }\n\n  /**\n   * Return new param array with different name\n   */\n  clone(origin, name, param) {\n    let result = []\n    let changed = false\n    for (let i of param) {\n      if (!changed && i.type === 'word' && i.value === origin) {\n        result.push({ type: 'word', value: name })\n        changed = true\n      } else {\n        result.push(i)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Find or create separator\n   */\n  div(params) {\n    for (let param of params) {\n      for (let node of param) {\n        if (node.type === 'div' && node.value === ',') {\n          return node\n        }\n      }\n    }\n    return { type: 'div', value: ',', after: ' ' }\n  }\n\n  cleanOtherPrefixes(params, prefix) {\n    return params.filter(param => {\n      let current = vendor.prefix(this.findProp(param))\n      return current === '' || current === prefix\n    })\n  }\n\n  /**\n   * Remove all non-webkit prefixes and unprefixed params if we have prefixed\n   */\n  cleanFromUnprefixed(params, prefix) {\n    let remove = params\n      .map(i => this.findProp(i))\n      .filter(i => i.slice(0, prefix.length) === prefix)\n      .map(i => this.prefixes.unprefixed(i))\n\n    let result = []\n    for (let param of params) {\n      let prop = this.findProp(param)\n      let p = vendor.prefix(prop)\n      if (!remove.includes(prop) && (p === prefix || p === '')) {\n        result.push(param)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Check property for disabled by option\n   */\n  disabled(prop, prefix) {\n    let other = ['order', 'justify-content', 'align-self', 'align-content']\n    if (prop.includes('flex') || other.includes(prop)) {\n      if (this.prefixes.options.flexbox === false) {\n        return true\n      }\n\n      if (this.prefixes.options.flexbox === 'no-2009') {\n        return prefix.includes('2009')\n      }\n    }\n    return undefined\n  }\n\n  /**\n   * Check if transition prop is inside vendor specific rule\n   */\n  ruleVendorPrefixes(decl) {\n    let { parent } = decl\n\n    if (parent.type !== 'rule') {\n      return false\n    } else if (!parent.selector.includes(':-')) {\n      return false\n    }\n\n    let selectors = Browsers.prefixes().filter(s =>\n      parent.selector.includes(':' + s)\n    )\n\n    return selectors.length > 0 ? selectors : false\n  }\n}\n\nmodule.exports = Transition\n","let parser = require('postcss-value-parser')\n\nlet Value = require('./value')\nlet insertAreas = require('./hacks/grid-utils').insertAreas\n\nconst OLD_LINEAR = /(^|[^-])linear-gradient\\(\\s*(top|left|right|bottom)/i\nconst OLD_RADIAL = /(^|[^-])radial-gradient\\(\\s*\\d+(\\w*|%)\\s+\\d+(\\w*|%)\\s*,/i\nconst IGNORE_NEXT = /(!\\s*)?autoprefixer:\\s*ignore\\s+next/i\nconst GRID_REGEX = /(!\\s*)?autoprefixer\\s*grid:\\s*(on|off|(no-)?autoplace)/i\n\nconst SIZES = [\n  'width',\n  'height',\n  'min-width',\n  'max-width',\n  'min-height',\n  'max-height',\n  'inline-size',\n  'min-inline-size',\n  'max-inline-size',\n  'block-size',\n  'min-block-size',\n  'max-block-size'\n]\n\nfunction hasGridTemplate(decl) {\n  return decl.parent.some(\n    i => i.prop === 'grid-template' || i.prop === 'grid-template-areas'\n  )\n}\n\nfunction hasRowsAndColumns(decl) {\n  let hasRows = decl.parent.some(i => i.prop === 'grid-template-rows')\n  let hasColumns = decl.parent.some(i => i.prop === 'grid-template-columns')\n  return hasRows && hasColumns\n}\n\nclass Processor {\n  constructor(prefixes) {\n    this.prefixes = prefixes\n  }\n\n  /**\n   * Add necessary prefixes\n   */\n  add(css, result) {\n    // At-rules\n    let resolution = this.prefixes.add['@resolution']\n    let keyframes = this.prefixes.add['@keyframes']\n    let viewport = this.prefixes.add['@viewport']\n    let supports = this.prefixes.add['@supports']\n\n    css.walkAtRules(rule => {\n      if (rule.name === 'keyframes') {\n        if (!this.disabled(rule, result)) {\n          return keyframes && keyframes.process(rule)\n        }\n      } else if (rule.name === 'viewport') {\n        if (!this.disabled(rule, result)) {\n          return viewport && viewport.process(rule)\n        }\n      } else if (rule.name === 'supports') {\n        if (\n          this.prefixes.options.supports !== false &&\n          !this.disabled(rule, result)\n        ) {\n          return supports.process(rule)\n        }\n      } else if (rule.name === 'media' && rule.params.includes('-resolution')) {\n        if (!this.disabled(rule, result)) {\n          return resolution && resolution.process(rule)\n        }\n      }\n\n      return undefined\n    })\n\n    // Selectors\n    css.walkRules(rule => {\n      if (this.disabled(rule, result)) return undefined\n\n      return this.prefixes.add.selectors.map(selector => {\n        return selector.process(rule, result)\n      })\n    })\n\n    function insideGrid(decl) {\n      return decl.parent.nodes.some(node => {\n        if (node.type !== 'decl') return false\n        let displayGrid =\n          node.prop === 'display' && /(inline-)?grid/.test(node.value)\n        let gridTemplate = node.prop.startsWith('grid-template')\n        let gridGap = /^grid-([A-z]+-)?gap/.test(node.prop)\n        return displayGrid || gridTemplate || gridGap\n      })\n    }\n    function insideFlex(decl) {\n      return decl.parent.some(node => {\n        return node.prop === 'display' && /(inline-)?flex/.test(node.value)\n      })\n    }\n\n    let gridPrefixes =\n      this.gridStatus(css, result) &&\n      this.prefixes.add['grid-area'] &&\n      this.prefixes.add['grid-area'].prefixes\n\n    css.walkDecls(decl => {\n      if (this.disabledDecl(decl, result)) return undefined\n\n      let parent = decl.parent\n      let prop = decl.prop\n      let value = decl.value\n\n      if (prop === 'color-adjust') {\n        if (parent.every(i => i.prop !== 'print-color-adjust')) {\n          result.warn(\n            'Replace color-adjust to print-color-adjust. ' +\n              'The color-adjust shorthand is currently deprecated.',\n            { node: decl }\n          )\n        }\n      } else if (prop === 'grid-row-span') {\n        result.warn(\n          'grid-row-span is not part of final Grid Layout. Use grid-row.',\n          { node: decl }\n        )\n        return undefined\n      } else if (prop === 'grid-column-span') {\n        result.warn(\n          'grid-column-span is not part of final Grid Layout. Use grid-column.',\n          { node: decl }\n        )\n        return undefined\n      } else if (prop === 'display' && value === 'box') {\n        result.warn(\n          'You should write display: flex by final spec ' +\n            'instead of display: box',\n          { node: decl }\n        )\n        return undefined\n      } else if (prop === 'text-emphasis-position') {\n        if (value === 'under' || value === 'over') {\n          result.warn(\n            'You should use 2 values for text-emphasis-position ' +\n              'For example, `under left` instead of just `under`.',\n            { node: decl }\n          )\n        }\n      } else if (\n        /^(align|justify|place)-(items|content)$/.test(prop) &&\n        insideFlex(decl)\n      ) {\n        if (value === 'start' || value === 'end') {\n          result.warn(\n            `${value} value has mixed support, consider using ` +\n              `flex-${value} instead`,\n            { node: decl }\n          )\n        }\n      } else if (prop === 'text-decoration-skip' && value === 'ink') {\n        result.warn(\n          'Replace text-decoration-skip: ink to ' +\n            'text-decoration-skip-ink: auto, because spec had been changed',\n          { node: decl }\n        )\n      } else {\n        if (gridPrefixes && this.gridStatus(decl, result)) {\n          if (decl.value === 'subgrid') {\n            result.warn('IE does not support subgrid', { node: decl })\n          }\n          if (/^(align|justify|place)-items$/.test(prop) && insideGrid(decl)) {\n            let fixed = prop.replace('-items', '-self')\n            result.warn(\n              `IE does not support ${prop} on grid containers. ` +\n                `Try using ${fixed} on child elements instead: ` +\n                `${decl.parent.selector} > * { ${fixed}: ${decl.value} }`,\n              { node: decl }\n            )\n          } else if (\n            /^(align|justify|place)-content$/.test(prop) &&\n            insideGrid(decl)\n          ) {\n            result.warn(`IE does not support ${decl.prop} on grid containers`, {\n              node: decl\n            })\n          } else if (prop === 'display' && decl.value === 'contents') {\n            result.warn(\n              'Please do not use display: contents; ' +\n                'if you have grid setting enabled',\n              { node: decl }\n            )\n            return undefined\n          } else if (decl.prop === 'grid-gap') {\n            let status = this.gridStatus(decl, result)\n            if (\n              status === 'autoplace' &&\n              !hasRowsAndColumns(decl) &&\n              !hasGridTemplate(decl)\n            ) {\n              result.warn(\n                'grid-gap only works if grid-template(-areas) is being ' +\n                  'used or both rows and columns have been declared ' +\n                  'and cells have not been manually ' +\n                  'placed inside the explicit grid',\n                { node: decl }\n              )\n            } else if (\n              (status === true || status === 'no-autoplace') &&\n              !hasGridTemplate(decl)\n            ) {\n              result.warn(\n                'grid-gap only works if grid-template(-areas) is being used',\n                { node: decl }\n              )\n            }\n          } else if (prop === 'grid-auto-columns') {\n            result.warn('grid-auto-columns is not supported by IE', {\n              node: decl\n            })\n            return undefined\n          } else if (prop === 'grid-auto-rows') {\n            result.warn('grid-auto-rows is not supported by IE', { node: decl })\n            return undefined\n          } else if (prop === 'grid-auto-flow') {\n            let hasRows = parent.some(i => i.prop === 'grid-template-rows')\n            let hasCols = parent.some(i => i.prop === 'grid-template-columns')\n\n            if (hasGridTemplate(decl)) {\n              result.warn('grid-auto-flow is not supported by IE', {\n                node: decl\n              })\n            } else if (value.includes('dense')) {\n              result.warn('grid-auto-flow: dense is not supported by IE', {\n                node: decl\n              })\n            } else if (!hasRows && !hasCols) {\n              result.warn(\n                'grid-auto-flow works only if grid-template-rows and ' +\n                  'grid-template-columns are present in the same rule',\n                { node: decl }\n              )\n            }\n            return undefined\n          } else if (value.includes('auto-fit')) {\n            result.warn('auto-fit value is not supported by IE', {\n              node: decl,\n              word: 'auto-fit'\n            })\n            return undefined\n          } else if (value.includes('auto-fill')) {\n            result.warn('auto-fill value is not supported by IE', {\n              node: decl,\n              word: 'auto-fill'\n            })\n            return undefined\n          } else if (prop.startsWith('grid-template') && value.includes('[')) {\n            result.warn(\n              'Autoprefixer currently does not support line names. ' +\n                'Try using grid-template-areas instead.',\n              { node: decl, word: '[' }\n            )\n          }\n        }\n        if (value.includes('radial-gradient')) {\n          if (OLD_RADIAL.test(decl.value)) {\n            result.warn(\n              'Gradient has outdated direction syntax. ' +\n                'New syntax is like `closest-side at 0 0` ' +\n                'instead of `0 0, closest-side`.',\n              { node: decl }\n            )\n          } else {\n            let ast = parser(value)\n\n            for (let i of ast.nodes) {\n              if (i.type === 'function' && i.value === 'radial-gradient') {\n                for (let word of i.nodes) {\n                  if (word.type === 'word') {\n                    if (word.value === 'cover') {\n                      result.warn(\n                        'Gradient has outdated direction syntax. ' +\n                          'Replace `cover` to `farthest-corner`.',\n                        { node: decl }\n                      )\n                    } else if (word.value === 'contain') {\n                      result.warn(\n                        'Gradient has outdated direction syntax. ' +\n                          'Replace `contain` to `closest-side`.',\n                        { node: decl }\n                      )\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (value.includes('linear-gradient')) {\n          if (OLD_LINEAR.test(value)) {\n            result.warn(\n              'Gradient has outdated direction syntax. ' +\n                'New syntax is like `to left` instead of `right`.',\n              { node: decl }\n            )\n          }\n        }\n      }\n\n      if (SIZES.includes(decl.prop)) {\n        if (!decl.value.includes('-fill-available')) {\n          if (decl.value.includes('fill-available')) {\n            result.warn(\n              'Replace fill-available to stretch, ' +\n                'because spec had been changed',\n              { node: decl }\n            )\n          } else if (decl.value.includes('fill')) {\n            let ast = parser(value)\n            if (ast.nodes.some(i => i.type === 'word' && i.value === 'fill')) {\n              result.warn(\n                'Replace fill to stretch, because spec had been changed',\n                { node: decl }\n              )\n            }\n          }\n        }\n      }\n\n      let prefixer\n\n      if (decl.prop === 'transition' || decl.prop === 'transition-property') {\n        // Transition\n        return this.prefixes.transition.add(decl, result)\n      } else if (decl.prop === 'align-self') {\n        // align-self flexbox or grid\n        let display = this.displayType(decl)\n        if (display !== 'grid' && this.prefixes.options.flexbox !== false) {\n          prefixer = this.prefixes.add['align-self']\n          if (prefixer && prefixer.prefixes) {\n            prefixer.process(decl)\n          }\n        }\n        if (this.gridStatus(decl, result) !== false) {\n          prefixer = this.prefixes.add['grid-row-align']\n          if (prefixer && prefixer.prefixes) {\n            return prefixer.process(decl, result)\n          }\n        }\n      } else if (decl.prop === 'justify-self') {\n        // justify-self flexbox or grid\n        if (this.gridStatus(decl, result) !== false) {\n          prefixer = this.prefixes.add['grid-column-align']\n          if (prefixer && prefixer.prefixes) {\n            return prefixer.process(decl, result)\n          }\n        }\n      } else if (decl.prop === 'place-self') {\n        prefixer = this.prefixes.add['place-self']\n        if (\n          prefixer &&\n          prefixer.prefixes &&\n          this.gridStatus(decl, result) !== false\n        ) {\n          return prefixer.process(decl, result)\n        }\n      } else {\n        // Properties\n        prefixer = this.prefixes.add[decl.prop]\n        if (prefixer && prefixer.prefixes) {\n          return prefixer.process(decl, result)\n        }\n      }\n\n      return undefined\n    })\n\n    // Insert grid-area prefixes. We need to be able to store the different\n    // rules as a data and hack API is not enough for this\n    if (this.gridStatus(css, result)) {\n      insertAreas(css, this.disabled)\n    }\n\n    // Values\n    return css.walkDecls(decl => {\n      if (this.disabledValue(decl, result)) return\n\n      let unprefixed = this.prefixes.unprefixed(decl.prop)\n      let list = this.prefixes.values('add', unprefixed)\n      if (Array.isArray(list)) {\n        for (let value of list) {\n          if (value.process) value.process(decl, result)\n        }\n      }\n      Value.save(this.prefixes, decl)\n    })\n  }\n\n  /**\n   * Remove unnecessary pefixes\n   */\n  remove(css, result) {\n    // At-rules\n    let resolution = this.prefixes.remove['@resolution']\n\n    css.walkAtRules((rule, i) => {\n      if (this.prefixes.remove[`@${rule.name}`]) {\n        if (!this.disabled(rule, result)) {\n          rule.parent.removeChild(i)\n        }\n      } else if (\n        rule.name === 'media' &&\n        rule.params.includes('-resolution') &&\n        resolution\n      ) {\n        resolution.clean(rule)\n      }\n    })\n\n    // Selectors\n    for (let checker of this.prefixes.remove.selectors) {\n      css.walkRules((rule, i) => {\n        if (checker.check(rule)) {\n          if (!this.disabled(rule, result)) {\n            rule.parent.removeChild(i)\n          }\n        }\n      })\n    }\n\n    return css.walkDecls((decl, i) => {\n      if (this.disabled(decl, result)) return\n\n      let rule = decl.parent\n      let unprefixed = this.prefixes.unprefixed(decl.prop)\n\n      // Transition\n      if (decl.prop === 'transition' || decl.prop === 'transition-property') {\n        this.prefixes.transition.remove(decl)\n      }\n\n      // Properties\n      if (\n        this.prefixes.remove[decl.prop] &&\n        this.prefixes.remove[decl.prop].remove\n      ) {\n        let notHack = this.prefixes.group(decl).down(other => {\n          return this.prefixes.normalize(other.prop) === unprefixed\n        })\n\n        if (unprefixed === 'flex-flow') {\n          notHack = true\n        }\n\n        if (decl.prop === '-webkit-box-orient') {\n          let hacks = { 'flex-direction': true, 'flex-flow': true }\n          if (!decl.parent.some(j => hacks[j.prop])) return\n        }\n\n        if (notHack && !this.withHackValue(decl)) {\n          if (decl.raw('before').includes('\\n')) {\n            this.reduceSpaces(decl)\n          }\n          rule.removeChild(i)\n          return\n        }\n      }\n\n      // Values\n      for (let checker of this.prefixes.values('remove', unprefixed)) {\n        if (!checker.check) continue\n        if (!checker.check(decl.value)) continue\n\n        unprefixed = checker.unprefixed\n        let notHack = this.prefixes.group(decl).down(other => {\n          return other.value.includes(unprefixed)\n        })\n\n        if (notHack) {\n          rule.removeChild(i)\n          return\n        }\n      }\n    })\n  }\n\n  /**\n   * Some rare old values, which is not in standard\n   */\n  withHackValue(decl) {\n    return decl.prop === '-webkit-background-clip' && decl.value === 'text'\n  }\n\n  /**\n   * Check for grid/flexbox options.\n   */\n  disabledValue(node, result) {\n    if (this.gridStatus(node, result) === false && node.type === 'decl') {\n      if (node.prop === 'display' && node.value.includes('grid')) {\n        return true\n      }\n    }\n    if (this.prefixes.options.flexbox === false && node.type === 'decl') {\n      if (node.prop === 'display' && node.value.includes('flex')) {\n        return true\n      }\n    }\n    if (node.type === 'decl' && node.prop === 'content') {\n      return true\n    }\n\n    return this.disabled(node, result)\n  }\n\n  /**\n   * Check for grid/flexbox options.\n   */\n  disabledDecl(node, result) {\n    if (this.gridStatus(node, result) === false && node.type === 'decl') {\n      if (node.prop.includes('grid') || node.prop === 'justify-items') {\n        return true\n      }\n    }\n    if (this.prefixes.options.flexbox === false && node.type === 'decl') {\n      let other = ['order', 'justify-content', 'align-items', 'align-content']\n      if (node.prop.includes('flex') || other.includes(node.prop)) {\n        return true\n      }\n    }\n\n    return this.disabled(node, result)\n  }\n\n  /**\n   * Check for control comment and global options\n   */\n  disabled(node, result) {\n    if (!node) return false\n\n    if (node._autoprefixerDisabled !== undefined) {\n      return node._autoprefixerDisabled\n    }\n\n    if (node.parent) {\n      let p = node.prev()\n      if (p && p.type === 'comment' && IGNORE_NEXT.test(p.text)) {\n        node._autoprefixerDisabled = true\n        node._autoprefixerSelfDisabled = true\n        return true\n      }\n    }\n\n    let value = null\n    if (node.nodes) {\n      let status\n      node.each(i => {\n        if (i.type !== 'comment') return\n        if (/(!\\s*)?autoprefixer:\\s*(off|on)/i.test(i.text)) {\n          if (typeof status !== 'undefined') {\n            result.warn(\n              'Second Autoprefixer control comment ' +\n                'was ignored. Autoprefixer applies control ' +\n                'comment to whole block, not to next rules.',\n              { node: i }\n            )\n          } else {\n            status = /on/i.test(i.text)\n          }\n        }\n      })\n\n      if (status !== undefined) {\n        value = !status\n      }\n    }\n    if (!node.nodes || value === null) {\n      if (node.parent) {\n        let isParentDisabled = this.disabled(node.parent, result)\n        if (node.parent._autoprefixerSelfDisabled === true) {\n          value = false\n        } else {\n          value = isParentDisabled\n        }\n      } else {\n        value = false\n      }\n    }\n    node._autoprefixerDisabled = value\n    return value\n  }\n\n  /**\n   * Normalize spaces in cascade declaration group\n   */\n  reduceSpaces(decl) {\n    let stop = false\n    this.prefixes.group(decl).up(() => {\n      stop = true\n      return true\n    })\n    if (stop) {\n      return\n    }\n\n    let parts = decl.raw('before').split('\\n')\n    let prevMin = parts[parts.length - 1].length\n    let diff = false\n\n    this.prefixes.group(decl).down(other => {\n      parts = other.raw('before').split('\\n')\n      let last = parts.length - 1\n\n      if (parts[last].length > prevMin) {\n        if (diff === false) {\n          diff = parts[last].length - prevMin\n        }\n\n        parts[last] = parts[last].slice(0, -diff)\n        other.raws.before = parts.join('\\n')\n      }\n    })\n  }\n\n  /**\n   * Is it flebox or grid rule\n   */\n  displayType(decl) {\n    for (let i of decl.parent.nodes) {\n      if (i.prop !== 'display') {\n        continue\n      }\n\n      if (i.value.includes('flex')) {\n        return 'flex'\n      }\n\n      if (i.value.includes('grid')) {\n        return 'grid'\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Set grid option via control comment\n   */\n  gridStatus(node, result) {\n    if (!node) return false\n\n    if (node._autoprefixerGridStatus !== undefined) {\n      return node._autoprefixerGridStatus\n    }\n\n    let value = null\n    if (node.nodes) {\n      let status\n      node.each(i => {\n        if (i.type !== 'comment') return\n        if (GRID_REGEX.test(i.text)) {\n          let hasAutoplace = /:\\s*autoplace/i.test(i.text)\n          let noAutoplace = /no-autoplace/i.test(i.text)\n          if (typeof status !== 'undefined') {\n            result.warn(\n              'Second Autoprefixer grid control comment was ' +\n                'ignored. Autoprefixer applies control comments to the whole ' +\n                'block, not to the next rules.',\n              { node: i }\n            )\n          } else if (hasAutoplace) {\n            status = 'autoplace'\n          } else if (noAutoplace) {\n            status = true\n          } else {\n            status = /on/i.test(i.text)\n          }\n        }\n      })\n\n      if (status !== undefined) {\n        value = status\n      }\n    }\n\n    if (node.type === 'atrule' && node.name === 'supports') {\n      let params = node.params\n      if (params.includes('grid') && params.includes('auto')) {\n        value = false\n      }\n    }\n\n    if (!node.nodes || value === null) {\n      if (node.parent) {\n        let isParentGrid = this.gridStatus(node.parent, result)\n        if (node.parent._autoprefixerSelfDisabled === true) {\n          value = false\n        } else {\n          value = isParentGrid\n        }\n      } else if (typeof this.prefixes.options.grid !== 'undefined') {\n        value = this.prefixes.options.grid\n      } else if (typeof process.env.AUTOPREFIXER_GRID !== 'undefined') {\n        if (process.env.AUTOPREFIXER_GRID === 'autoplace') {\n          value = 'autoplace'\n        } else {\n          value = true\n        }\n      } else {\n        value = false\n      }\n    }\n\n    node._autoprefixerGridStatus = value\n    return value\n  }\n}\n\nmodule.exports = Processor\n","let Prefixer = require('./prefixer')\nlet OldValue = require('./old-value')\nlet vendor = require('./vendor')\nlet utils = require('./utils')\n\nclass Value extends Prefixer {\n  /**\n   * Clone decl for each prefixed values\n   */\n  static save(prefixes, decl) {\n    let prop = decl.prop\n    let result = []\n\n    for (let prefix in decl._autoprefixerValues) {\n      let value = decl._autoprefixerValues[prefix]\n\n      if (value === decl.value) {\n        continue\n      }\n\n      let item\n      let propPrefix = vendor.prefix(prop)\n\n      if (propPrefix === '-pie-') {\n        continue\n      }\n\n      if (propPrefix === prefix) {\n        item = decl.value = value\n        result.push(item)\n        continue\n      }\n\n      let prefixed = prefixes.prefixed(prop, prefix)\n      let rule = decl.parent\n\n      if (!rule.every(i => i.prop !== prefixed)) {\n        result.push(item)\n        continue\n      }\n\n      let trimmed = value.replace(/\\s+/, ' ')\n      let already = rule.some(\n        i => i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed\n      )\n\n      if (already) {\n        result.push(item)\n        continue\n      }\n\n      let cloned = this.clone(decl, { value })\n      item = decl.parent.insertBefore(decl, cloned)\n\n      result.push(item)\n    }\n\n    return result\n  }\n\n  /**\n   * Is declaration need to be prefixed\n   */\n  check(decl) {\n    let value = decl.value\n    if (!value.includes(this.name)) {\n      return false\n    }\n\n    return !!value.match(this.regexp())\n  }\n\n  /**\n   * Lazy regexp loading\n   */\n  regexp() {\n    return this.regexpCache || (this.regexpCache = utils.regexp(this.name))\n  }\n\n  /**\n   * Add prefix to values in string\n   */\n  replace(string, prefix) {\n    return string.replace(this.regexp(), `$1${prefix}$2`)\n  }\n\n  /**\n   * Get value with comments if it was not changed\n   */\n  value(decl) {\n    if (decl.raws.value && decl.raws.value.value === decl.value) {\n      return decl.raws.value.raw\n    } else {\n      return decl.value\n    }\n  }\n\n  /**\n   * Save values with next prefixed token\n   */\n  add(decl, prefix) {\n    if (!decl._autoprefixerValues) {\n      decl._autoprefixerValues = {}\n    }\n    let value = decl._autoprefixerValues[prefix] || this.value(decl)\n\n    let before\n    do {\n      before = value\n      value = this.replace(value, prefix)\n      if (value === false) return\n    } while (value !== before)\n\n    decl._autoprefixerValues[prefix] = value\n  }\n\n  /**\n   * Return function to fast find prefixed value\n   */\n  old(prefix) {\n    return new OldValue(this.name, prefix + this.name)\n  }\n}\n\nmodule.exports = Value\n","let utils = require('./utils')\n\nclass OldValue {\n  constructor(unprefixed, prefixed, string, regexp) {\n    this.unprefixed = unprefixed\n    this.prefixed = prefixed\n    this.string = string || prefixed\n    this.regexp = regexp || utils.regexp(prefixed)\n  }\n\n  /**\n   * Check, that value contain old value\n   */\n  check(value) {\n    if (value.includes(this.string)) {\n      return !!value.match(this.regexp)\n    }\n    return false\n  }\n}\n\nmodule.exports = OldValue\n","let parser = require('postcss-value-parser')\nlet list = require('postcss').list\n\nlet uniq = require('../utils').uniq\nlet escapeRegexp = require('../utils').escapeRegexp\nlet splitSelector = require('../utils').splitSelector\n\nfunction convert(value) {\n  if (\n    value &&\n    value.length === 2 &&\n    value[0] === 'span' &&\n    parseInt(value[1], 10) > 0\n  ) {\n    return [false, parseInt(value[1], 10)]\n  }\n\n  if (value && value.length === 1 && parseInt(value[0], 10) > 0) {\n    return [parseInt(value[0], 10), false]\n  }\n\n  return [false, false]\n}\n\nexports.translate = translate\n\nfunction translate(values, startIndex, endIndex) {\n  let startValue = values[startIndex]\n  let endValue = values[endIndex]\n\n  if (!startValue) {\n    return [false, false]\n  }\n\n  let [start, spanStart] = convert(startValue)\n  let [end, spanEnd] = convert(endValue)\n\n  if (start && !endValue) {\n    return [start, false]\n  }\n\n  if (spanStart && end) {\n    return [end - spanStart, spanStart]\n  }\n\n  if (start && spanEnd) {\n    return [start, spanEnd]\n  }\n\n  if (start && end) {\n    return [start, end - start]\n  }\n\n  return [false, false]\n}\n\nexports.parse = parse\n\nfunction parse(decl) {\n  let node = parser(decl.value)\n\n  let values = []\n  let current = 0\n  values[current] = []\n\n  for (let i of node.nodes) {\n    if (i.type === 'div') {\n      current += 1\n      values[current] = []\n    } else if (i.type === 'word') {\n      values[current].push(i.value)\n    }\n  }\n\n  return values\n}\n\nexports.insertDecl = insertDecl\n\nfunction insertDecl(decl, prop, value) {\n  if (value && !decl.parent.some(i => i.prop === `-ms-${prop}`)) {\n    decl.cloneBefore({\n      prop: `-ms-${prop}`,\n      value: value.toString()\n    })\n  }\n}\n\n// Track transforms\n\nexports.prefixTrackProp = prefixTrackProp\n\nfunction prefixTrackProp({ prop, prefix }) {\n  return prefix + prop.replace('template-', '')\n}\n\nfunction transformRepeat({ nodes }, { gap }) {\n  let { count, size } = nodes.reduce(\n    (result, node) => {\n      if (node.type === 'div' && node.value === ',') {\n        result.key = 'size'\n      } else {\n        result[result.key].push(parser.stringify(node))\n      }\n      return result\n    },\n    {\n      key: 'count',\n      size: [],\n      count: []\n    }\n  )\n\n  // insert gap values\n  if (gap) {\n    size = size.filter(i => i.trim())\n    let val = []\n    for (let i = 1; i <= count; i++) {\n      size.forEach((item, index) => {\n        if (index > 0 || i > 1) {\n          val.push(gap)\n        }\n        val.push(item)\n      })\n    }\n\n    return val.join(' ')\n  }\n\n  return `(${size.join('')})[${count.join('')}]`\n}\n\nexports.prefixTrackValue = prefixTrackValue\n\nfunction prefixTrackValue({ value, gap }) {\n  let result = parser(value).nodes.reduce((nodes, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      return nodes.concat({\n        type: 'word',\n        value: transformRepeat(node, { gap })\n      })\n    }\n    if (gap && node.type === 'space') {\n      return nodes.concat(\n        {\n          type: 'space',\n          value: ' '\n        },\n        {\n          type: 'word',\n          value: gap\n        },\n        node\n      )\n    }\n    return nodes.concat(node)\n  }, [])\n\n  return parser.stringify(result)\n}\n\n// Parse grid-template-areas\n\nlet DOTS = /^\\.+$/\n\nfunction track(start, end) {\n  return { start, end, span: end - start }\n}\n\nfunction getColumns(line) {\n  return line.trim().split(/\\s+/g)\n}\n\nexports.parseGridAreas = parseGridAreas\n\nfunction parseGridAreas({ rows, gap }) {\n  return rows.reduce((areas, line, rowIndex) => {\n    if (gap.row) rowIndex *= 2\n\n    if (line.trim() === '') return areas\n\n    getColumns(line).forEach((area, columnIndex) => {\n      if (DOTS.test(area)) return\n\n      if (gap.column) columnIndex *= 2\n\n      if (typeof areas[area] === 'undefined') {\n        areas[area] = {\n          column: track(columnIndex + 1, columnIndex + 2),\n          row: track(rowIndex + 1, rowIndex + 2)\n        }\n      } else {\n        let { column, row } = areas[area]\n\n        column.start = Math.min(column.start, columnIndex + 1)\n        column.end = Math.max(column.end, columnIndex + 2)\n        column.span = column.end - column.start\n\n        row.start = Math.min(row.start, rowIndex + 1)\n        row.end = Math.max(row.end, rowIndex + 2)\n        row.span = row.end - row.start\n      }\n    })\n\n    return areas\n  }, {})\n}\n\n// Parse grid-template\n\nfunction testTrack(node) {\n  return node.type === 'word' && /^\\[.+]$/.test(node.value)\n}\n\nfunction verifyRowSize(result) {\n  if (result.areas.length > result.rows.length) {\n    result.rows.push('auto')\n  }\n  return result\n}\n\nexports.parseTemplate = parseTemplate\n\nfunction parseTemplate({ decl, gap }) {\n  let gridTemplate = parser(decl.value).nodes.reduce(\n    (result, node) => {\n      let { type, value } = node\n\n      if (testTrack(node) || type === 'space') return result\n\n      // area\n      if (type === 'string') {\n        result = verifyRowSize(result)\n        result.areas.push(value)\n      }\n\n      // values and function\n      if (type === 'word' || type === 'function') {\n        result[result.key].push(parser.stringify(node))\n      }\n\n      // divider(/)\n      if (type === 'div' && value === '/') {\n        result.key = 'columns'\n        result = verifyRowSize(result)\n      }\n\n      return result\n    },\n    {\n      key: 'rows',\n      columns: [],\n      rows: [],\n      areas: []\n    }\n  )\n\n  return {\n    areas: parseGridAreas({\n      rows: gridTemplate.areas,\n      gap\n    }),\n    columns: prefixTrackValue({\n      value: gridTemplate.columns.join(' '),\n      gap: gap.column\n    }),\n    rows: prefixTrackValue({\n      value: gridTemplate.rows.join(' '),\n      gap: gap.row\n    })\n  }\n}\n\n// Insert parsed grid areas\n\n/**\n * Get an array of -ms- prefixed props and values\n * @param  {Object} [area] area object with column and row data\n * @param  {Boolean} [addRowSpan] should we add grid-column-row value?\n * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?\n * @return {Array<Object>}\n */\nfunction getMSDecls(area, addRowSpan = false, addColumnSpan = false) {\n  let result = [\n    {\n      prop: '-ms-grid-row',\n      value: String(area.row.start)\n    }\n  ]\n  if (area.row.span > 1 || addRowSpan) {\n    result.push({\n      prop: '-ms-grid-row-span',\n      value: String(area.row.span)\n    })\n  }\n  result.push({\n    prop: '-ms-grid-column',\n    value: String(area.column.start)\n  })\n  if (area.column.span > 1 || addColumnSpan) {\n    result.push({\n      prop: '-ms-grid-column-span',\n      value: String(area.column.span)\n    })\n  }\n  return result\n}\n\nfunction getParentMedia(parent) {\n  if (parent.type === 'atrule' && parent.name === 'media') {\n    return parent\n  }\n  if (!parent.parent) {\n    return false\n  }\n  return getParentMedia(parent.parent)\n}\n\n/**\n * change selectors for rules with duplicate grid-areas.\n * @param  {Array<Rule>} rules\n * @param  {Array<String>} templateSelectors\n * @return {Array<Rule>} rules with changed selectors\n */\nfunction changeDuplicateAreaSelectors(ruleSelectors, templateSelectors) {\n  ruleSelectors = ruleSelectors.map(selector => {\n    let selectorBySpace = list.space(selector)\n    let selectorByComma = list.comma(selector)\n\n    if (selectorBySpace.length > selectorByComma.length) {\n      selector = selectorBySpace.slice(-1).join('')\n    }\n    return selector\n  })\n\n  return ruleSelectors.map(ruleSelector => {\n    let newSelector = templateSelectors.map((tplSelector, index) => {\n      let space = index === 0 ? '' : ' '\n      return `${space}${tplSelector} > ${ruleSelector}`\n    })\n\n    return newSelector\n  })\n}\n\n/**\n * check if selector of rules are equal\n * @param  {Rule} ruleA\n * @param  {Rule} ruleB\n * @return {Boolean}\n */\nfunction selectorsEqual(ruleA, ruleB) {\n  return ruleA.selectors.some(sel => {\n    return ruleB.selectors.includes(sel)\n  })\n}\n\n/**\n * Parse data from all grid-template(-areas) declarations\n * @param  {Root} css css root\n * @return {Object} parsed data\n */\nfunction parseGridTemplatesData(css) {\n  let parsed = []\n\n  // we walk through every grid-template(-areas) declaration and store\n  // data with the same area names inside the item\n  css.walkDecls(/grid-template(-areas)?$/, d => {\n    let rule = d.parent\n    let media = getParentMedia(rule)\n    let gap = getGridGap(d)\n    let inheritedGap = inheritGridGap(d, gap)\n    let { areas } = parseTemplate({ decl: d, gap: inheritedGap || gap })\n    let areaNames = Object.keys(areas)\n\n    // skip node if it doesn't have areas\n    if (areaNames.length === 0) {\n      return true\n    }\n\n    // check parsed array for item that include the same area names\n    // return index of that item\n    let index = parsed.reduce((acc, { allAreas }, idx) => {\n      let hasAreas = allAreas && areaNames.some(area => allAreas.includes(area))\n      return hasAreas ? idx : acc\n    }, null)\n\n    if (index !== null) {\n      // index is found, add the grid-template data to that item\n      let { allAreas, rules } = parsed[index]\n\n      // check if rule has no duplicate area names\n      let hasNoDuplicates = rules.some(r => {\n        return r.hasDuplicates === false && selectorsEqual(r, rule)\n      })\n\n      let duplicatesFound = false\n\n      // check need to gather all duplicate area names\n      let duplicateAreaNames = rules.reduce((acc, r) => {\n        if (!r.params && selectorsEqual(r, rule)) {\n          duplicatesFound = true\n          return r.duplicateAreaNames\n        }\n        if (!duplicatesFound) {\n          areaNames.forEach(name => {\n            if (r.areas[name]) {\n              acc.push(name)\n            }\n          })\n        }\n        return uniq(acc)\n      }, [])\n\n      // update grid-row/column-span values for areas with duplicate\n      // area names. @see #1084 and #1146\n      rules.forEach(r => {\n        areaNames.forEach(name => {\n          let area = r.areas[name]\n          if (area && area.row.span !== areas[name].row.span) {\n            areas[name].row.updateSpan = true\n          }\n\n          if (area && area.column.span !== areas[name].column.span) {\n            areas[name].column.updateSpan = true\n          }\n        })\n      })\n\n      parsed[index].allAreas = uniq([...allAreas, ...areaNames])\n      parsed[index].rules.push({\n        hasDuplicates: !hasNoDuplicates,\n        params: media.params,\n        selectors: rule.selectors,\n        node: rule,\n        duplicateAreaNames,\n        areas\n      })\n    } else {\n      // index is NOT found, push the new item to the parsed array\n      parsed.push({\n        allAreas: areaNames,\n        areasCount: 0,\n        rules: [\n          {\n            hasDuplicates: false,\n            duplicateRules: [],\n            params: media.params,\n            selectors: rule.selectors,\n            node: rule,\n            duplicateAreaNames: [],\n            areas\n          }\n        ]\n      })\n    }\n\n    return undefined\n  })\n\n  return parsed\n}\n\n/**\n * insert prefixed grid-area declarations\n * @param  {Root}  css css root\n * @param  {Function} isDisabled check if the rule is disabled\n * @return {void}\n */\nexports.insertAreas = insertAreas\n\nfunction insertAreas(css, isDisabled) {\n  // parse grid-template declarations\n  let gridTemplatesData = parseGridTemplatesData(css)\n\n  // return undefined if no declarations found\n  if (gridTemplatesData.length === 0) {\n    return undefined\n  }\n\n  // we need to store the rules that we will insert later\n  let rulesToInsert = {}\n\n  css.walkDecls('grid-area', gridArea => {\n    let gridAreaRule = gridArea.parent\n    let hasPrefixedRow = gridAreaRule.first.prop === '-ms-grid-row'\n    let gridAreaMedia = getParentMedia(gridAreaRule)\n\n    if (isDisabled(gridArea)) {\n      return undefined\n    }\n\n    let gridAreaRuleIndex = css.index(gridAreaMedia || gridAreaRule)\n\n    let value = gridArea.value\n    // found the data that matches grid-area identifier\n    let data = gridTemplatesData.filter(d => d.allAreas.includes(value))[0]\n\n    if (!data) {\n      return true\n    }\n\n    let lastArea = data.allAreas[data.allAreas.length - 1]\n    let selectorBySpace = list.space(gridAreaRule.selector)\n    let selectorByComma = list.comma(gridAreaRule.selector)\n    let selectorIsComplex =\n      selectorBySpace.length > 1 &&\n      selectorBySpace.length > selectorByComma.length\n\n    // prevent doubling of prefixes\n    if (hasPrefixedRow) {\n      return false\n    }\n\n    // create the empty object with the key as the last area name\n    // e.g if we have templates with \"a b c\" values, \"c\" will be the last area\n    if (!rulesToInsert[lastArea]) {\n      rulesToInsert[lastArea] = {}\n    }\n\n    let lastRuleIsSet = false\n\n    // walk through every grid-template rule data\n    for (let rule of data.rules) {\n      let area = rule.areas[value]\n      let hasDuplicateName = rule.duplicateAreaNames.includes(value)\n\n      // if we can't find the area name, update lastRule and continue\n      if (!area) {\n        let lastRule = rulesToInsert[lastArea].lastRule\n        let lastRuleIndex\n        if (lastRule) {\n          lastRuleIndex = css.index(lastRule)\n        } else {\n          /* c8 ignore next 2 */\n          lastRuleIndex = -1\n        }\n\n        if (gridAreaRuleIndex > lastRuleIndex) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule\n        }\n        continue\n      }\n\n      // for grid-templates inside media rule we need to create empty\n      // array to push prefixed grid-area rules later\n      if (rule.params && !rulesToInsert[lastArea][rule.params]) {\n        rulesToInsert[lastArea][rule.params] = []\n      }\n\n      if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {\n        // grid-template has no duplicates and not inside media rule\n\n        getMSDecls(area, false, false)\n          .reverse()\n          .forEach(i =>\n            gridAreaRule.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n\n        rulesToInsert[lastArea].lastRule = gridAreaRule\n        lastRuleIsSet = true\n      } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {\n        // grid-template has duplicates and not inside media rule\n        let cloned = gridAreaRule.clone()\n        cloned.removeAll()\n\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan)\n          .reverse()\n          .forEach(i =>\n            cloned.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n\n        cloned.selectors = changeDuplicateAreaSelectors(\n          cloned.selectors,\n          rule.selectors\n        )\n\n        if (rulesToInsert[lastArea].lastRule) {\n          rulesToInsert[lastArea].lastRule.after(cloned)\n        }\n        rulesToInsert[lastArea].lastRule = cloned\n        lastRuleIsSet = true\n      } else if (\n        rule.hasDuplicates &&\n        !rule.params &&\n        selectorIsComplex &&\n        gridAreaRule.selector.includes(rule.selectors[0])\n      ) {\n        // grid-template has duplicates and not inside media rule\n        // and the selector is complex\n        gridAreaRule.walkDecls(/-ms-grid-(row|column)/, d => d.remove())\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan)\n          .reverse()\n          .forEach(i =>\n            gridAreaRule.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n      } else if (rule.params) {\n        // grid-template is inside media rule\n        // if we're inside media rule, we need to store prefixed rules\n        // inside rulesToInsert object to be able to preserve the order of media\n        // rules and merge them easily\n        let cloned = gridAreaRule.clone()\n        cloned.removeAll()\n\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan)\n          .reverse()\n          .forEach(i =>\n            cloned.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n\n        if (rule.hasDuplicates && hasDuplicateName) {\n          cloned.selectors = changeDuplicateAreaSelectors(\n            cloned.selectors,\n            rule.selectors\n          )\n        }\n\n        cloned.raws = rule.node.raws\n\n        if (css.index(rule.node.parent) > gridAreaRuleIndex) {\n          // append the prefixed rules right inside media rule\n          // with grid-template\n          rule.node.parent.append(cloned)\n        } else {\n          // store the rule to insert later\n          rulesToInsert[lastArea][rule.params].push(cloned)\n        }\n\n        // set new rule as last rule ONLY if we didn't set lastRule for\n        // this grid-area before\n        if (!lastRuleIsSet) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule\n        }\n      }\n    }\n\n    return undefined\n  })\n\n  // append stored rules inside the media rules\n  Object.keys(rulesToInsert).forEach(area => {\n    let data = rulesToInsert[area]\n    let lastRule = data.lastRule\n    Object.keys(data)\n      .reverse()\n      .filter(p => p !== 'lastRule')\n      .forEach(params => {\n        if (data[params].length > 0 && lastRule) {\n          lastRule.after({ name: 'media', params })\n          lastRule.next().append(data[params])\n        }\n      })\n  })\n\n  return undefined\n}\n\n/**\n * Warn user if grid area identifiers are not found\n * @param  {Object} areas\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nexports.warnMissedAreas = warnMissedAreas\n\nfunction warnMissedAreas(areas, decl, result) {\n  let missed = Object.keys(areas)\n\n  decl.root().walkDecls('grid-area', gridArea => {\n    missed = missed.filter(e => e !== gridArea.value)\n  })\n\n  if (missed.length > 0) {\n    decl.warn(result, 'Can not find grid areas: ' + missed.join(', '))\n  }\n\n  return undefined\n}\n\n/**\n * compare selectors with grid-area rule and grid-template rule\n * show warning if grid-template selector is not found\n * (this function used for grid-area rule)\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nexports.warnTemplateSelectorNotFound = warnTemplateSelectorNotFound\n\nfunction warnTemplateSelectorNotFound(decl, result) {\n  let rule = decl.parent\n  let root = decl.root()\n  let duplicatesFound = false\n\n  // slice selector array. Remove the last part (for comparison)\n  let slicedSelectorArr = list\n    .space(rule.selector)\n    .filter(str => str !== '>')\n    .slice(0, -1)\n\n  // we need to compare only if selector is complex.\n  // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex\n  if (slicedSelectorArr.length > 0) {\n    let gridTemplateFound = false\n    let foundAreaSelector = null\n\n    root.walkDecls(/grid-template(-areas)?$/, d => {\n      let parent = d.parent\n      let templateSelectors = parent.selectors\n\n      let { areas } = parseTemplate({ decl: d, gap: getGridGap(d) })\n      let hasArea = areas[decl.value]\n\n      // find the the matching selectors\n      for (let tplSelector of templateSelectors) {\n        if (gridTemplateFound) {\n          break\n        }\n        let tplSelectorArr = list.space(tplSelector).filter(str => str !== '>')\n\n        gridTemplateFound = tplSelectorArr.every(\n          (item, idx) => item === slicedSelectorArr[idx]\n        )\n      }\n\n      if (gridTemplateFound || !hasArea) {\n        return true\n      }\n\n      if (!foundAreaSelector) {\n        foundAreaSelector = parent.selector\n      }\n\n      // if we found the duplicate area with different selector\n      if (foundAreaSelector && foundAreaSelector !== parent.selector) {\n        duplicatesFound = true\n      }\n\n      return undefined\n    })\n\n    // warn user if we didn't find template\n    if (!gridTemplateFound && duplicatesFound) {\n      decl.warn(\n        result,\n        'Autoprefixer cannot find a grid-template ' +\n          `containing the duplicate grid-area \"${decl.value}\" ` +\n          `with full selector matching: ${slicedSelectorArr.join(' ')}`\n      )\n    }\n  }\n}\n\n/**\n * warn user if both grid-area and grid-(row|column)\n * declarations are present in the same rule\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nexports.warnIfGridRowColumnExists = warnIfGridRowColumnExists\n\nfunction warnIfGridRowColumnExists(decl, result) {\n  let rule = decl.parent\n  let decls = []\n  rule.walkDecls(/^grid-(row|column)/, d => {\n    if (\n      !d.prop.endsWith('-end') &&\n      !d.value.startsWith('span') &&\n      !d.prop.endsWith('-gap')\n    ) {\n      decls.push(d)\n    }\n  })\n  if (decls.length > 0) {\n    decls.forEach(d => {\n      d.warn(\n        result,\n        'You already have a grid-area declaration present in the rule. ' +\n          `You should use either grid-area or ${d.prop}, not both`\n      )\n    })\n  }\n\n  return undefined\n}\n\n// Gap utils\n\nexports.getGridGap = getGridGap\n\nfunction getGridGap(decl) {\n  let gap = {}\n\n  // try to find gap\n  let testGap = /^(grid-)?((row|column)-)?gap$/\n  decl.parent.walkDecls(testGap, ({ prop, value }) => {\n    if (/^(grid-)?gap$/.test(prop)) {\n      let [row, , column] = parser(value).nodes\n\n      gap.row = row && parser.stringify(row)\n      gap.column = column ? parser.stringify(column) : gap.row\n    }\n    if (/^(grid-)?row-gap$/.test(prop)) gap.row = value\n    if (/^(grid-)?column-gap$/.test(prop)) gap.column = value\n  })\n\n  return gap\n}\n\n/**\n * parse media parameters (for example 'min-width: 500px')\n * @param  {String} params parameter to parse\n * @return {}\n */\nfunction parseMediaParams(params) {\n  if (!params) {\n    return []\n  }\n  let parsed = parser(params)\n  let prop\n  let value\n\n  parsed.walk(node => {\n    if (node.type === 'word' && /min|max/g.test(node.value)) {\n      prop = node.value\n    } else if (node.value.includes('px')) {\n      value = parseInt(node.value.replace(/\\D/g, ''))\n    }\n  })\n\n  return [prop, value]\n}\n\n/**\n * Compare the selectors and decide if we\n * need to inherit gap from compared selector or not.\n * @type {String} selA\n * @type {String} selB\n * @return {Boolean}\n */\nfunction shouldInheritGap(selA, selB) {\n  let result\n\n  // get arrays of selector split in 3-deep array\n  let splitSelectorArrA = splitSelector(selA)\n  let splitSelectorArrB = splitSelector(selB)\n\n  if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {\n    // abort if selectorA has lower descendant specificity then selectorB\n    // (e.g '.grid' and '.hello .world .grid')\n    return false\n  } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {\n    // if selectorA has higher descendant specificity then selectorB\n    // (e.g '.foo .bar .grid' and '.grid')\n\n    let idx = splitSelectorArrA[0].reduce((res, [item], index) => {\n      let firstSelectorPart = splitSelectorArrB[0][0][0]\n      if (item === firstSelectorPart) {\n        return index\n      }\n      return false\n    }, false)\n\n    if (idx) {\n      result = splitSelectorArrB[0].every((arr, index) => {\n        return arr.every(\n          (part, innerIndex) =>\n            // because selectorA has more space elements, we need to slice\n            // selectorA array by 'idx' number to compare them\n            splitSelectorArrA[0].slice(idx)[index][innerIndex] === part\n        )\n      })\n    }\n  } else {\n    // if selectorA has the same descendant specificity as selectorB\n    // this condition covers cases such as: '.grid.foo.bar' and '.grid'\n    result = splitSelectorArrB.some(byCommaArr => {\n      return byCommaArr.every((bySpaceArr, index) => {\n        return bySpaceArr.every(\n          (part, innerIndex) => splitSelectorArrA[0][index][innerIndex] === part\n        )\n      })\n    })\n  }\n\n  return result\n}\n/**\n * inherit grid gap values from the closest rule above\n * with the same selector\n * @param  {Declaration} decl\n * @param  {Object} gap gap values\n * @return {Object | Boolean} return gap values or false (if not found)\n */\nexports.inheritGridGap = inheritGridGap\n\nfunction inheritGridGap(decl, gap) {\n  let rule = decl.parent\n  let mediaRule = getParentMedia(rule)\n  let root = rule.root()\n\n  // get an array of selector split in 3-deep array\n  let splitSelectorArr = splitSelector(rule.selector)\n\n  // abort if the rule already has gaps\n  if (Object.keys(gap).length > 0) {\n    return false\n  }\n\n  // e.g ['min-width']\n  let [prop] = parseMediaParams(mediaRule.params)\n\n  let lastBySpace = splitSelectorArr[0]\n\n  // get escaped value from the selector\n  // if we have '.grid-2.foo.bar' selector, will be '\\.grid\\-2'\n  let escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0])\n\n  let regexp = new RegExp(`(${escaped}$)|(${escaped}[,.])`)\n\n  // find the closest rule with the same selector\n  let closestRuleGap\n  root.walkRules(regexp, r => {\n    let gridGap\n\n    // abort if are checking the same rule\n    if (rule.toString() === r.toString()) {\n      return false\n    }\n\n    // find grid-gap values\n    r.walkDecls('grid-gap', d => (gridGap = getGridGap(d)))\n\n    // skip rule without gaps\n    if (!gridGap || Object.keys(gridGap).length === 0) {\n      return true\n    }\n\n    // skip rules that should not be inherited from\n    if (!shouldInheritGap(rule.selector, r.selector)) {\n      return true\n    }\n\n    let media = getParentMedia(r)\n    if (media) {\n      // if we are inside media, we need to check that media props match\n      // e.g ('min-width' === 'min-width')\n      let propToCompare = parseMediaParams(media.params)[0]\n      if (propToCompare === prop) {\n        closestRuleGap = gridGap\n        return true\n      }\n    } else {\n      closestRuleGap = gridGap\n      return true\n    }\n\n    return undefined\n  })\n\n  // if we find the closest gap object\n  if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {\n    return closestRuleGap\n  }\n  return false\n}\n\nexports.warnGridGap = warnGridGap\n\nfunction warnGridGap({ gap, hasColumns, decl, result }) {\n  let hasBothGaps = gap.row && gap.column\n  if (!hasColumns && (hasBothGaps || (gap.column && !gap.row))) {\n    delete gap.column\n    decl.warn(\n      result,\n      'Can not implement grid-gap without grid-template-columns'\n    )\n  }\n}\n\n/**\n * normalize the grid-template-rows/columns values\n * @param  {String} str grid-template-rows/columns value\n * @return {Array} normalized array with values\n * @example\n * let normalized = normalizeRowColumn('1fr repeat(2, 20px 50px) 1fr')\n * normalized // <= ['1fr', '20px', '50px', '20px', '50px', '1fr']\n */\nfunction normalizeRowColumn(str) {\n  let normalized = parser(str).nodes.reduce((result, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      let key = 'count'\n\n      let [count, value] = node.nodes.reduce(\n        (acc, n) => {\n          if (n.type === 'word' && key === 'count') {\n            acc[0] = Math.abs(parseInt(n.value))\n            return acc\n          }\n          if (n.type === 'div' && n.value === ',') {\n            key = 'value'\n            return acc\n          }\n          if (key === 'value') {\n            acc[1] += parser.stringify(n)\n          }\n          return acc\n        },\n        [0, '']\n      )\n\n      if (count) {\n        for (let i = 0; i < count; i++) {\n          result.push(value)\n        }\n      }\n\n      return result\n    }\n    if (node.type === 'space') {\n      return result\n    }\n    return result.concat(parser.stringify(node))\n  }, [])\n\n  return normalized\n}\n\nexports.autoplaceGridItems = autoplaceGridItems\n\n/**\n * Autoplace grid items\n * @param {Declaration} decl\n * @param {Result} result\n * @param {Object} gap gap values\n * @param {String} autoflowValue grid-auto-flow value\n * @return {void}\n * @see https://github.com/postcss/autoprefixer/issues/1148\n */\nfunction autoplaceGridItems(decl, result, gap, autoflowValue = 'row') {\n  let { parent } = decl\n\n  let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows')\n  let rows = normalizeRowColumn(rowDecl.value)\n  let columns = normalizeRowColumn(decl.value)\n\n  // Build array of area names with dummy values. If we have 3 columns and\n  // 2 rows, filledRows will be equal to ['1 2 3', '4 5 6']\n  let filledRows = rows.map((_, rowIndex) => {\n    return Array.from(\n      { length: columns.length },\n      (v, k) => k + rowIndex * columns.length + 1\n    ).join(' ')\n  })\n\n  let areas = parseGridAreas({ rows: filledRows, gap })\n  let keys = Object.keys(areas)\n  let items = keys.map(i => areas[i])\n\n  // Change the order of cells if grid-auto-flow value is 'column'\n  if (autoflowValue.includes('column')) {\n    items = items.sort((a, b) => a.column.start - b.column.start)\n  }\n\n  // Insert new rules\n  items.reverse().forEach((item, index) => {\n    let { column, row } = item\n    let nodeSelector = parent.selectors\n      .map(sel => sel + ` > *:nth-child(${keys.length - index})`)\n      .join(', ')\n\n    // create new rule\n    let node = parent.clone().removeAll()\n\n    // change rule selector\n    node.selector = nodeSelector\n\n    // insert prefixed row/column values\n    node.append({ prop: '-ms-grid-row', value: row.start })\n    node.append({ prop: '-ms-grid-column', value: column.start })\n\n    // insert rule\n    parent.after(node)\n  })\n\n  return undefined\n}\n","let featureQueries = require('caniuse-lite/data/features/css-featurequeries.js')\nlet feature = require('caniuse-lite/dist/unpacker/feature')\nlet { parse } = require('postcss')\n\nlet Browsers = require('./browsers')\nlet brackets = require('./brackets')\nlet Value = require('./value')\nlet utils = require('./utils')\n\nlet data = feature(featureQueries)\n\nlet supported = []\nfor (let browser in data.stats) {\n  let versions = data.stats[browser]\n  for (let version in versions) {\n    let support = versions[version]\n    if (/y/.test(support)) {\n      supported.push(browser + ' ' + version)\n    }\n  }\n}\n\nclass Supports {\n  constructor(Prefixes, all) {\n    this.Prefixes = Prefixes\n    this.all = all\n  }\n\n  /**\n   * Return prefixer only with @supports supported browsers\n   */\n  prefixer() {\n    if (this.prefixerCache) {\n      return this.prefixerCache\n    }\n\n    let filtered = this.all.browsers.selected.filter(i => {\n      return supported.includes(i)\n    })\n\n    let browsers = new Browsers(\n      this.all.browsers.data,\n      filtered,\n      this.all.options\n    )\n    this.prefixerCache = new this.Prefixes(\n      this.all.data,\n      browsers,\n      this.all.options\n    )\n    return this.prefixerCache\n  }\n\n  /**\n   * Parse string into declaration property and value\n   */\n  parse(str) {\n    let parts = str.split(':')\n    let prop = parts[0]\n    let value = parts[1]\n    if (!value) value = ''\n    return [prop.trim(), value.trim()]\n  }\n\n  /**\n   * Create virtual rule to process it by prefixer\n   */\n  virtual(str) {\n    let [prop, value] = this.parse(str)\n    let rule = parse('a{}').first\n    rule.append({ prop, value, raws: { before: '' } })\n    return rule\n  }\n\n  /**\n   * Return array of Declaration with all necessary prefixes\n   */\n  prefixed(str) {\n    let rule = this.virtual(str)\n    if (this.disabled(rule.first)) {\n      return rule.nodes\n    }\n\n    let result = { warn: () => null }\n\n    let prefixer = this.prefixer().add[rule.first.prop]\n    prefixer && prefixer.process && prefixer.process(rule.first, result)\n\n    for (let decl of rule.nodes) {\n      for (let value of this.prefixer().values('add', rule.first.prop)) {\n        value.process(decl)\n      }\n      Value.save(this.all, decl)\n    }\n\n    return rule.nodes\n  }\n\n  /**\n   * Return true if brackets node is \"not\" word\n   */\n  isNot(node) {\n    return typeof node === 'string' && /not\\s*/i.test(node)\n  }\n\n  /**\n   * Return true if brackets node is \"or\" word\n   */\n  isOr(node) {\n    return typeof node === 'string' && /\\s*or\\s*/i.test(node)\n  }\n\n  /**\n   * Return true if brackets node is (prop: value)\n   */\n  isProp(node) {\n    return (\n      typeof node === 'object' &&\n      node.length === 1 &&\n      typeof node[0] === 'string'\n    )\n  }\n\n  /**\n   * Return true if prefixed property has no unprefixed\n   */\n  isHack(all, unprefixed) {\n    let check = new RegExp(`(\\\\(|\\\\s)${utils.escapeRegexp(unprefixed)}:`)\n    return !check.test(all)\n  }\n\n  /**\n   * Return true if we need to remove node\n   */\n  toRemove(str, all) {\n    let [prop, value] = this.parse(str)\n    let unprefixed = this.all.unprefixed(prop)\n\n    let cleaner = this.all.cleaner()\n\n    if (\n      cleaner.remove[prop] &&\n      cleaner.remove[prop].remove &&\n      !this.isHack(all, unprefixed)\n    ) {\n      return true\n    }\n\n    for (let checker of cleaner.values('remove', unprefixed)) {\n      if (checker.check(value)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Remove all unnecessary prefixes\n   */\n  remove(nodes, all) {\n    let i = 0\n    while (i < nodes.length) {\n      if (\n        !this.isNot(nodes[i - 1]) &&\n        this.isProp(nodes[i]) &&\n        this.isOr(nodes[i + 1])\n      ) {\n        if (this.toRemove(nodes[i][0], all)) {\n          nodes.splice(i, 2)\n          continue\n        }\n\n        i += 2\n        continue\n      }\n\n      if (typeof nodes[i] === 'object') {\n        nodes[i] = this.remove(nodes[i], all)\n      }\n\n      i += 1\n    }\n    return nodes\n  }\n\n  /**\n   * Clean brackets with one child\n   */\n  cleanBrackets(nodes) {\n    return nodes.map(i => {\n      if (typeof i !== 'object') {\n        return i\n      }\n\n      if (i.length === 1 && typeof i[0] === 'object') {\n        return this.cleanBrackets(i[0])\n      }\n\n      return this.cleanBrackets(i)\n    })\n  }\n\n  /**\n   * Add \" or \" between properties and convert it to brackets format\n   */\n  convert(progress) {\n    let result = ['']\n    for (let i of progress) {\n      result.push([`${i.prop}: ${i.value}`])\n      result.push(' or ')\n    }\n    result[result.length - 1] = ''\n    return result\n  }\n\n  /**\n   * Compress value functions into a string nodes\n   */\n  normalize(nodes) {\n    if (typeof nodes !== 'object') {\n      return nodes\n    }\n\n    nodes = nodes.filter(i => i !== '')\n\n    if (typeof nodes[0] === 'string') {\n      let firstNode = nodes[0].trim()\n\n      if (\n        firstNode.includes(':') ||\n        firstNode === 'selector' ||\n        firstNode === 'not selector'\n      ) {\n        return [brackets.stringify(nodes)]\n      }\n    }\n    return nodes.map(i => this.normalize(i))\n  }\n\n  /**\n   * Add prefixes\n   */\n  add(nodes, all) {\n    return nodes.map(i => {\n      if (this.isProp(i)) {\n        let prefixed = this.prefixed(i[0])\n        if (prefixed.length > 1) {\n          return this.convert(prefixed)\n        }\n\n        return i\n      }\n\n      if (typeof i === 'object') {\n        return this.add(i, all)\n      }\n\n      return i\n    })\n  }\n\n  /**\n   * Add prefixed declaration\n   */\n  process(rule) {\n    let ast = brackets.parse(rule.params)\n    ast = this.normalize(ast)\n    ast = this.remove(ast, rule.params)\n    ast = this.add(ast, rule.params)\n    ast = this.cleanBrackets(ast)\n    rule.params = brackets.stringify(ast)\n  }\n\n  /**\n   * Check global options\n   */\n  disabled(node) {\n    if (!this.all.options.grid) {\n      if (node.prop === 'display' && node.value.includes('grid')) {\n        return true\n      }\n      if (node.prop.includes('grid') || node.prop === 'justify-items') {\n        return true\n      }\n    }\n\n    if (this.all.options.flexbox === false) {\n      if (node.prop === 'display' && node.value.includes('flex')) {\n        return true\n      }\n      let other = ['order', 'justify-content', 'align-items', 'align-content']\n      if (node.prop.includes('flex') || other.includes(node.prop)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\nmodule.exports = Supports\n","function last(array) {\n  return array[array.length - 1]\n}\n\nlet brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse(str) {\n    let current = ['']\n    let stack = [current]\n\n    for (let sym of str) {\n      if (sym === '(') {\n        current = ['']\n        last(stack).push(current)\n        stack.push(current)\n        continue\n      }\n\n      if (sym === ')') {\n        stack.pop()\n        current = last(stack)\n        current.push('')\n        continue\n      }\n\n      current[current.length - 1] += sym\n    }\n\n    return stack[0]\n  },\n\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify(ast) {\n    let result = ''\n    for (let i of ast) {\n      if (typeof i === 'object') {\n        result += `(${brackets.stringify(i)})`\n        continue\n      }\n\n      result += i\n    }\n    return result\n  }\n}\n\nmodule.exports = brackets\n","let { list } = require('postcss')\n\nlet OldSelector = require('./old-selector')\nlet Prefixer = require('./prefixer')\nlet Browsers = require('./browsers')\nlet utils = require('./utils')\n\nclass Selector extends Prefixer {\n  constructor(name, prefixes, all) {\n    super(name, prefixes, all)\n    this.regexpCache = new Map()\n  }\n\n  /**\n   * Is rule selectors need to be prefixed\n   */\n  check(rule) {\n    if (rule.selector.includes(this.name)) {\n      return !!rule.selector.match(this.regexp())\n    }\n\n    return false\n  }\n\n  /**\n   * Return prefixed version of selector\n   */\n  prefixed(prefix) {\n    return this.name.replace(/^(\\W*)/, `$1${prefix}`)\n  }\n\n  /**\n   * Lazy loadRegExp for name\n   */\n  regexp(prefix) {\n    if (!this.regexpCache.has(prefix)) {\n      let name = prefix ? this.prefixed(prefix) : this.name\n      this.regexpCache.set(\n        prefix,\n        new RegExp(`(^|[^:\"'=])${utils.escapeRegexp(name)}`, 'gi')\n      )\n    }\n\n    return this.regexpCache.get(prefix)\n  }\n\n  /**\n   * All possible prefixes\n   */\n  possible() {\n    return Browsers.prefixes()\n  }\n\n  /**\n   * Return all possible selector prefixes\n   */\n  prefixeds(rule) {\n    if (rule._autoprefixerPrefixeds) {\n      if (rule._autoprefixerPrefixeds[this.name]) {\n        return rule._autoprefixerPrefixeds\n      }\n    } else {\n      rule._autoprefixerPrefixeds = {}\n    }\n\n    let prefixeds = {}\n    if (rule.selector.includes(',')) {\n      let ruleParts = list.comma(rule.selector)\n      let toProcess = ruleParts.filter(el => el.includes(this.name))\n\n      for (let prefix of this.possible()) {\n        prefixeds[prefix] = toProcess\n          .map(el => this.replace(el, prefix))\n          .join(', ')\n      }\n    } else {\n      for (let prefix of this.possible()) {\n        prefixeds[prefix] = this.replace(rule.selector, prefix)\n      }\n    }\n\n    rule._autoprefixerPrefixeds[this.name] = prefixeds\n    return rule._autoprefixerPrefixeds\n  }\n\n  /**\n   * Is rule already prefixed before\n   */\n  already(rule, prefixeds, prefix) {\n    let index = rule.parent.index(rule) - 1\n\n    while (index >= 0) {\n      let before = rule.parent.nodes[index]\n\n      if (before.type !== 'rule') {\n        return false\n      }\n\n      let some = false\n      for (let key in prefixeds[this.name]) {\n        let prefixed = prefixeds[this.name][key]\n        if (before.selector === prefixed) {\n          if (prefix === key) {\n            return true\n          } else {\n            some = true\n            break\n          }\n        }\n      }\n      if (!some) {\n        return false\n      }\n\n      index -= 1\n    }\n\n    return false\n  }\n\n  /**\n   * Replace selectors by prefixed one\n   */\n  replace(selector, prefix) {\n    return selector.replace(this.regexp(), `$1${this.prefixed(prefix)}`)\n  }\n\n  /**\n   * Clone and add prefixes for at-rule\n   */\n  add(rule, prefix) {\n    let prefixeds = this.prefixeds(rule)\n\n    if (this.already(rule, prefixeds, prefix)) {\n      return\n    }\n\n    let cloned = this.clone(rule, { selector: prefixeds[this.name][prefix] })\n    rule.parent.insertBefore(rule, cloned)\n  }\n\n  /**\n   * Return function to fast find prefixed selector\n   */\n  old(prefix) {\n    return new OldSelector(this, prefix)\n  }\n}\n\nmodule.exports = Selector\n","class OldSelector {\n  constructor(selector, prefix) {\n    this.prefix = prefix\n    this.prefixed = selector.prefixed(this.prefix)\n    this.regexp = selector.regexp(this.prefix)\n\n    this.prefixeds = selector\n      .possible()\n      .map(x => [selector.prefixed(x), selector.regexp(x)])\n\n    this.unprefixed = selector.name\n    this.nameRegexp = selector.regexp()\n  }\n\n  /**\n   * Is rule a hack without unprefixed version bottom\n   */\n  isHack(rule) {\n    let index = rule.parent.index(rule) + 1\n    let rules = rule.parent.nodes\n\n    while (index < rules.length) {\n      let before = rules[index].selector\n      if (!before) {\n        return true\n      }\n\n      if (before.includes(this.unprefixed) && before.match(this.nameRegexp)) {\n        return false\n      }\n\n      let some = false\n      for (let [string, regexp] of this.prefixeds) {\n        if (before.includes(string) && before.match(regexp)) {\n          some = true\n          break\n        }\n      }\n\n      if (!some) {\n        return true\n      }\n\n      index += 1\n    }\n\n    return true\n  }\n\n  /**\n   * Does rule contain an unnecessary prefixed selector\n   */\n  check(rule) {\n    if (!rule.selector.includes(this.prefixed)) {\n      return false\n    }\n    if (!rule.selector.match(this.regexp)) {\n      return false\n    }\n    if (this.isHack(rule)) {\n      return false\n    }\n    return true\n  }\n}\n\nmodule.exports = OldSelector\n","let Prefixer = require('./prefixer')\n\nclass AtRule extends Prefixer {\n  /**\n   * Clone and add prefixes for at-rule\n   */\n  add(rule, prefix) {\n    let prefixed = prefix + rule.name\n\n    let already = rule.parent.some(\n      i => i.name === prefixed && i.params === rule.params\n    )\n    if (already) {\n      return undefined\n    }\n\n    let cloned = this.clone(rule, { name: prefixed })\n    return rule.parent.insertBefore(rule, cloned)\n  }\n\n  /**\n   * Clone node with prefixes\n   */\n  process(node) {\n    let parent = this.parentPrefix(node)\n\n    for (let prefix of this.prefixes) {\n      if (!parent || parent === prefix) {\n        this.add(node, prefix)\n      }\n    }\n  }\n}\n\nmodule.exports = AtRule\n","let Selector = require('../selector')\n\nclass Fullscreen extends Selector {\n  /**\n   * Return different selectors depend on prefix\n   */\n  prefixed(prefix) {\n    if (prefix === '-webkit-') {\n      return ':-webkit-full-screen'\n    }\n    if (prefix === '-moz-') {\n      return ':-moz-full-screen'\n    }\n    return `:${prefix}fullscreen`\n  }\n}\n\nFullscreen.names = [':fullscreen']\n\nmodule.exports = Fullscreen\n","let Selector = require('../selector')\n\nclass Placeholder extends Selector {\n  /**\n   * Add old mozilla to possible prefixes\n   */\n  possible() {\n    return super.possible().concat(['-moz- old', '-ms- old'])\n  }\n\n  /**\n   * Return different selectors depend on prefix\n   */\n  prefixed(prefix) {\n    if (prefix === '-webkit-') {\n      return '::-webkit-input-placeholder'\n    }\n    if (prefix === '-ms-') {\n      return '::-ms-input-placeholder'\n    }\n    if (prefix === '-ms- old') {\n      return ':-ms-input-placeholder'\n    }\n    if (prefix === '-moz- old') {\n      return ':-moz-placeholder'\n    }\n    return `::${prefix}placeholder`\n  }\n}\n\nPlaceholder.names = ['::placeholder']\n\nmodule.exports = Placeholder\n","let Selector = require('../selector')\n\nclass PlaceholderShown extends Selector {\n  /**\n   * Return different selectors depend on prefix\n   */\n  prefixed(prefix) {\n    if (prefix === '-ms-') {\n      return ':-ms-input-placeholder'\n    }\n    return `:${prefix}placeholder-shown`\n  }\n}\n\nPlaceholderShown.names = [':placeholder-shown']\n\nmodule.exports = PlaceholderShown\n","let Selector = require('../selector')\nlet utils = require('../utils')\n\nclass FileSelectorButton extends Selector {\n  constructor(name, prefixes, all) {\n    super(name, prefixes, all)\n\n    if (this.prefixes) {\n      this.prefixes = utils.uniq(this.prefixes.map(() => '-webkit-'))\n    }\n  }\n\n  /**\n   * Return different selectors depend on prefix\n   */\n  prefixed(prefix) {\n    if (prefix === '-webkit-') {\n      return '::-webkit-file-upload-button'\n    }\n    return `::${prefix}file-selector-button`\n  }\n}\n\nFileSelectorButton.names = ['::file-selector-button']\n\nmodule.exports = FileSelectorButton\n","let list = require('postcss').list\n\nlet flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass Flex extends Declaration {\n  /**\n   * Change property name for 2009 spec\n   */\n  prefixed(prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2009) {\n      return prefix + 'box-flex'\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'flex'\n  }\n\n  /**\n   * Spec 2009 supports only first argument\n   * Spec 2012 disallows unitless basis\n   */\n  set(decl, prefix) {\n    let spec = flexSpec(prefix)[0]\n    if (spec === 2009) {\n      decl.value = list.space(decl.value)[0]\n      decl.value = Flex.oldValues[decl.value] || decl.value\n      return super.set(decl, prefix)\n    }\n    if (spec === 2012) {\n      let components = list.space(decl.value)\n      if (components.length === 3 && components[2] === '0') {\n        decl.value = components.slice(0, 2).concat('0px').join(' ')\n      }\n    }\n    return super.set(decl, prefix)\n  }\n}\n\nFlex.names = ['flex', 'box-flex']\n\nFlex.oldValues = {\n  auto: '1',\n  none: '0'\n}\n\nmodule.exports = Flex\n","/**\n * Return flexbox spec versions by prefix\n */\nmodule.exports = function (prefix) {\n  let spec\n  if (prefix === '-webkit- 2009' || prefix === '-moz-') {\n    spec = 2009\n  } else if (prefix === '-ms-') {\n    spec = 2012\n  } else if (prefix === '-webkit-') {\n    spec = 'final'\n  }\n\n  if (prefix === '-webkit- 2009') {\n    prefix = '-webkit-'\n  }\n\n  return [spec, prefix]\n}\n","let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass Order extends Declaration {\n  /**\n   * Change property name for 2009 and 2012 specs\n   */\n  prefixed(prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2009) {\n      return prefix + 'box-ordinal-group'\n    }\n    if (spec === 2012) {\n      return prefix + 'flex-order'\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'order'\n  }\n\n  /**\n   * Fix value for 2009 spec\n   */\n  set(decl, prefix) {\n    let spec = flexSpec(prefix)[0]\n    if (spec === 2009 && /\\d/.test(decl.value)) {\n      decl.value = (parseInt(decl.value) + 1).toString()\n      return super.set(decl, prefix)\n    }\n    return super.set(decl, prefix)\n  }\n}\n\nOrder.names = ['order', 'flex-order', 'box-ordinal-group']\n\nmodule.exports = Order\n","let Declaration = require('../declaration')\n\nclass Filter extends Declaration {\n  /**\n   * Check is it Internet Explorer filter\n   */\n  check(decl) {\n    let v = decl.value\n    return (\n      !v.toLowerCase().includes('alpha(') &&\n      !v.includes('DXImageTransform.Microsoft') &&\n      !v.includes('data:image/svg+xml')\n    )\n  }\n}\n\nFilter.names = ['filter']\n\nmodule.exports = Filter\n","let Declaration = require('../declaration')\nlet { isPureNumber } = require('../utils')\n\nclass GridEnd extends Declaration {\n  /**\n   * Change repeating syntax for IE\n   */\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    let clonedDecl = this.clone(decl)\n\n    let startProp = decl.prop.replace(/end$/, 'start')\n    let spanProp = prefix + decl.prop.replace(/end$/, 'span')\n\n    if (decl.parent.some(i => i.prop === spanProp)) {\n      return undefined\n    }\n\n    clonedDecl.prop = spanProp\n\n    if (decl.value.includes('span')) {\n      clonedDecl.value = decl.value.replace(/span\\s/i, '')\n    } else {\n      let startDecl\n      decl.parent.walkDecls(startProp, d => {\n        startDecl = d\n      })\n      if (startDecl) {\n        if (isPureNumber(startDecl.value)) {\n          let value = Number(decl.value) - Number(startDecl.value) + ''\n          clonedDecl.value = value\n        } else {\n          return undefined\n        }\n      } else {\n        decl.warn(\n          result,\n          `Can not prefix ${decl.prop} (${startProp} is not found)`\n        )\n      }\n    }\n\n    decl.cloneBefore(clonedDecl)\n\n    return undefined\n  }\n}\n\nGridEnd.names = ['grid-row-end', 'grid-column-end']\n\nmodule.exports = GridEnd\n","let Declaration = require('../declaration')\n\nclass Animation extends Declaration {\n  /**\n   * Don’t add prefixes for modern values.\n   */\n  check(decl) {\n    return !decl.value.split(/\\s+/).some(i => {\n      let lower = i.toLowerCase()\n      return lower === 'reverse' || lower === 'alternate-reverse'\n    })\n  }\n}\n\nAnimation.names = ['animation', 'animation-direction']\n\nmodule.exports = Animation\n","let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass FlexFlow extends Declaration {\n  /**\n   * Use two properties for 2009 spec\n   */\n  insert(decl, prefix, prefixes) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec !== 2009) {\n      return super.insert(decl, prefix, prefixes)\n    }\n    let values = decl.value\n      .split(/\\s+/)\n      .filter(i => i !== 'wrap' && i !== 'nowrap' && 'wrap-reverse')\n    if (values.length === 0) {\n      return undefined\n    }\n\n    let already = decl.parent.some(\n      i =>\n        i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction'\n    )\n    if (already) {\n      return undefined\n    }\n\n    let value = values[0]\n    let orient = value.includes('row') ? 'horizontal' : 'vertical'\n    let dir = value.includes('reverse') ? 'reverse' : 'normal'\n\n    let cloned = this.clone(decl)\n    cloned.prop = prefix + 'box-orient'\n    cloned.value = orient\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    decl.parent.insertBefore(decl, cloned)\n\n    cloned = this.clone(decl)\n    cloned.prop = prefix + 'box-direction'\n    cloned.value = dir\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    return decl.parent.insertBefore(decl, cloned)\n  }\n}\n\nFlexFlow.names = ['flex-flow', 'box-direction', 'box-orient']\n\nmodule.exports = FlexFlow\n","let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass Flex extends Declaration {\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'flex'\n  }\n\n  /**\n   * Return flex property for 2009 and 2012 specs\n   */\n  prefixed(prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2009) {\n      return prefix + 'box-flex'\n    }\n    if (spec === 2012) {\n      return prefix + 'flex-positive'\n    }\n    return super.prefixed(prop, prefix)\n  }\n}\n\nFlex.names = ['flex-grow', 'flex-positive']\n\nmodule.exports = Flex\n","let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass FlexWrap extends Declaration {\n  /**\n   * Don't add prefix for 2009 spec\n   */\n  set(decl, prefix) {\n    let spec = flexSpec(prefix)[0]\n    if (spec !== 2009) {\n      return super.set(decl, prefix)\n    }\n    return undefined\n  }\n}\n\nFlexWrap.names = ['flex-wrap']\n\nmodule.exports = FlexWrap\n","let Declaration = require('../declaration')\nlet utils = require('./grid-utils')\n\nclass GridArea extends Declaration {\n  /**\n   * Translate grid-area to separate -ms- prefixed properties\n   */\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    let values = utils.parse(decl)\n\n    let [rowStart, rowSpan] = utils.translate(values, 0, 2)\n    let [columnStart, columnSpan] = utils.translate(values, 1, 3)\n\n    ;[\n      ['grid-row', rowStart],\n      ['grid-row-span', rowSpan],\n      ['grid-column', columnStart],\n      ['grid-column-span', columnSpan]\n    ].forEach(([prop, value]) => {\n      utils.insertDecl(decl, prop, value)\n    })\n\n    utils.warnTemplateSelectorNotFound(decl, result)\n    utils.warnIfGridRowColumnExists(decl, result)\n\n    return undefined\n  }\n}\n\nGridArea.names = ['grid-area']\n\nmodule.exports = GridArea\n","let Declaration = require('../declaration')\nlet utils = require('./grid-utils')\n\nclass PlaceSelf extends Declaration {\n  /**\n   * Translate place-self to separate -ms- prefixed properties\n   */\n  insert(decl, prefix, prefixes) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    // prevent doubling of prefixes\n    if (decl.parent.some(i => i.prop === '-ms-grid-row-align')) {\n      return undefined\n    }\n\n    let [[first, second]] = utils.parse(decl)\n\n    if (second) {\n      utils.insertDecl(decl, 'grid-row-align', first)\n      utils.insertDecl(decl, 'grid-column-align', second)\n    } else {\n      utils.insertDecl(decl, 'grid-row-align', first)\n      utils.insertDecl(decl, 'grid-column-align', first)\n    }\n\n    return undefined\n  }\n}\n\nPlaceSelf.names = ['place-self']\n\nmodule.exports = PlaceSelf\n","let Declaration = require('../declaration')\n\nclass GridStart extends Declaration {\n  /**\n   * Do not add prefix for unsupported value in IE\n   */\n  check(decl) {\n    let value = decl.value\n    return !value.includes('/') && !value.includes('span')\n  }\n\n  /**\n   * Return a final spec property\n   */\n  normalize(prop) {\n    return prop.replace('-start', '')\n  }\n\n  /**\n   * Change property name for IE\n   */\n  prefixed(prop, prefix) {\n    let result = super.prefixed(prop, prefix)\n    if (prefix === '-ms-') {\n      result = result.replace('-start', '')\n    }\n    return result\n  }\n}\n\nGridStart.names = ['grid-row-start', 'grid-column-start']\n\nmodule.exports = GridStart\n","let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass AlignSelf extends Declaration {\n  check(decl) {\n    return (\n      decl.parent &&\n      !decl.parent.some(i => {\n        return i.prop && i.prop.startsWith('grid-')\n      })\n    )\n  }\n\n  /**\n   * Change property name for 2012 specs\n   */\n  prefixed(prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2012) {\n      return prefix + 'flex-item-align'\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'align-self'\n  }\n\n  /**\n   * Change value for 2012 spec and ignore prefix for 2009\n   */\n  set(decl, prefix) {\n    let spec = flexSpec(prefix)[0]\n    if (spec === 2012) {\n      decl.value = AlignSelf.oldValues[decl.value] || decl.value\n      return super.set(decl, prefix)\n    }\n    if (spec === 'final') {\n      return super.set(decl, prefix)\n    }\n    return undefined\n  }\n}\n\nAlignSelf.names = ['align-self', 'flex-item-align']\n\nAlignSelf.oldValues = {\n  'flex-end': 'end',\n  'flex-start': 'start'\n}\n\nmodule.exports = AlignSelf\n","let Declaration = require('../declaration')\nlet utils = require('../utils')\n\nclass Appearance extends Declaration {\n  constructor(name, prefixes, all) {\n    super(name, prefixes, all)\n\n    if (this.prefixes) {\n      this.prefixes = utils.uniq(\n        this.prefixes.map(i => {\n          if (i === '-ms-') {\n            return '-webkit-'\n          }\n          return i\n        })\n      )\n    }\n  }\n}\n\nAppearance.names = ['appearance']\n\nmodule.exports = Appearance\n","let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass FlexBasis extends Declaration {\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'flex-basis'\n  }\n\n  /**\n   * Return flex property for 2012 spec\n   */\n  prefixed(prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2012) {\n      return prefix + 'flex-preferred-size'\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Ignore 2009 spec and use flex property for 2012\n   */\n  set(decl, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2012 || spec === 'final') {\n      return super.set(decl, prefix)\n    }\n    return undefined\n  }\n}\n\nFlexBasis.names = ['flex-basis', 'flex-preferred-size']\n\nmodule.exports = FlexBasis\n","let Declaration = require('../declaration')\n\nclass MaskBorder extends Declaration {\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return this.name.replace('box-image', 'border')\n  }\n\n  /**\n   * Return flex property for 2012 spec\n   */\n  prefixed(prop, prefix) {\n    let result = super.prefixed(prop, prefix)\n    if (prefix === '-webkit-') {\n      result = result.replace('border', 'box-image')\n    }\n    return result\n  }\n}\n\nMaskBorder.names = [\n  'mask-border',\n  'mask-border-source',\n  'mask-border-slice',\n  'mask-border-width',\n  'mask-border-outset',\n  'mask-border-repeat',\n  'mask-box-image',\n  'mask-box-image-source',\n  'mask-box-image-slice',\n  'mask-box-image-width',\n  'mask-box-image-outset',\n  'mask-box-image-repeat'\n]\n\nmodule.exports = MaskBorder\n","let Declaration = require('../declaration')\n\nclass MaskComposite extends Declaration {\n  /**\n   * Prefix mask-composite for webkit\n   */\n  insert(decl, prefix, prefixes) {\n    let isCompositeProp = decl.prop === 'mask-composite'\n\n    let compositeValues\n\n    if (isCompositeProp) {\n      compositeValues = decl.value.split(',')\n    } else {\n      compositeValues = decl.value.match(MaskComposite.regexp) || []\n    }\n\n    compositeValues = compositeValues.map(el => el.trim()).filter(el => el)\n    let hasCompositeValues = compositeValues.length\n\n    let compositeDecl\n\n    if (hasCompositeValues) {\n      compositeDecl = this.clone(decl)\n      compositeDecl.value = compositeValues\n        .map(value => MaskComposite.oldValues[value] || value)\n        .join(', ')\n\n      if (compositeValues.includes('intersect')) {\n        compositeDecl.value += ', xor'\n      }\n\n      compositeDecl.prop = prefix + 'mask-composite'\n    }\n\n    if (isCompositeProp) {\n      if (!hasCompositeValues) {\n        return undefined\n      }\n\n      if (this.needCascade(decl)) {\n        compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix)\n      }\n\n      return decl.parent.insertBefore(decl, compositeDecl)\n    }\n\n    let cloned = this.clone(decl)\n    cloned.prop = prefix + cloned.prop\n\n    if (hasCompositeValues) {\n      cloned.value = cloned.value.replace(MaskComposite.regexp, '')\n    }\n\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n\n    decl.parent.insertBefore(decl, cloned)\n\n    if (!hasCompositeValues) {\n      return decl\n    }\n\n    if (this.needCascade(decl)) {\n      compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    return decl.parent.insertBefore(decl, compositeDecl)\n  }\n}\n\nMaskComposite.names = ['mask', 'mask-composite']\n\nMaskComposite.oldValues = {\n  add: 'source-over',\n  subtract: 'source-out',\n  intersect: 'source-in',\n  exclude: 'xor'\n}\n\nMaskComposite.regexp = new RegExp(\n  `\\\\s+(${Object.keys(MaskComposite.oldValues).join(\n    '|'\n  )})\\\\b(?!\\\\))\\\\s*(?=[,])`,\n  'ig'\n)\n\nmodule.exports = MaskComposite\n","let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass AlignItems extends Declaration {\n  /**\n   * Change property name for 2009 and 2012 specs\n   */\n  prefixed(prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2009) {\n      return prefix + 'box-align'\n    }\n    if (spec === 2012) {\n      return prefix + 'flex-align'\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'align-items'\n  }\n\n  /**\n   * Change value for 2009 and 2012 specs\n   */\n  set(decl, prefix) {\n    let spec = flexSpec(prefix)[0]\n    if (spec === 2009 || spec === 2012) {\n      decl.value = AlignItems.oldValues[decl.value] || decl.value\n    }\n    return super.set(decl, prefix)\n  }\n}\n\nAlignItems.names = ['align-items', 'flex-align', 'box-align']\n\nAlignItems.oldValues = {\n  'flex-end': 'end',\n  'flex-start': 'start'\n}\n\nmodule.exports = AlignItems\n","let Declaration = require('../declaration')\n\nclass UserSelect extends Declaration {\n  /**\n   * Change prefixed value for IE\n   */\n  set(decl, prefix) {\n    if (prefix === '-ms-' && decl.value === 'contain') {\n      decl.value = 'element'\n    }\n    return super.set(decl, prefix)\n  }\n\n  /**\n   * Avoid prefixing all in IE\n   */\n  insert(decl, prefix, prefixes) {\n    if (decl.value === 'all' && prefix === '-ms-') {\n      return undefined\n    } else {\n      return super.insert(decl, prefix, prefixes)\n    }\n  }\n}\n\nUserSelect.names = ['user-select']\n\nmodule.exports = UserSelect\n","let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass FlexShrink extends Declaration {\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'flex-shrink'\n  }\n\n  /**\n   * Return flex property for 2012 spec\n   */\n  prefixed(prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2012) {\n      return prefix + 'flex-negative'\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Ignore 2009 spec and use flex property for 2012\n   */\n  set(decl, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2012 || spec === 'final') {\n      return super.set(decl, prefix)\n    }\n    return undefined\n  }\n}\n\nFlexShrink.names = ['flex-shrink', 'flex-negative']\n\nmodule.exports = FlexShrink\n","let Declaration = require('../declaration')\n\nclass BreakProps extends Declaration {\n  /**\n   * Change name for -webkit- and -moz- prefix\n   */\n  prefixed(prop, prefix) {\n    return `${prefix}column-${prop}`\n  }\n\n  /**\n   * Return property name by final spec\n   */\n  normalize(prop) {\n    if (prop.includes('inside')) {\n      return 'break-inside'\n    }\n    if (prop.includes('before')) {\n      return 'break-before'\n    }\n    return 'break-after'\n  }\n\n  /**\n   * Change prefixed value for avoid-column and avoid-page\n   */\n  set(decl, prefix) {\n    if (\n      (decl.prop === 'break-inside' && decl.value === 'avoid-column') ||\n      decl.value === 'avoid-page'\n    ) {\n      decl.value = 'avoid'\n    }\n    return super.set(decl, prefix)\n  }\n\n  /**\n   * Don’t prefix some values\n   */\n  insert(decl, prefix, prefixes) {\n    if (decl.prop !== 'break-inside') {\n      return super.insert(decl, prefix, prefixes)\n    }\n    if (/region/i.test(decl.value) || /page/i.test(decl.value)) {\n      return undefined\n    }\n    return super.insert(decl, prefix, prefixes)\n  }\n}\n\nBreakProps.names = [\n  'break-inside',\n  'page-break-inside',\n  'column-break-inside',\n  'break-before',\n  'page-break-before',\n  'column-break-before',\n  'break-after',\n  'page-break-after',\n  'column-break-after'\n]\n\nmodule.exports = BreakProps\n","let Declaration = require('../declaration')\n\nclass WritingMode extends Declaration {\n  insert(decl, prefix, prefixes) {\n    if (prefix === '-ms-') {\n      let cloned = this.set(this.clone(decl), prefix)\n\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n      }\n      let direction = 'ltr'\n\n      decl.parent.nodes.forEach(i => {\n        if (i.prop === 'direction') {\n          if (i.value === 'rtl' || i.value === 'ltr') direction = i.value\n        }\n      })\n\n      cloned.value = WritingMode.msValues[direction][decl.value] || decl.value\n      return decl.parent.insertBefore(decl, cloned)\n    }\n\n    return super.insert(decl, prefix, prefixes)\n  }\n}\n\nWritingMode.names = ['writing-mode']\n\nWritingMode.msValues = {\n  ltr: {\n    'horizontal-tb': 'lr-tb',\n    'vertical-rl': 'tb-rl',\n    'vertical-lr': 'tb-lr'\n  },\n  rtl: {\n    'horizontal-tb': 'rl-tb',\n    'vertical-rl': 'bt-rl',\n    'vertical-lr': 'bt-lr'\n  }\n}\n\nmodule.exports = WritingMode\n","let Declaration = require('../declaration')\n\nclass BorderImage extends Declaration {\n  /**\n   * Remove fill parameter for prefixed declarations\n   */\n  set(decl, prefix) {\n    decl.value = decl.value.replace(/\\s+fill(\\s)/, '$1')\n    return super.set(decl, prefix)\n  }\n}\n\nBorderImage.names = ['border-image']\n\nmodule.exports = BorderImage\n","let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass AlignContent extends Declaration {\n  /**\n   * Change property name for 2012 spec\n   */\n  prefixed(prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2012) {\n      return prefix + 'flex-line-pack'\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'align-content'\n  }\n\n  /**\n   * Change value for 2012 spec and ignore prefix for 2009\n   */\n  set(decl, prefix) {\n    let spec = flexSpec(prefix)[0]\n    if (spec === 2012) {\n      decl.value = AlignContent.oldValues[decl.value] || decl.value\n      return super.set(decl, prefix)\n    }\n    if (spec === 'final') {\n      return super.set(decl, prefix)\n    }\n    return undefined\n  }\n}\n\nAlignContent.names = ['align-content', 'flex-line-pack']\n\nAlignContent.oldValues = {\n  'flex-end': 'end',\n  'flex-start': 'start',\n  'space-between': 'justify',\n  'space-around': 'distribute'\n}\n\nmodule.exports = AlignContent\n","let Declaration = require('../declaration')\n\nclass BorderRadius extends Declaration {\n  /**\n   * Change syntax, when add Mozilla prefix\n   */\n  prefixed(prop, prefix) {\n    if (prefix === '-moz-') {\n      return prefix + (BorderRadius.toMozilla[prop] || prop)\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Return unprefixed version of property\n   */\n  normalize(prop) {\n    return BorderRadius.toNormal[prop] || prop\n  }\n}\n\nBorderRadius.names = ['border-radius']\n\nBorderRadius.toMozilla = {}\nBorderRadius.toNormal = {}\n\nfor (let ver of ['top', 'bottom']) {\n  for (let hor of ['left', 'right']) {\n    let normal = `border-${ver}-${hor}-radius`\n    let mozilla = `border-radius-${ver}${hor}`\n\n    BorderRadius.names.push(normal)\n    BorderRadius.names.push(mozilla)\n\n    BorderRadius.toMozilla[normal] = mozilla\n    BorderRadius.toNormal[mozilla] = normal\n  }\n}\n\nmodule.exports = BorderRadius\n","let Declaration = require('../declaration')\n\nclass BlockLogical extends Declaration {\n  /**\n   * Use old syntax for -moz- and -webkit-\n   */\n  prefixed(prop, prefix) {\n    if (prop.includes('-start')) {\n      return prefix + prop.replace('-block-start', '-before')\n    }\n    return prefix + prop.replace('-block-end', '-after')\n  }\n\n  /**\n   * Return property name by spec\n   */\n  normalize(prop) {\n    if (prop.includes('-before')) {\n      return prop.replace('-before', '-block-start')\n    }\n    return prop.replace('-after', '-block-end')\n  }\n}\n\nBlockLogical.names = [\n  'border-block-start',\n  'border-block-end',\n  'margin-block-start',\n  'margin-block-end',\n  'padding-block-start',\n  'padding-block-end',\n  'border-before',\n  'border-after',\n  'margin-before',\n  'margin-after',\n  'padding-before',\n  'padding-after'\n]\n\nmodule.exports = BlockLogical\n","let Declaration = require('../declaration')\nlet {\n  parseTemplate,\n  warnMissedAreas,\n  getGridGap,\n  warnGridGap,\n  inheritGridGap\n} = require('./grid-utils')\n\nclass GridTemplate extends Declaration {\n  /**\n   * Translate grid-template to separate -ms- prefixed properties\n   */\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    if (decl.parent.some(i => i.prop === '-ms-grid-rows')) {\n      return undefined\n    }\n\n    let gap = getGridGap(decl)\n\n    /**\n     * we must insert inherited gap values in some cases:\n     * if we are inside media query && if we have no grid-gap value\n     */\n    let inheritedGap = inheritGridGap(decl, gap)\n\n    let { rows, columns, areas } = parseTemplate({\n      decl,\n      gap: inheritedGap || gap\n    })\n\n    let hasAreas = Object.keys(areas).length > 0\n    let hasRows = Boolean(rows)\n    let hasColumns = Boolean(columns)\n\n    warnGridGap({\n      gap,\n      hasColumns,\n      decl,\n      result\n    })\n\n    warnMissedAreas(areas, decl, result)\n\n    if ((hasRows && hasColumns) || hasAreas) {\n      decl.cloneBefore({\n        prop: '-ms-grid-rows',\n        value: rows,\n        raws: {}\n      })\n    }\n\n    if (hasColumns) {\n      decl.cloneBefore({\n        prop: '-ms-grid-columns',\n        value: columns,\n        raws: {}\n      })\n    }\n\n    return decl\n  }\n}\n\nGridTemplate.names = ['grid-template']\n\nmodule.exports = GridTemplate\n","let Declaration = require('../declaration')\n\nclass InlineLogical extends Declaration {\n  /**\n   * Use old syntax for -moz- and -webkit-\n   */\n  prefixed(prop, prefix) {\n    return prefix + prop.replace('-inline', '')\n  }\n\n  /**\n   * Return property name by spec\n   */\n  normalize(prop) {\n    return prop.replace(/(margin|padding|border)-(start|end)/, '$1-inline-$2')\n  }\n}\n\nInlineLogical.names = [\n  'border-inline-start',\n  'border-inline-end',\n  'margin-inline-start',\n  'margin-inline-end',\n  'padding-inline-start',\n  'padding-inline-end',\n  'border-start',\n  'border-end',\n  'margin-start',\n  'margin-end',\n  'padding-start',\n  'padding-end'\n]\n\nmodule.exports = InlineLogical\n","let Declaration = require('../declaration')\n\nclass GridRowAlign extends Declaration {\n  /**\n   * Do not prefix flexbox values\n   */\n  check(decl) {\n    return !decl.value.includes('flex-') && decl.value !== 'baseline'\n  }\n\n  /**\n   * Change property name for IE\n   */\n  prefixed(prop, prefix) {\n    return prefix + 'grid-row-align'\n  }\n\n  /**\n   * Change IE property back\n   */\n  normalize() {\n    return 'align-self'\n  }\n}\n\nGridRowAlign.names = ['grid-row-align']\n\nmodule.exports = GridRowAlign\n","let Declaration = require('../declaration')\n\nclass TransformDecl extends Declaration {\n  /**\n   * Recursively check all parents for @keyframes\n   */\n  keyframeParents(decl) {\n    let { parent } = decl\n    while (parent) {\n      if (parent.type === 'atrule' && parent.name === 'keyframes') {\n        return true\n      }\n      ;({ parent } = parent)\n    }\n    return false\n  }\n\n  /**\n   * Is transform contain 3D commands\n   */\n  contain3d(decl) {\n    if (decl.prop === 'transform-origin') {\n      return false\n    }\n\n    for (let func of TransformDecl.functions3d) {\n      if (decl.value.includes(`${func}(`)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Replace rotateZ to rotate for IE 9\n   */\n  set(decl, prefix) {\n    decl = super.set(decl, prefix)\n    if (prefix === '-ms-') {\n      decl.value = decl.value.replace(/rotatez/gi, 'rotate')\n    }\n    return decl\n  }\n\n  /**\n   * Don't add prefix for IE in keyframes\n   */\n  insert(decl, prefix, prefixes) {\n    if (prefix === '-ms-') {\n      if (!this.contain3d(decl) && !this.keyframeParents(decl)) {\n        return super.insert(decl, prefix, prefixes)\n      }\n    } else if (prefix === '-o-') {\n      if (!this.contain3d(decl)) {\n        return super.insert(decl, prefix, prefixes)\n      }\n    } else {\n      return super.insert(decl, prefix, prefixes)\n    }\n    return undefined\n  }\n}\n\nTransformDecl.names = ['transform', 'transform-origin']\n\nTransformDecl.functions3d = [\n  'matrix3d',\n  'translate3d',\n  'translateZ',\n  'scale3d',\n  'scaleZ',\n  'rotate3d',\n  'rotateX',\n  'rotateY',\n  'perspective'\n]\n\nmodule.exports = TransformDecl\n","let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass FlexDirection extends Declaration {\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'flex-direction'\n  }\n\n  /**\n   * Use two properties for 2009 spec\n   */\n  insert(decl, prefix, prefixes) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec !== 2009) {\n      return super.insert(decl, prefix, prefixes)\n    }\n    let already = decl.parent.some(\n      i =>\n        i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction'\n    )\n    if (already) {\n      return undefined\n    }\n\n    let v = decl.value\n    let orient, dir\n    if (v === 'inherit' || v === 'initial' || v === 'unset') {\n      orient = v\n      dir = v\n    } else {\n      orient = v.includes('row') ? 'horizontal' : 'vertical'\n      dir = v.includes('reverse') ? 'reverse' : 'normal'\n    }\n\n    let cloned = this.clone(decl)\n    cloned.prop = prefix + 'box-orient'\n    cloned.value = orient\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    decl.parent.insertBefore(decl, cloned)\n\n    cloned = this.clone(decl)\n    cloned.prop = prefix + 'box-direction'\n    cloned.value = dir\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    return decl.parent.insertBefore(decl, cloned)\n  }\n\n  /**\n   * Clean two properties for 2009 spec\n   */\n  old(prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2009) {\n      return [prefix + 'box-orient', prefix + 'box-direction']\n    } else {\n      return super.old(prop, prefix)\n    }\n  }\n}\n\nFlexDirection.names = ['flex-direction', 'box-direction', 'box-orient']\n\nmodule.exports = FlexDirection\n","let Declaration = require('../declaration')\n\nclass ImageRendering extends Declaration {\n  /**\n   * Add hack only for crisp-edges\n   */\n  check(decl) {\n    return decl.value === 'pixelated'\n  }\n\n  /**\n   * Change property name for IE\n   */\n  prefixed(prop, prefix) {\n    if (prefix === '-ms-') {\n      return '-ms-interpolation-mode'\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Change property and value for IE\n   */\n  set(decl, prefix) {\n    if (prefix !== '-ms-') return super.set(decl, prefix)\n    decl.prop = '-ms-interpolation-mode'\n    decl.value = 'nearest-neighbor'\n    return decl\n  }\n\n  /**\n   * Return property name by spec\n   */\n  normalize() {\n    return 'image-rendering'\n  }\n\n  /**\n   * Warn on old value\n   */\n  process(node, result) {\n    return super.process(node, result)\n  }\n}\n\nImageRendering.names = ['image-rendering', 'interpolation-mode']\n\nmodule.exports = ImageRendering\n","let Declaration = require('../declaration')\nlet utils = require('../utils')\n\nclass BackdropFilter extends Declaration {\n  constructor(name, prefixes, all) {\n    super(name, prefixes, all)\n\n    if (this.prefixes) {\n      this.prefixes = utils.uniq(\n        this.prefixes.map(i => {\n          return i === '-ms-' ? '-webkit-' : i\n        })\n      )\n    }\n  }\n}\n\nBackdropFilter.names = ['backdrop-filter']\n\nmodule.exports = BackdropFilter\n","let Declaration = require('../declaration')\nlet utils = require('../utils')\n\nclass BackgroundClip extends Declaration {\n  constructor(name, prefixes, all) {\n    super(name, prefixes, all)\n\n    if (this.prefixes) {\n      this.prefixes = utils.uniq(\n        this.prefixes.map(i => {\n          return i === '-ms-' ? '-webkit-' : i\n        })\n      )\n    }\n  }\n\n  check(decl) {\n    return decl.value.toLowerCase() === 'text'\n  }\n}\n\nBackgroundClip.names = ['background-clip']\n\nmodule.exports = BackgroundClip\n","let Declaration = require('../declaration')\n\nconst BASIC = [\n  'none',\n  'underline',\n  'overline',\n  'line-through',\n  'blink',\n  'inherit',\n  'initial',\n  'unset'\n]\n\nclass TextDecoration extends Declaration {\n  /**\n   * Do not add prefixes for basic values.\n   */\n  check(decl) {\n    return decl.value.split(/\\s+/).some(i => !BASIC.includes(i))\n  }\n}\n\nTextDecoration.names = ['text-decoration']\n\nmodule.exports = TextDecoration\n","let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass JustifyContent extends Declaration {\n  /**\n   * Change property name for 2009 and 2012 specs\n   */\n  prefixed(prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2009) {\n      return prefix + 'box-pack'\n    }\n    if (spec === 2012) {\n      return prefix + 'flex-pack'\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'justify-content'\n  }\n\n  /**\n   * Change value for 2009 and 2012 specs\n   */\n  set(decl, prefix) {\n    let spec = flexSpec(prefix)[0]\n    if (spec === 2009 || spec === 2012) {\n      let value = JustifyContent.oldValues[decl.value] || decl.value\n      decl.value = value\n      if (spec !== 2009 || value !== 'distribute') {\n        return super.set(decl, prefix)\n      }\n    } else if (spec === 'final') {\n      return super.set(decl, prefix)\n    }\n    return undefined\n  }\n}\n\nJustifyContent.names = ['justify-content', 'flex-pack', 'box-pack']\n\nJustifyContent.oldValues = {\n  'flex-end': 'end',\n  'flex-start': 'start',\n  'space-between': 'justify',\n  'space-around': 'distribute'\n}\n\nmodule.exports = JustifyContent\n","let Declaration = require('../declaration')\n\nclass BackgroundSize extends Declaration {\n  /**\n   * Duplication parameter for -webkit- browsers\n   */\n  set(decl, prefix) {\n    let value = decl.value.toLowerCase()\n    if (\n      prefix === '-webkit-' &&\n      !value.includes(' ') &&\n      value !== 'contain' &&\n      value !== 'cover'\n    ) {\n      decl.value = decl.value + ' ' + decl.value\n    }\n    return super.set(decl, prefix)\n  }\n}\n\nBackgroundSize.names = ['background-size']\n\nmodule.exports = BackgroundSize\n","let Declaration = require('../declaration')\nlet utils = require('./grid-utils')\n\nclass GridRowColumn extends Declaration {\n  /**\n   * Translate grid-row / grid-column to separate -ms- prefixed properties\n   */\n  insert(decl, prefix, prefixes) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    let values = utils.parse(decl)\n    let [start, span] = utils.translate(values, 0, 1)\n\n    let hasStartValueSpan = values[0] && values[0].includes('span')\n\n    if (hasStartValueSpan) {\n      span = values[0].join('').replace(/\\D/g, '')\n    }\n\n    ;[\n      [decl.prop, start],\n      [`${decl.prop}-span`, span]\n    ].forEach(([prop, value]) => {\n      utils.insertDecl(decl, prop, value)\n    })\n\n    return undefined\n  }\n}\n\nGridRowColumn.names = ['grid-row', 'grid-column']\n\nmodule.exports = GridRowColumn\n","let Declaration = require('../declaration')\nlet {\n  prefixTrackProp,\n  prefixTrackValue,\n  autoplaceGridItems,\n  getGridGap,\n  inheritGridGap\n} = require('./grid-utils')\nlet Processor = require('../processor')\n\nclass GridRowsColumns extends Declaration {\n  /**\n   * Change property name for IE\n   */\n  prefixed(prop, prefix) {\n    if (prefix === '-ms-') {\n      return prefixTrackProp({ prop, prefix })\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Change IE property back\n   */\n  normalize(prop) {\n    return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1')\n  }\n\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    let { parent, prop, value } = decl\n    let isRowProp = prop.includes('rows')\n    let isColumnProp = prop.includes('columns')\n\n    let hasGridTemplate = parent.some(\n      i => i.prop === 'grid-template' || i.prop === 'grid-template-areas'\n    )\n\n    /**\n     * Not to prefix rows declaration if grid-template(-areas) is present\n     */\n    if (hasGridTemplate && isRowProp) {\n      return false\n    }\n\n    let processor = new Processor({ options: {} })\n    let status = processor.gridStatus(parent, result)\n    let gap = getGridGap(decl)\n    gap = inheritGridGap(decl, gap) || gap\n\n    let gapValue = isRowProp ? gap.row : gap.column\n\n    if ((status === 'no-autoplace' || status === true) && !hasGridTemplate) {\n      gapValue = null\n    }\n\n    let prefixValue = prefixTrackValue({\n      value,\n      gap: gapValue\n    })\n\n    /**\n     * Insert prefixes\n     */\n    decl.cloneBefore({\n      prop: prefixTrackProp({ prop, prefix }),\n      value: prefixValue\n    })\n\n    let autoflow = parent.nodes.find(i => i.prop === 'grid-auto-flow')\n    let autoflowValue = 'row'\n\n    if (autoflow && !processor.disabled(autoflow, result)) {\n      autoflowValue = autoflow.value.trim()\n    }\n    if (status === 'autoplace') {\n      /**\n       * Show warning if grid-template-rows decl is not found\n       */\n      let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows')\n\n      if (!rowDecl && hasGridTemplate) {\n        return undefined\n      } else if (!rowDecl && !hasGridTemplate) {\n        decl.warn(\n          result,\n          'Autoplacement does not work without grid-template-rows property'\n        )\n        return undefined\n      }\n\n      /**\n       * Show warning if grid-template-columns decl is not found\n       */\n      let columnDecl = parent.nodes.find(i => {\n        return i.prop === 'grid-template-columns'\n      })\n      if (!columnDecl && !hasGridTemplate) {\n        decl.warn(\n          result,\n          'Autoplacement does not work without grid-template-columns property'\n        )\n      }\n\n      /**\n       * Autoplace grid items\n       */\n      if (isColumnProp && !hasGridTemplate) {\n        autoplaceGridItems(decl, result, gap, autoflowValue)\n      }\n    }\n\n    return undefined\n  }\n}\n\nGridRowsColumns.names = [\n  'grid-template-rows',\n  'grid-template-columns',\n  'grid-rows',\n  'grid-columns'\n]\n\nmodule.exports = GridRowsColumns\n","let Declaration = require('../declaration')\n\nclass GridColumnAlign extends Declaration {\n  /**\n   * Do not prefix flexbox values\n   */\n  check(decl) {\n    return !decl.value.includes('flex-') && decl.value !== 'baseline'\n  }\n\n  /**\n   * Change property name for IE\n   */\n  prefixed(prop, prefix) {\n    return prefix + 'grid-column-align'\n  }\n\n  /**\n   * Change IE property back\n   */\n  normalize() {\n    return 'justify-self'\n  }\n}\n\nGridColumnAlign.names = ['grid-column-align']\n\nmodule.exports = GridColumnAlign\n","let Declaration = require('../declaration')\n\nclass PrintColorAdjust extends Declaration {\n  /**\n   * Change property name for WebKit-based browsers\n   */\n  prefixed(prop, prefix) {\n    if (prefix === '-moz-') {\n      return 'color-adjust'\n    } else {\n      return prefix + 'print-color-adjust'\n    }\n  }\n\n  /**\n   * Return property name by spec\n   */\n  normalize() {\n    return 'print-color-adjust'\n  }\n}\n\nPrintColorAdjust.names = ['print-color-adjust', 'color-adjust']\n\nmodule.exports = PrintColorAdjust\n","let Declaration = require('../declaration')\n\nclass OverscrollBehavior extends Declaration {\n  /**\n   * Change property name for IE\n   */\n  prefixed(prop, prefix) {\n    return prefix + 'scroll-chaining'\n  }\n\n  /**\n   * Return property name by spec\n   */\n  normalize() {\n    return 'overscroll-behavior'\n  }\n\n  /**\n   * Change value for IE\n   */\n  set(decl, prefix) {\n    if (decl.value === 'auto') {\n      decl.value = 'chained'\n    } else if (decl.value === 'none' || decl.value === 'contain') {\n      decl.value = 'none'\n    }\n    return super.set(decl, prefix)\n  }\n}\n\nOverscrollBehavior.names = ['overscroll-behavior', 'scroll-chaining']\n\nmodule.exports = OverscrollBehavior\n","let Declaration = require('../declaration')\nlet {\n  parseGridAreas,\n  warnMissedAreas,\n  prefixTrackProp,\n  prefixTrackValue,\n  getGridGap,\n  warnGridGap,\n  inheritGridGap\n} = require('./grid-utils')\n\nfunction getGridRows(tpl) {\n  return tpl\n    .trim()\n    .slice(1, -1)\n    .split(/[\"']\\s*[\"']?/g)\n}\n\nclass GridTemplateAreas extends Declaration {\n  /**\n   * Translate grid-template-areas to separate -ms- prefixed properties\n   */\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    let hasColumns = false\n    let hasRows = false\n    let parent = decl.parent\n    let gap = getGridGap(decl)\n    gap = inheritGridGap(decl, gap) || gap\n\n    // remove already prefixed rows\n    // to prevent doubling prefixes\n    parent.walkDecls(/-ms-grid-rows/, i => i.remove())\n\n    // add empty tracks to rows\n    parent.walkDecls(/grid-template-(rows|columns)/, trackDecl => {\n      if (trackDecl.prop === 'grid-template-rows') {\n        hasRows = true\n        let { prop, value } = trackDecl\n        trackDecl.cloneBefore({\n          prop: prefixTrackProp({ prop, prefix }),\n          value: prefixTrackValue({ value, gap: gap.row })\n        })\n      } else {\n        hasColumns = true\n      }\n    })\n\n    let gridRows = getGridRows(decl.value)\n\n    if (hasColumns && !hasRows && gap.row && gridRows.length > 1) {\n      decl.cloneBefore({\n        prop: '-ms-grid-rows',\n        value: prefixTrackValue({\n          value: `repeat(${gridRows.length}, auto)`,\n          gap: gap.row\n        }),\n        raws: {}\n      })\n    }\n\n    // warnings\n    warnGridGap({\n      gap,\n      hasColumns,\n      decl,\n      result\n    })\n\n    let areas = parseGridAreas({\n      rows: gridRows,\n      gap\n    })\n\n    warnMissedAreas(areas, decl, result)\n\n    return decl\n  }\n}\n\nGridTemplateAreas.names = ['grid-template-areas']\n\nmodule.exports = GridTemplateAreas\n","let Declaration = require('../declaration')\n\nclass TextEmphasisPosition extends Declaration {\n  set(decl, prefix) {\n    if (prefix === '-webkit-') {\n      decl.value = decl.value.replace(/\\s*(right|left)\\s*/i, '')\n    }\n    return super.set(decl, prefix)\n  }\n}\n\nTextEmphasisPosition.names = ['text-emphasis-position']\n\nmodule.exports = TextEmphasisPosition\n","let Declaration = require('../declaration')\n\nclass TextDecorationSkipInk extends Declaration {\n  /**\n   * Change prefix for ink value\n   */\n  set(decl, prefix) {\n    if (decl.prop === 'text-decoration-skip-ink' && decl.value === 'auto') {\n      decl.prop = prefix + 'text-decoration-skip'\n      decl.value = 'ink'\n      return decl\n    } else {\n      return super.set(decl, prefix)\n    }\n  }\n}\n\nTextDecorationSkipInk.names = [\n  'text-decoration-skip-ink',\n  'text-decoration-skip'\n]\n\nmodule.exports = TextDecorationSkipInk\n","let parser = require('postcss-value-parser')\nlet range = require('normalize-range')\n\nlet OldValue = require('../old-value')\nlet Value = require('../value')\nlet utils = require('../utils')\n\nlet IS_DIRECTION = /top|left|right|bottom/gi\n\nclass Gradient extends Value {\n  /**\n   * Change degrees for webkit prefix\n   */\n  replace(string, prefix) {\n    let ast = parser(string)\n    for (let node of ast.nodes) {\n      let gradientName = this.name // gradient name\n      if (node.type === 'function' && node.value === gradientName) {\n        node.nodes = this.newDirection(node.nodes)\n        node.nodes = this.normalize(node.nodes, gradientName)\n        if (prefix === '-webkit- old') {\n          let changes = this.oldWebkit(node)\n          if (!changes) {\n            return false\n          }\n        } else {\n          node.nodes = this.convertDirection(node.nodes)\n          node.value = prefix + node.value\n        }\n      }\n    }\n    return ast.toString()\n  }\n\n  /**\n   * Replace first token\n   */\n  replaceFirst(params, ...words) {\n    let prefix = words.map(i => {\n      if (i === ' ') {\n        return { type: 'space', value: i }\n      }\n      return { type: 'word', value: i }\n    })\n    return prefix.concat(params.slice(1))\n  }\n\n  /**\n   * Convert angle unit to deg\n   */\n  normalizeUnit(str, full) {\n    let num = parseFloat(str)\n    let deg = (num / full) * 360\n    return `${deg}deg`\n  }\n\n  /**\n   * Normalize angle\n   */\n  normalize(nodes, gradientName) {\n    if (!nodes[0]) return nodes\n\n    if (/-?\\d+(.\\d+)?grad/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 400)\n    } else if (/-?\\d+(.\\d+)?rad/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 2 * Math.PI)\n    } else if (/-?\\d+(.\\d+)?turn/.test(nodes[0].value)) {\n      nodes[0].value = this.normalizeUnit(nodes[0].value, 1)\n    } else if (nodes[0].value.includes('deg')) {\n      let num = parseFloat(nodes[0].value)\n      num = range.wrap(0, 360, num)\n      nodes[0].value = `${num}deg`\n    }\n\n    if (\n      gradientName === 'linear-gradient' ||\n      gradientName === 'repeating-linear-gradient'\n    ) {\n      let direction = nodes[0].value\n\n      // Unitless zero for `<angle>` values are allowed in CSS gradients and transforms.\n      // Spec: https://github.com/w3c/csswg-drafts/commit/602789171429b2231223ab1e5acf8f7f11652eb3\n      if (direction === '0deg' || direction === '0') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'top')\n      } else if (direction === '90deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'right')\n      } else if (direction === '180deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'bottom') // default value\n      } else if (direction === '270deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'left')\n      }\n    }\n\n    return nodes\n  }\n\n  /**\n   * Replace old direction to new\n   */\n  newDirection(params) {\n    if (params[0].value === 'to') {\n      return params\n    }\n    IS_DIRECTION.lastIndex = 0 // reset search index of global regexp\n    if (!IS_DIRECTION.test(params[0].value)) {\n      return params\n    }\n\n    params.unshift(\n      {\n        type: 'word',\n        value: 'to'\n      },\n      {\n        type: 'space',\n        value: ' '\n      }\n    )\n\n    for (let i = 2; i < params.length; i++) {\n      if (params[i].type === 'div') {\n        break\n      }\n      if (params[i].type === 'word') {\n        params[i].value = this.revertDirection(params[i].value)\n      }\n    }\n\n    return params\n  }\n\n  /**\n   * Look for at word\n   */\n  isRadial(params) {\n    let state = 'before'\n    for (let param of params) {\n      if (state === 'before' && param.type === 'space') {\n        state = 'at'\n      } else if (state === 'at' && param.value === 'at') {\n        state = 'after'\n      } else if (state === 'after' && param.type === 'space') {\n        return true\n      } else if (param.type === 'div') {\n        break\n      } else {\n        state = 'before'\n      }\n    }\n    return false\n  }\n\n  /**\n   * Change new direction to old\n   */\n  convertDirection(params) {\n    if (params.length > 0) {\n      if (params[0].value === 'to') {\n        this.fixDirection(params)\n      } else if (params[0].value.includes('deg')) {\n        this.fixAngle(params)\n      } else if (this.isRadial(params)) {\n        this.fixRadial(params)\n      }\n    }\n    return params\n  }\n\n  /**\n   * Replace `to top left` to `bottom right`\n   */\n  fixDirection(params) {\n    params.splice(0, 2)\n\n    for (let param of params) {\n      if (param.type === 'div') {\n        break\n      }\n      if (param.type === 'word') {\n        param.value = this.revertDirection(param.value)\n      }\n    }\n  }\n\n  /**\n   * Add 90 degrees\n   */\n  fixAngle(params) {\n    let first = params[0].value\n    first = parseFloat(first)\n    first = Math.abs(450 - first) % 360\n    first = this.roundFloat(first, 3)\n    params[0].value = `${first}deg`\n  }\n\n  /**\n   * Fix radial direction syntax\n   */\n  fixRadial(params) {\n    let first = []\n    let second = []\n    let a, b, c, i, next\n\n    for (i = 0; i < params.length - 2; i++) {\n      a = params[i]\n      b = params[i + 1]\n      c = params[i + 2]\n      if (a.type === 'space' && b.value === 'at' && c.type === 'space') {\n        next = i + 3\n        break\n      } else {\n        first.push(a)\n      }\n    }\n\n    let div\n    for (i = next; i < params.length; i++) {\n      if (params[i].type === 'div') {\n        div = params[i]\n        break\n      } else {\n        second.push(params[i])\n      }\n    }\n\n    params.splice(0, i, ...second, div, ...first)\n  }\n\n  revertDirection(word) {\n    return Gradient.directions[word.toLowerCase()] || word\n  }\n\n  /**\n   * Round float and save digits under dot\n   */\n  roundFloat(float, digits) {\n    return parseFloat(float.toFixed(digits))\n  }\n\n  /**\n   * Convert to old webkit syntax\n   */\n  oldWebkit(node) {\n    let { nodes } = node\n    let string = parser.stringify(node.nodes)\n\n    if (this.name !== 'linear-gradient') {\n      return false\n    }\n    if (nodes[0] && nodes[0].value.includes('deg')) {\n      return false\n    }\n    if (\n      string.includes('px') ||\n      string.includes('-corner') ||\n      string.includes('-side')\n    ) {\n      return false\n    }\n\n    let params = [[]]\n    for (let i of nodes) {\n      params[params.length - 1].push(i)\n      if (i.type === 'div' && i.value === ',') {\n        params.push([])\n      }\n    }\n\n    this.oldDirection(params)\n    this.colorStops(params)\n\n    node.nodes = []\n    for (let param of params) {\n      node.nodes = node.nodes.concat(param)\n    }\n\n    node.nodes.unshift(\n      { type: 'word', value: 'linear' },\n      this.cloneDiv(node.nodes)\n    )\n    node.value = '-webkit-gradient'\n\n    return true\n  }\n\n  /**\n   * Change direction syntax to old webkit\n   */\n  oldDirection(params) {\n    let div = this.cloneDiv(params[0])\n\n    if (params[0][0].value !== 'to') {\n      return params.unshift([\n        { type: 'word', value: Gradient.oldDirections.bottom },\n        div\n      ])\n    } else {\n      let words = []\n      for (let node of params[0].slice(2)) {\n        if (node.type === 'word') {\n          words.push(node.value.toLowerCase())\n        }\n      }\n\n      words = words.join(' ')\n      let old = Gradient.oldDirections[words] || words\n\n      params[0] = [{ type: 'word', value: old }, div]\n      return params[0]\n    }\n  }\n\n  /**\n   * Get div token from exists parameters\n   */\n  cloneDiv(params) {\n    for (let i of params) {\n      if (i.type === 'div' && i.value === ',') {\n        return i\n      }\n    }\n    return { type: 'div', value: ',', after: ' ' }\n  }\n\n  /**\n   * Change colors syntax to old webkit\n   */\n  colorStops(params) {\n    let result = []\n    for (let i = 0; i < params.length; i++) {\n      let pos\n      let param = params[i]\n      let item\n      if (i === 0) {\n        continue\n      }\n\n      let color = parser.stringify(param[0])\n      if (param[1] && param[1].type === 'word') {\n        pos = param[1].value\n      } else if (param[2] && param[2].type === 'word') {\n        pos = param[2].value\n      }\n\n      let stop\n      if (i === 1 && (!pos || pos === '0%')) {\n        stop = `from(${color})`\n      } else if (i === params.length - 1 && (!pos || pos === '100%')) {\n        stop = `to(${color})`\n      } else if (pos) {\n        stop = `color-stop(${pos}, ${color})`\n      } else {\n        stop = `color-stop(${color})`\n      }\n\n      let div = param[param.length - 1]\n      params[i] = [{ type: 'word', value: stop }]\n      if (div.type === 'div' && div.value === ',') {\n        item = params[i].push(div)\n      }\n      result.push(item)\n    }\n    return result\n  }\n\n  /**\n   * Remove old WebKit gradient too\n   */\n  old(prefix) {\n    if (prefix === '-webkit-') {\n      let type\n      if (this.name === 'linear-gradient') {\n        type = 'linear'\n      } else if (this.name === 'repeating-linear-gradient') {\n        type = 'repeating-linear'\n      } else if (this.name === 'repeating-radial-gradient') {\n        type = 'repeating-radial'\n      } else {\n        type = 'radial'\n      }\n      let string = '-gradient'\n      let regexp = utils.regexp(\n        `-webkit-(${type}-gradient|gradient\\\\(\\\\s*${type})`,\n        false\n      )\n\n      return new OldValue(this.name, prefix + this.name, string, regexp)\n    } else {\n      return super.old(prefix)\n    }\n  }\n\n  /**\n   * Do not add non-webkit prefixes for list-style and object\n   */\n  add(decl, prefix) {\n    let p = decl.prop\n    if (p.includes('mask')) {\n      if (prefix === '-webkit-' || prefix === '-webkit- old') {\n        return super.add(decl, prefix)\n      }\n    } else if (\n      p === 'list-style' ||\n      p === 'list-style-image' ||\n      p === 'content'\n    ) {\n      if (prefix === '-webkit-' || prefix === '-webkit- old') {\n        return super.add(decl, prefix)\n      }\n    } else {\n      return super.add(decl, prefix)\n    }\n    return undefined\n  }\n}\n\nGradient.names = [\n  'linear-gradient',\n  'repeating-linear-gradient',\n  'radial-gradient',\n  'repeating-radial-gradient'\n]\n\nGradient.directions = {\n  top: 'bottom', // default value\n  left: 'right',\n  bottom: 'top',\n  right: 'left'\n}\n\n// Direction to replace\nGradient.oldDirections = {\n  'top': 'left bottom, left top',\n  'left': 'right top, left top',\n  'bottom': 'left top, left bottom',\n  'right': 'left top, right top',\n\n  'top right': 'left bottom, right top',\n  'top left': 'right bottom, left top',\n  'right top': 'left bottom, right top',\n  'right bottom': 'left top, right bottom',\n  'bottom right': 'left top, right bottom',\n  'bottom left': 'right top, left bottom',\n  'left top': 'right bottom, left top',\n  'left bottom': 'right top, left bottom'\n}\n\nmodule.exports = Gradient\n","let OldValue = require('../old-value')\nlet Value = require('../value')\n\nfunction regexp(name) {\n  return new RegExp(`(^|[\\\\s,(])(${name}($|[\\\\s),]))`, 'gi')\n}\n\nclass Intrinsic extends Value {\n  regexp() {\n    if (!this.regexpCache) this.regexpCache = regexp(this.name)\n    return this.regexpCache\n  }\n\n  isStretch() {\n    return (\n      this.name === 'stretch' ||\n      this.name === 'fill' ||\n      this.name === 'fill-available'\n    )\n  }\n\n  replace(string, prefix) {\n    if (prefix === '-moz-' && this.isStretch()) {\n      return string.replace(this.regexp(), '$1-moz-available$3')\n    }\n    if (prefix === '-webkit-' && this.isStretch()) {\n      return string.replace(this.regexp(), '$1-webkit-fill-available$3')\n    }\n    return super.replace(string, prefix)\n  }\n\n  old(prefix) {\n    let prefixed = prefix + this.name\n    if (this.isStretch()) {\n      if (prefix === '-moz-') {\n        prefixed = '-moz-available'\n      } else if (prefix === '-webkit-') {\n        prefixed = '-webkit-fill-available'\n      }\n    }\n    return new OldValue(this.name, prefixed, prefixed, regexp(prefixed))\n  }\n\n  add(decl, prefix) {\n    if (decl.prop.includes('grid') && prefix !== '-webkit-') {\n      return undefined\n    }\n    return super.add(decl, prefix)\n  }\n}\n\nIntrinsic.names = [\n  'max-content',\n  'min-content',\n  'fit-content',\n  'fill',\n  'fill-available',\n  'stretch'\n]\n\nmodule.exports = Intrinsic\n","let OldValue = require('../old-value')\nlet Value = require('../value')\n\nclass Pixelated extends Value {\n  /**\n   * Use non-standard name for WebKit and Firefox\n   */\n  replace(string, prefix) {\n    if (prefix === '-webkit-') {\n      return string.replace(this.regexp(), '$1-webkit-optimize-contrast')\n    }\n    if (prefix === '-moz-') {\n      return string.replace(this.regexp(), '$1-moz-crisp-edges')\n    }\n    return super.replace(string, prefix)\n  }\n\n  /**\n   * Different name for WebKit and Firefox\n   */\n  old(prefix) {\n    if (prefix === '-webkit-') {\n      return new OldValue(this.name, '-webkit-optimize-contrast')\n    }\n    if (prefix === '-moz-') {\n      return new OldValue(this.name, '-moz-crisp-edges')\n    }\n    return super.old(prefix)\n  }\n}\n\nPixelated.names = ['pixelated']\n\nmodule.exports = Pixelated\n","let Value = require('../value')\n\nclass ImageSet extends Value {\n  /**\n   * Use non-standard name for WebKit and Firefox\n   */\n  replace(string, prefix) {\n    let fixed = super.replace(string, prefix)\n    if (prefix === '-webkit-') {\n      fixed = fixed.replace(/(\"[^\"]+\"|'[^']+')(\\s+\\d+\\w)/gi, 'url($1)$2')\n    }\n    return fixed\n  }\n}\n\nImageSet.names = ['image-set']\n\nmodule.exports = ImageSet\n","let list = require('postcss').list\n\nlet Value = require('../value')\n\nclass CrossFade extends Value {\n  replace(string, prefix) {\n    return list\n      .space(string)\n      .map(value => {\n        if (value.slice(0, +this.name.length + 1) !== this.name + '(') {\n          return value\n        }\n\n        let close = value.lastIndexOf(')')\n        let after = value.slice(close + 1)\n        let args = value.slice(this.name.length + 1, close)\n\n        if (prefix === '-webkit-') {\n          let match = args.match(/\\d*.?\\d+%?/)\n          if (match) {\n            args = args.slice(match[0].length).trim()\n            args += `, ${match[0]}`\n          } else {\n            args += ', 0.5'\n          }\n        }\n        return prefix + this.name + '(' + args + ')' + after\n      })\n      .join(' ')\n  }\n}\n\nCrossFade.names = ['cross-fade']\n\nmodule.exports = CrossFade\n","let flexSpec = require('./flex-spec')\nlet OldValue = require('../old-value')\nlet Value = require('../value')\n\nclass DisplayFlex extends Value {\n  constructor(name, prefixes) {\n    super(name, prefixes)\n    if (name === 'display-flex') {\n      this.name = 'flex'\n    }\n  }\n\n  /**\n   * Faster check for flex value\n   */\n  check(decl) {\n    return decl.prop === 'display' && decl.value === this.name\n  }\n\n  /**\n   * Return value by spec\n   */\n  prefixed(prefix) {\n    let spec, value\n    ;[spec, prefix] = flexSpec(prefix)\n\n    if (spec === 2009) {\n      if (this.name === 'flex') {\n        value = 'box'\n      } else {\n        value = 'inline-box'\n      }\n    } else if (spec === 2012) {\n      if (this.name === 'flex') {\n        value = 'flexbox'\n      } else {\n        value = 'inline-flexbox'\n      }\n    } else if (spec === 'final') {\n      value = this.name\n    }\n\n    return prefix + value\n  }\n\n  /**\n   * Add prefix to value depend on flebox spec version\n   */\n  replace(string, prefix) {\n    return this.prefixed(prefix)\n  }\n\n  /**\n   * Change value for old specs\n   */\n  old(prefix) {\n    let prefixed = this.prefixed(prefix)\n    if (!prefixed) return undefined\n    return new OldValue(this.name, prefixed)\n  }\n}\n\nDisplayFlex.names = ['display-flex', 'inline-flex']\n\nmodule.exports = DisplayFlex\n","let Value = require('../value')\n\nclass DisplayGrid extends Value {\n  constructor(name, prefixes) {\n    super(name, prefixes)\n    if (name === 'display-grid') {\n      this.name = 'grid'\n    }\n  }\n\n  /**\n   * Faster check for flex value\n   */\n  check(decl) {\n    return decl.prop === 'display' && decl.value === this.name\n  }\n}\n\nDisplayGrid.names = ['display-grid', 'inline-grid']\n\nmodule.exports = DisplayGrid\n","let Value = require('../value')\n\nclass FilterValue extends Value {\n  constructor(name, prefixes) {\n    super(name, prefixes)\n    if (name === 'filter-function') {\n      this.name = 'filter'\n    }\n  }\n}\n\nFilterValue.names = ['filter', 'filter-function']\n\nmodule.exports = FilterValue\n","let Selector = require('../selector')\nlet utils = require('../utils')\n\nclass Autofill extends Selector {\n  constructor(name, prefixes, all) {\n    super(name, prefixes, all)\n\n    if (this.prefixes) {\n      this.prefixes = utils.uniq(this.prefixes.map(() => '-webkit-'))\n    }\n  }\n\n  /**\n   * Return different selectors depend on prefix\n   */\n  prefixed(prefix) {\n    if (prefix === '-webkit-') {\n      return ':-webkit-autofill'\n    }\n    return `:${prefix}autofill`\n  }\n}\n\nAutofill.names = [':autofill']\n\nmodule.exports = Autofill\n","let unpack = require('caniuse-lite/dist/unpacker/feature')\n\nfunction browsersSort(a, b) {\n  a = a.split(' ')\n  b = b.split(' ')\n  if (a[0] > b[0]) {\n    return 1\n  } else if (a[0] < b[0]) {\n    return -1\n  } else {\n    return Math.sign(parseFloat(a[1]) - parseFloat(b[1]))\n  }\n}\n\n// Convert Can I Use data\nfunction f(data, opts, callback) {\n  data = unpack(data)\n\n  if (!callback) {\n    ;[callback, opts] = [opts, {}]\n  }\n\n  let match = opts.match || /\\sx($|\\s)/\n  let need = []\n\n  for (let browser in data.stats) {\n    let versions = data.stats[browser]\n    for (let version in versions) {\n      let support = versions[version]\n      if (support.match(match)) {\n        need.push(browser + ' ' + version)\n      }\n    }\n  }\n\n  callback(need.sort(browsersSort))\n}\n\n// Add data for all properties\nlet result = {}\n\nfunction prefix(names, data) {\n  for (let name of names) {\n    result[name] = Object.assign({}, data)\n  }\n}\n\nfunction add(names, data) {\n  for (let name of names) {\n    result[name].browsers = result[name].browsers\n      .concat(data.browsers)\n      .sort(browsersSort)\n  }\n}\n\nmodule.exports = result\n\n// Border Radius\nlet prefixBorderRadius = require('caniuse-lite/data/features/border-radius')\n\nf(prefixBorderRadius, browsers =>\n  prefix(\n    [\n      'border-radius',\n      'border-top-left-radius',\n      'border-top-right-radius',\n      'border-bottom-right-radius',\n      'border-bottom-left-radius'\n    ],\n    {\n      mistakes: ['-khtml-', '-ms-', '-o-'],\n      feature: 'border-radius',\n      browsers\n    }\n  )\n)\n\n// Box Shadow\nlet prefixBoxshadow = require('caniuse-lite/data/features/css-boxshadow')\n\nf(prefixBoxshadow, browsers =>\n  prefix(['box-shadow'], {\n    mistakes: ['-khtml-'],\n    feature: 'css-boxshadow',\n    browsers\n  })\n)\n\n// Animation\nlet prefixAnimation = require('caniuse-lite/data/features/css-animation')\n\nf(prefixAnimation, browsers =>\n  prefix(\n    [\n      'animation',\n      'animation-name',\n      'animation-duration',\n      'animation-delay',\n      'animation-direction',\n      'animation-fill-mode',\n      'animation-iteration-count',\n      'animation-play-state',\n      'animation-timing-function',\n      '@keyframes'\n    ],\n    {\n      mistakes: ['-khtml-', '-ms-'],\n      feature: 'css-animation',\n      browsers\n    }\n  )\n)\n\n// Transition\nlet prefixTransition = require('caniuse-lite/data/features/css-transitions')\n\nf(prefixTransition, browsers =>\n  prefix(\n    [\n      'transition',\n      'transition-property',\n      'transition-duration',\n      'transition-delay',\n      'transition-timing-function'\n    ],\n    {\n      mistakes: ['-khtml-', '-ms-'],\n      browsers,\n      feature: 'css-transitions'\n    }\n  )\n)\n\n// Transform 2D\nlet prefixTransform2d = require('caniuse-lite/data/features/transforms2d')\n\nf(prefixTransform2d, browsers =>\n  prefix(['transform', 'transform-origin'], {\n    feature: 'transforms2d',\n    browsers\n  })\n)\n\n// Transform 3D\nlet prefixTransforms3d = require('caniuse-lite/data/features/transforms3d')\n\nf(prefixTransforms3d, browsers => {\n  prefix(['perspective', 'perspective-origin'], {\n    feature: 'transforms3d',\n    browsers\n  })\n  return prefix(['transform-style'], {\n    mistakes: ['-ms-', '-o-'],\n    browsers,\n    feature: 'transforms3d'\n  })\n})\n\nf(prefixTransforms3d, { match: /y\\sx|y\\s#2/ }, browsers =>\n  prefix(['backface-visibility'], {\n    mistakes: ['-ms-', '-o-'],\n    feature: 'transforms3d',\n    browsers\n  })\n)\n\n// Gradients\nlet prefixGradients = require('caniuse-lite/data/features/css-gradients')\n\nf(prefixGradients, { match: /y\\sx/ }, browsers =>\n  prefix(\n    [\n      'linear-gradient',\n      'repeating-linear-gradient',\n      'radial-gradient',\n      'repeating-radial-gradient'\n    ],\n    {\n      props: [\n        'background',\n        'background-image',\n        'border-image',\n        'mask',\n        'list-style',\n        'list-style-image',\n        'content',\n        'mask-image'\n      ],\n      mistakes: ['-ms-'],\n      feature: 'css-gradients',\n      browsers\n    }\n  )\n)\n\nf(prefixGradients, { match: /a\\sx/ }, browsers => {\n  browsers = browsers.map(i => {\n    if (/firefox|op/.test(i)) {\n      return i\n    } else {\n      return `${i} old`\n    }\n  })\n  return add(\n    [\n      'linear-gradient',\n      'repeating-linear-gradient',\n      'radial-gradient',\n      'repeating-radial-gradient'\n    ],\n    {\n      feature: 'css-gradients',\n      browsers\n    }\n  )\n})\n\n// Box sizing\nlet prefixBoxsizing = require('caniuse-lite/data/features/css3-boxsizing')\n\nf(prefixBoxsizing, browsers =>\n  prefix(['box-sizing'], {\n    feature: 'css3-boxsizing',\n    browsers\n  })\n)\n\n// Filter Effects\nlet prefixFilters = require('caniuse-lite/data/features/css-filters')\n\nf(prefixFilters, browsers =>\n  prefix(['filter'], {\n    feature: 'css-filters',\n    browsers\n  })\n)\n\n// filter() function\nlet prefixFilterFunction = require('caniuse-lite/data/features/css-filter-function')\n\nf(prefixFilterFunction, browsers =>\n  prefix(['filter-function'], {\n    props: [\n      'background',\n      'background-image',\n      'border-image',\n      'mask',\n      'list-style',\n      'list-style-image',\n      'content',\n      'mask-image'\n    ],\n    feature: 'css-filter-function',\n    browsers\n  })\n)\n\n// Backdrop-filter\nlet prefixBackdrop = require('caniuse-lite/data/features/css-backdrop-filter')\n\nf(prefixBackdrop, { match: /y\\sx|y\\s#2/ }, browsers =>\n  prefix(['backdrop-filter'], {\n    feature: 'css-backdrop-filter',\n    browsers\n  })\n)\n\n// element() function\nlet prefixElementFunction = require('caniuse-lite/data/features/css-element-function')\n\nf(prefixElementFunction, browsers =>\n  prefix(['element'], {\n    props: [\n      'background',\n      'background-image',\n      'border-image',\n      'mask',\n      'list-style',\n      'list-style-image',\n      'content',\n      'mask-image'\n    ],\n    feature: 'css-element-function',\n    browsers\n  })\n)\n\n// Multicolumns\nlet prefixMulticolumns = require('caniuse-lite/data/features/multicolumn')\n\nf(prefixMulticolumns, browsers => {\n  prefix(\n    [\n      'columns',\n      'column-width',\n      'column-gap',\n      'column-rule',\n      'column-rule-color',\n      'column-rule-width',\n      'column-count',\n      'column-rule-style',\n      'column-span',\n      'column-fill'\n    ],\n    {\n      feature: 'multicolumn',\n      browsers\n    }\n  )\n\n  let noff = browsers.filter(i => !/firefox/.test(i))\n  prefix(['break-before', 'break-after', 'break-inside'], {\n    feature: 'multicolumn',\n    browsers: noff\n  })\n})\n\n// User select\nlet prefixUserSelect = require('caniuse-lite/data/features/user-select-none')\n\nf(prefixUserSelect, browsers =>\n  prefix(['user-select'], {\n    mistakes: ['-khtml-'],\n    feature: 'user-select-none',\n    browsers\n  })\n)\n\n// Flexible Box Layout\nlet prefixFlexbox = require('caniuse-lite/data/features/flexbox')\n\nf(prefixFlexbox, { match: /a\\sx/ }, browsers => {\n  browsers = browsers.map(i => {\n    if (/ie|firefox/.test(i)) {\n      return i\n    } else {\n      return `${i} 2009`\n    }\n  })\n  prefix(['display-flex', 'inline-flex'], {\n    props: ['display'],\n    feature: 'flexbox',\n    browsers\n  })\n  prefix(['flex', 'flex-grow', 'flex-shrink', 'flex-basis'], {\n    feature: 'flexbox',\n    browsers\n  })\n  prefix(\n    [\n      'flex-direction',\n      'flex-wrap',\n      'flex-flow',\n      'justify-content',\n      'order',\n      'align-items',\n      'align-self',\n      'align-content'\n    ],\n    {\n      feature: 'flexbox',\n      browsers\n    }\n  )\n})\n\nf(prefixFlexbox, { match: /y\\sx/ }, browsers => {\n  add(['display-flex', 'inline-flex'], {\n    feature: 'flexbox',\n    browsers\n  })\n  add(['flex', 'flex-grow', 'flex-shrink', 'flex-basis'], {\n    feature: 'flexbox',\n    browsers\n  })\n  add(\n    [\n      'flex-direction',\n      'flex-wrap',\n      'flex-flow',\n      'justify-content',\n      'order',\n      'align-items',\n      'align-self',\n      'align-content'\n    ],\n    {\n      feature: 'flexbox',\n      browsers\n    }\n  )\n})\n\n// calc() unit\nlet prefixCalc = require('caniuse-lite/data/features/calc')\n\nf(prefixCalc, browsers =>\n  prefix(['calc'], {\n    props: ['*'],\n    feature: 'calc',\n    browsers\n  })\n)\n\n// Background options\nlet prefixBackgroundOptions = require('caniuse-lite/data/features/background-img-opts')\n\nf(prefixBackgroundOptions, browsers =>\n  prefix(['background-origin', 'background-size'], {\n    feature: 'background-img-opts',\n    browsers\n  })\n)\n\n// background-clip: text\nlet prefixBackgroundClipText = require('caniuse-lite/data/features/background-clip-text')\n\nf(prefixBackgroundClipText, browsers =>\n  prefix(['background-clip'], {\n    feature: 'background-clip-text',\n    browsers\n  })\n)\n\n// Font feature settings\nlet prefixFontFeature = require('caniuse-lite/data/features/font-feature')\n\nf(prefixFontFeature, browsers =>\n  prefix(\n    [\n      'font-feature-settings',\n      'font-variant-ligatures',\n      'font-language-override'\n    ],\n    {\n      feature: 'font-feature',\n      browsers\n    }\n  )\n)\n\n// CSS font-kerning property\nlet prefixFontKerning = require('caniuse-lite/data/features/font-kerning')\n\nf(prefixFontKerning, browsers =>\n  prefix(['font-kerning'], {\n    feature: 'font-kerning',\n    browsers\n  })\n)\n\n// Border image\nlet prefixBorderImage = require('caniuse-lite/data/features/border-image')\n\nf(prefixBorderImage, browsers =>\n  prefix(['border-image'], {\n    feature: 'border-image',\n    browsers\n  })\n)\n\n// Selection selector\nlet prefixSelection = require('caniuse-lite/data/features/css-selection')\n\nf(prefixSelection, browsers =>\n  prefix(['::selection'], {\n    selector: true,\n    feature: 'css-selection',\n    browsers\n  })\n)\n\n// Placeholder selector\nlet prefixPlaceholder = require('caniuse-lite/data/features/css-placeholder')\n\nf(prefixPlaceholder, browsers => {\n  prefix(['::placeholder'], {\n    selector: true,\n    feature: 'css-placeholder',\n    browsers: browsers.concat(['ie 10 old', 'ie 11 old', 'firefox 18 old'])\n  })\n})\n\n// Placeholder-shown selector\nlet prefixPlaceholderShown = require('caniuse-lite/data/features/css-placeholder-shown')\n\nf(prefixPlaceholderShown, browsers => {\n  prefix([':placeholder-shown'], {\n    selector: true,\n    feature: 'css-placeholder-shown',\n    browsers\n  })\n})\n\n// Hyphenation\nlet prefixHyphens = require('caniuse-lite/data/features/css-hyphens')\n\nf(prefixHyphens, browsers =>\n  prefix(['hyphens'], {\n    feature: 'css-hyphens',\n    browsers\n  })\n)\n\n// Fullscreen selector\nlet prefixFullscreen = require('caniuse-lite/data/features/fullscreen')\n\nf(prefixFullscreen, browsers =>\n  prefix([':fullscreen'], {\n    selector: true,\n    feature: 'fullscreen',\n    browsers\n  })\n)\n\nf(prefixFullscreen, { match: /x(\\s#2|$)/ }, browsers =>\n  prefix(['::backdrop'], {\n    selector: true,\n    feature: 'fullscreen',\n    browsers\n  })\n)\n\n// File selector button\nlet prefixFileSelectorButton = require('caniuse-lite/data/features/css-file-selector-button')\n\nf(prefixFileSelectorButton, browsers =>\n  prefix(['::file-selector-button'], {\n    selector: true,\n    feature: 'file-selector-button',\n    browsers\n  })\n)\n\n// :autofill\nlet prefixAutofill = require('caniuse-lite/data/features/css-autofill')\n\nf(prefixAutofill, browsers =>\n  prefix([':autofill'], {\n    selector: true,\n    feature: 'css-autofill',\n    browsers\n  })\n)\n\n// Tab size\nlet prefixTabsize = require('caniuse-lite/data/features/css3-tabsize')\n\nf(prefixTabsize, browsers =>\n  prefix(['tab-size'], {\n    feature: 'css3-tabsize',\n    browsers\n  })\n)\n\n// Intrinsic & extrinsic sizing\nlet prefixIntrinsic = require('caniuse-lite/data/features/intrinsic-width')\n\nlet sizeProps = [\n  'width',\n  'min-width',\n  'max-width',\n  'height',\n  'min-height',\n  'max-height',\n  'inline-size',\n  'min-inline-size',\n  'max-inline-size',\n  'block-size',\n  'min-block-size',\n  'max-block-size',\n  'grid',\n  'grid-template',\n  'grid-template-rows',\n  'grid-template-columns',\n  'grid-auto-columns',\n  'grid-auto-rows'\n]\n\nf(prefixIntrinsic, browsers =>\n  prefix(['max-content', 'min-content'], {\n    props: sizeProps,\n    feature: 'intrinsic-width',\n    browsers\n  })\n)\n\nf(prefixIntrinsic, { match: /x|\\s#4/ }, browsers =>\n  prefix(['fill', 'fill-available'], {\n    props: sizeProps,\n    feature: 'intrinsic-width',\n    browsers\n  })\n)\n\nf(prefixIntrinsic, { match: /x|\\s#5/ }, browsers =>\n  prefix(['fit-content'], {\n    props: sizeProps,\n    feature: 'intrinsic-width',\n    browsers\n  })\n)\n\n// Stretch value\n\nlet prefixStretch = require('caniuse-lite/data/features/css-width-stretch')\n\nf(prefixStretch, browsers =>\n  prefix(['stretch'], {\n    props: sizeProps,\n    feature: 'css-width-stretch',\n    browsers\n  })\n)\n\n// Zoom cursors\nlet prefixCursorsNewer = require('caniuse-lite/data/features/css3-cursors-newer')\n\nf(prefixCursorsNewer, browsers =>\n  prefix(['zoom-in', 'zoom-out'], {\n    props: ['cursor'],\n    feature: 'css3-cursors-newer',\n    browsers\n  })\n)\n\n// Grab cursors\nlet prefixCursorsGrab = require('caniuse-lite/data/features/css3-cursors-grab')\n\nf(prefixCursorsGrab, browsers =>\n  prefix(['grab', 'grabbing'], {\n    props: ['cursor'],\n    feature: 'css3-cursors-grab',\n    browsers\n  })\n)\n\n// Sticky position\nlet prefixSticky = require('caniuse-lite/data/features/css-sticky')\n\nf(prefixSticky, browsers =>\n  prefix(['sticky'], {\n    props: ['position'],\n    feature: 'css-sticky',\n    browsers\n  })\n)\n\n// Pointer Events\nlet prefixPointer = require('caniuse-lite/data/features/pointer')\n\nf(prefixPointer, browsers =>\n  prefix(['touch-action'], {\n    feature: 'pointer',\n    browsers\n  })\n)\n\n// Text decoration\nlet prefixDecoration = require('caniuse-lite/data/features/text-decoration')\n\nf(prefixDecoration, { match: /x.*#[235]/ }, browsers =>\n  prefix(['text-decoration-skip', 'text-decoration-skip-ink'], {\n    feature: 'text-decoration',\n    browsers\n  })\n)\n\nlet prefixDecorationShorthand = require('caniuse-lite/data/features/mdn-text-decoration-shorthand')\n\nf(prefixDecorationShorthand, browsers =>\n  prefix(['text-decoration'], {\n    feature: 'text-decoration',\n    browsers\n  })\n)\n\nlet prefixDecorationColor = require('caniuse-lite/data/features/mdn-text-decoration-color')\n\nf(prefixDecorationColor, browsers =>\n  prefix(['text-decoration-color'], {\n    feature: 'text-decoration',\n    browsers\n  })\n)\n\nlet prefixDecorationLine = require('caniuse-lite/data/features/mdn-text-decoration-line')\n\nf(prefixDecorationLine, browsers =>\n  prefix(['text-decoration-line'], {\n    feature: 'text-decoration',\n    browsers\n  })\n)\n\nlet prefixDecorationStyle = require('caniuse-lite/data/features/mdn-text-decoration-style')\n\nf(prefixDecorationStyle, browsers =>\n  prefix(['text-decoration-style'], {\n    feature: 'text-decoration',\n    browsers\n  })\n)\n\n// Text Size Adjust\nlet prefixTextSizeAdjust = require('caniuse-lite/data/features/text-size-adjust')\n\nf(prefixTextSizeAdjust, browsers =>\n  prefix(['text-size-adjust'], {\n    feature: 'text-size-adjust',\n    browsers\n  })\n)\n\n// CSS Masks\nlet prefixCssMasks = require('caniuse-lite/data/features/css-masks')\n\nf(prefixCssMasks, browsers => {\n  prefix(\n    [\n      'mask-clip',\n      'mask-composite',\n      'mask-image',\n      'mask-origin',\n      'mask-repeat',\n      'mask-border-repeat',\n      'mask-border-source'\n    ],\n    {\n      feature: 'css-masks',\n      browsers\n    }\n  )\n  prefix(\n    [\n      'mask',\n      'mask-position',\n      'mask-size',\n      'mask-border',\n      'mask-border-outset',\n      'mask-border-width',\n      'mask-border-slice'\n    ],\n    {\n      feature: 'css-masks',\n      browsers\n    }\n  )\n})\n\n// CSS clip-path property\nlet prefixClipPath = require('caniuse-lite/data/features/css-clip-path')\n\nf(prefixClipPath, browsers =>\n  prefix(['clip-path'], {\n    feature: 'css-clip-path',\n    browsers\n  })\n)\n\n// Fragmented Borders and Backgrounds\nlet prefixBoxdecoration = require('caniuse-lite/data/features/css-boxdecorationbreak')\n\nf(prefixBoxdecoration, browsers =>\n  prefix(['box-decoration-break'], {\n    feature: 'css-boxdecorationbreak',\n    browsers\n  })\n)\n\n// CSS3 object-fit/object-position\nlet prefixObjectFit = require('caniuse-lite/data/features/object-fit')\n\nf(prefixObjectFit, browsers =>\n  prefix(['object-fit', 'object-position'], {\n    feature: 'object-fit',\n    browsers\n  })\n)\n\n// CSS Shapes\nlet prefixShapes = require('caniuse-lite/data/features/css-shapes')\n\nf(prefixShapes, browsers =>\n  prefix(['shape-margin', 'shape-outside', 'shape-image-threshold'], {\n    feature: 'css-shapes',\n    browsers\n  })\n)\n\n// CSS3 text-overflow\nlet prefixTextOverflow = require('caniuse-lite/data/features/text-overflow')\n\nf(prefixTextOverflow, browsers =>\n  prefix(['text-overflow'], {\n    feature: 'text-overflow',\n    browsers\n  })\n)\n\n// Viewport at-rule\nlet prefixDeviceadaptation = require('caniuse-lite/data/features/css-deviceadaptation')\n\nf(prefixDeviceadaptation, browsers =>\n  prefix(['@viewport'], {\n    feature: 'css-deviceadaptation',\n    browsers\n  })\n)\n\n// Resolution Media Queries\nlet prefixResolut = require('caniuse-lite/data/features/css-media-resolution')\n\nf(prefixResolut, { match: /( x($| )|a #2)/ }, browsers =>\n  prefix(['@resolution'], {\n    feature: 'css-media-resolution',\n    browsers\n  })\n)\n\n// CSS text-align-last\nlet prefixTextAlignLast = require('caniuse-lite/data/features/css-text-align-last')\n\nf(prefixTextAlignLast, browsers =>\n  prefix(['text-align-last'], {\n    feature: 'css-text-align-last',\n    browsers\n  })\n)\n\n// Crisp Edges Image Rendering Algorithm\nlet prefixCrispedges = require('caniuse-lite/data/features/css-crisp-edges')\n\nf(prefixCrispedges, { match: /y x|a x #1/ }, browsers =>\n  prefix(['pixelated'], {\n    props: ['image-rendering'],\n    feature: 'css-crisp-edges',\n    browsers\n  })\n)\n\nf(prefixCrispedges, { match: /a x #2/ }, browsers =>\n  prefix(['image-rendering'], {\n    feature: 'css-crisp-edges',\n    browsers\n  })\n)\n\n// Logical Properties\nlet prefixLogicalProps = require('caniuse-lite/data/features/css-logical-props')\n\nf(prefixLogicalProps, browsers =>\n  prefix(\n    [\n      'border-inline-start',\n      'border-inline-end',\n      'margin-inline-start',\n      'margin-inline-end',\n      'padding-inline-start',\n      'padding-inline-end'\n    ],\n    {\n      feature: 'css-logical-props',\n      browsers\n    }\n  )\n)\n\nf(prefixLogicalProps, { match: /x\\s#2/ }, browsers =>\n  prefix(\n    [\n      'border-block-start',\n      'border-block-end',\n      'margin-block-start',\n      'margin-block-end',\n      'padding-block-start',\n      'padding-block-end'\n    ],\n    {\n      feature: 'css-logical-props',\n      browsers\n    }\n  )\n)\n\n// CSS appearance\nlet prefixAppearance = require('caniuse-lite/data/features/css-appearance')\n\nf(prefixAppearance, { match: /#2|x/ }, browsers =>\n  prefix(['appearance'], {\n    feature: 'css-appearance',\n    browsers\n  })\n)\n\n// CSS Scroll snap points\nlet prefixSnappoints = require('caniuse-lite/data/features/css-snappoints')\n\nf(prefixSnappoints, browsers =>\n  prefix(\n    [\n      'scroll-snap-type',\n      'scroll-snap-coordinate',\n      'scroll-snap-destination',\n      'scroll-snap-points-x',\n      'scroll-snap-points-y'\n    ],\n    {\n      feature: 'css-snappoints',\n      browsers\n    }\n  )\n)\n\n// CSS Regions\nlet prefixRegions = require('caniuse-lite/data/features/css-regions')\n\nf(prefixRegions, browsers =>\n  prefix(['flow-into', 'flow-from', 'region-fragment'], {\n    feature: 'css-regions',\n    browsers\n  })\n)\n\n// CSS image-set\nlet prefixImageSet = require('caniuse-lite/data/features/css-image-set')\n\nf(prefixImageSet, browsers =>\n  prefix(['image-set'], {\n    props: [\n      'background',\n      'background-image',\n      'border-image',\n      'cursor',\n      'mask',\n      'mask-image',\n      'list-style',\n      'list-style-image',\n      'content'\n    ],\n    feature: 'css-image-set',\n    browsers\n  })\n)\n\n// Writing Mode\nlet prefixWritingMode = require('caniuse-lite/data/features/css-writing-mode')\n\nf(prefixWritingMode, { match: /a|x/ }, browsers =>\n  prefix(['writing-mode'], {\n    feature: 'css-writing-mode',\n    browsers\n  })\n)\n\n// Cross-Fade Function\nlet prefixCrossFade = require('caniuse-lite/data/features/css-cross-fade')\n\nf(prefixCrossFade, browsers =>\n  prefix(['cross-fade'], {\n    props: [\n      'background',\n      'background-image',\n      'border-image',\n      'mask',\n      'list-style',\n      'list-style-image',\n      'content',\n      'mask-image'\n    ],\n    feature: 'css-cross-fade',\n    browsers\n  })\n)\n\n// Read Only selector\nlet prefixReadOnly = require('caniuse-lite/data/features/css-read-only-write')\n\nf(prefixReadOnly, browsers =>\n  prefix([':read-only', ':read-write'], {\n    selector: true,\n    feature: 'css-read-only-write',\n    browsers\n  })\n)\n\n// Text Emphasize\nlet prefixTextEmphasis = require('caniuse-lite/data/features/text-emphasis')\n\nf(prefixTextEmphasis, browsers =>\n  prefix(\n    [\n      'text-emphasis',\n      'text-emphasis-position',\n      'text-emphasis-style',\n      'text-emphasis-color'\n    ],\n    {\n      feature: 'text-emphasis',\n      browsers\n    }\n  )\n)\n\n// CSS Grid Layout\nlet prefixGrid = require('caniuse-lite/data/features/css-grid')\n\nf(prefixGrid, browsers => {\n  prefix(['display-grid', 'inline-grid'], {\n    props: ['display'],\n    feature: 'css-grid',\n    browsers\n  })\n  prefix(\n    [\n      'grid-template-columns',\n      'grid-template-rows',\n      'grid-row-start',\n      'grid-column-start',\n      'grid-row-end',\n      'grid-column-end',\n      'grid-row',\n      'grid-column',\n      'grid-area',\n      'grid-template',\n      'grid-template-areas',\n      'place-self'\n    ],\n    {\n      feature: 'css-grid',\n      browsers\n    }\n  )\n})\n\nf(prefixGrid, { match: /a x/ }, browsers =>\n  prefix(['grid-column-align', 'grid-row-align'], {\n    feature: 'css-grid',\n    browsers\n  })\n)\n\n// CSS text-spacing\nlet prefixTextSpacing = require('caniuse-lite/data/features/css-text-spacing')\n\nf(prefixTextSpacing, browsers =>\n  prefix(['text-spacing'], {\n    feature: 'css-text-spacing',\n    browsers\n  })\n)\n\n// :any-link selector\nlet prefixAnyLink = require('caniuse-lite/data/features/css-any-link')\n\nf(prefixAnyLink, browsers =>\n  prefix([':any-link'], {\n    selector: true,\n    feature: 'css-any-link',\n    browsers\n  })\n)\n\n// unicode-bidi\n\nlet bidiIsolate = require('caniuse-lite/data/features/mdn-css-unicode-bidi-isolate')\n\nf(bidiIsolate, browsers =>\n  prefix(['isolate'], {\n    props: ['unicode-bidi'],\n    feature: 'css-unicode-bidi',\n    browsers\n  })\n)\n\nlet bidiPlaintext = require('caniuse-lite/data/features/mdn-css-unicode-bidi-plaintext')\n\nf(bidiPlaintext, browsers =>\n  prefix(['plaintext'], {\n    props: ['unicode-bidi'],\n    feature: 'css-unicode-bidi',\n    browsers\n  })\n)\n\nlet bidiOverride = require('caniuse-lite/data/features/mdn-css-unicode-bidi-isolate-override')\n\nf(bidiOverride, { match: /y x/ }, browsers =>\n  prefix(['isolate-override'], {\n    props: ['unicode-bidi'],\n    feature: 'css-unicode-bidi',\n    browsers\n  })\n)\n\n// overscroll-behavior selector\nlet prefixOverscroll = require('caniuse-lite/data/features/css-overscroll-behavior')\n\nf(prefixOverscroll, { match: /a #1/ }, browsers =>\n  prefix(['overscroll-behavior'], {\n    feature: 'css-overscroll-behavior',\n    browsers\n  })\n)\n\n// text-orientation\nlet prefixTextOrientation = require('caniuse-lite/data/features/css-text-orientation')\n\nf(prefixTextOrientation, browsers =>\n  prefix(['text-orientation'], {\n    feature: 'css-text-orientation',\n    browsers\n  })\n)\n\n// print-color-adjust\nlet prefixPrintAdjust = require('caniuse-lite/data/features/css-print-color-adjust')\n\nf(prefixPrintAdjust, browsers =>\n  prefix(['print-color-adjust', 'color-adjust'], {\n    feature: 'css-print-color-adjust',\n    browsers\n  })\n)\n","let browserslist = require('browserslist')\n\nfunction capitalize(str) {\n  return str.slice(0, 1).toUpperCase() + str.slice(1)\n}\n\nconst NAMES = {\n  ie: 'IE',\n  ie_mob: 'IE Mobile',\n  ios_saf: 'iOS Safari',\n  op_mini: 'Opera Mini',\n  op_mob: 'Opera Mobile',\n  and_chr: 'Chrome for Android',\n  and_ff: 'Firefox for Android',\n  and_uc: 'UC for Android',\n  and_qq: 'QQ Browser',\n  kaios: 'KaiOS Browser',\n  baidu: 'Baidu Browser',\n  samsung: 'Samsung Internet'\n}\n\nfunction prefix(name, prefixes, note) {\n  let out = `  ${name}`\n  if (note) out += ' *'\n  out += ': '\n  out += prefixes.map(i => i.replace(/^-(.*)-$/g, '$1')).join(', ')\n  out += '\\n'\n  return out\n}\n\nmodule.exports = function (prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return 'No browsers selected'\n  }\n\n  let versions = {}\n  for (let browser of prefixes.browsers.selected) {\n    let parts = browser.split(' ')\n    let name = parts[0]\n    let version = parts[1]\n\n    name = NAMES[name] || capitalize(name)\n    if (versions[name]) {\n      versions[name].push(version)\n    } else {\n      versions[name] = [version]\n    }\n  }\n\n  let out = 'Browsers:\\n'\n  for (let browser in versions) {\n    let list = versions[browser]\n    list = list.sort((a, b) => parseFloat(b) - parseFloat(a))\n    out += `  ${browser}: ${list.join(', ')}\\n`\n  }\n\n  let coverage = browserslist.coverage(prefixes.browsers.selected)\n  let round = Math.round(coverage * 100) / 100.0\n  out += `\\nThese browsers account for ${round}% of all users globally\\n`\n\n  let atrules = []\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name]\n    if (name[0] === '@' && data.prefixes) {\n      atrules.push(prefix(name, data.prefixes))\n    }\n  }\n  if (atrules.length > 0) {\n    out += `\\nAt-Rules:\\n${atrules.sort().join('')}`\n  }\n\n  let selectors = []\n  for (let selector of prefixes.add.selectors) {\n    if (selector.prefixes) {\n      selectors.push(prefix(selector.name, selector.prefixes))\n    }\n  }\n  if (selectors.length > 0) {\n    out += `\\nSelectors:\\n${selectors.sort().join('')}`\n  }\n\n  let values = []\n  let props = []\n  let hadGrid = false\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name]\n    if (name[0] !== '@' && data.prefixes) {\n      let grid = name.indexOf('grid-') === 0\n      if (grid) hadGrid = true\n      props.push(prefix(name, data.prefixes, grid))\n    }\n\n    if (!Array.isArray(data.values)) {\n      continue\n    }\n    for (let value of data.values) {\n      let grid = value.name.includes('grid')\n      if (grid) hadGrid = true\n      let string = prefix(value.name, value.prefixes, grid)\n      if (!values.includes(string)) {\n        values.push(string)\n      }\n    }\n  }\n\n  if (props.length > 0) {\n    out += `\\nProperties:\\n${props.sort().join('')}`\n  }\n  if (values.length > 0) {\n    out += `\\nValues:\\n${values.sort().join('')}`\n  }\n  if (hadGrid) {\n    out += '\\n* - Prefixes will be added only on grid: true option.\\n'\n  }\n\n  if (!atrules.length && !selectors.length && !props.length && !values.length) {\n    out +=\n      \"\\nAwesome! Your browsers don't require any vendor prefixes.\" +\n      '\\nNow you can remove Autoprefixer from build steps.'\n  }\n\n  return out\n}\n"]}