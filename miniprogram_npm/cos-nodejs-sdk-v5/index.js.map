{"version":3,"sources":["index.js","sdk/cos.js","sdk/util.js","sdk/event.js","sdk/task.js","sdk/session.js","sdk/base.js","package.json","sdk/select-stream.js","sdk/advance.js","sdk/async.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,AENA,ADGA,AFMA;ADIA,AENA,AENA,ADGA,AFMA;ADIA,AENA,AENA,ADGA,AFMA;AIXA,ALeA,AENA,AENA,ADGA,AFMA;AIXA,ALeA,AENA,AENA,ADGA,AFMA;AIXA,ALeA,AENA,AENA,ADGA,AFMA;AKdA,ADGA,ALeA,AENA,AENA,ADGA,AFMA;AKdA,ADGA,ALeA,AENA,AENA,ADGA,AFMA;AKdA,ADGA,ALeA,AENA,AENA,ADGA,AFMA;AKdA,ADGA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,ADGA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,ADGA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,AHSA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,AHSA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,AHSA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AENA,AKfA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AKdA,AENA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,ACHA,AJYA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,ALeA,AOrBA,AHSA,ADGA,AFMA;AOpBA,AHSA,AENA,AHSA,ADGA,AFMA;AOpBA,AHSA,AENA,AHSA,ADGA,AFMA;AOpBA,AHSA,AENA,AHSA,ADGA,AFMA;AOpBA,AHSA,AENA,AHSA,ADGA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AENA,AJYA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AFMA,AFMA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpBA,AHSA,AJYA;AOpfile":"index.js","sourcesContent":["/**\n * 提供 npm 包引用的入口\n */\nvar COS = require('./sdk/cos');\nmodule.exports = COS;","\n\nvar util = require('./util');\nvar event = require('./event');\nvar task = require('./task');\nvar base = require('./base');\nvar advance = require('./advance');\nvar pkg = require('../package.json');\n\nvar defaultOptions = {\n    AppId: '', // AppId 已废弃，请拼接到 Bucket 后传入，例如：test-1250000000\n    SecretId: '',\n    SecretKey: '',\n    SecurityToken: '', // 使用临时密钥需要注意自行刷新 Token\n    ChunkRetryTimes: 2,\n    FileParallelLimit: 3,\n    ChunkParallelLimit: 3,\n    ChunkSize: 1024 * 1024,\n    SliceSize: 1024 * 1024,\n    CopyChunkParallelLimit: 20,\n    CopyChunkSize: 1024 * 1024 * 10,\n    CopySliceSize: 1024 * 1024 * 10,\n    MaxPartNumber: 10000,\n    ProgressInterval: 1000,\n    Domain: '',\n    ServiceDomain: '',\n    Protocol: '',\n    CompatibilityMode: false,\n    ForcePathStyle: false,\n    UseRawKey: false,\n    Timeout: 0, // 单位毫秒，0 代表不设置超时时间\n    CorrectClockSkew: true,\n    SystemClockOffset: 0, // 单位毫秒，ms\n    UploadCheckContentMd5: false,\n    UploadQueueSize: 1000,\n    UploadIdCacheLimit: 500,\n    Proxy: '',\n    Tunnel: undefined,\n    Ip: '',\n    StrictSsl: true,\n    KeepAlive: true,\n    FollowRedirect: true,\n    UseAccelerate: false,\n    UserAgent: '',\n    ConfCwd: '',\n    ForceSignHost: true, // 默认将host加入签名计算，关闭后可能导致越权风险，建议保持为true\n    // 动态秘钥，优先级Credentials > SecretId/SecretKey。注意Cred内是小写的secretId、secretKey\n    Credentials: {\n      secretId: '',\n      secretKey: '',\n    },\n};\n\nconst watch = (obj, name, callback) => {\n  let value = obj[name];\n  Object.defineProperty(obj, name, {\n    get() {\n      return value;\n    },\n    set(newValue) {\n      value = newValue;\n      callback();\n    }\n  });\n};\n\n// 对外暴露的类\nvar COS = function (options) {\n    this.options = util.extend(util.clone(defaultOptions), options || {});\n    this.options.FileParallelLimit = Math.max(1, this.options.FileParallelLimit);\n    this.options.ChunkParallelLimit = Math.max(1, this.options.ChunkParallelLimit);\n    this.options.ChunkRetryTimes = Math.max(0, this.options.ChunkRetryTimes);\n    this.options.ChunkSize = Math.max(1024 * 1024, this.options.ChunkSize);\n    this.options.CopyChunkParallelLimit = Math.max(1, this.options.CopyChunkParallelLimit);\n    this.options.CopyChunkSize = Math.max(1024 * 1024, this.options.CopyChunkSize);\n    this.options.CopySliceSize = Math.max(0, this.options.CopySliceSize);\n    this.options.MaxPartNumber = Math.max(1024, Math.min(10000, this.options.MaxPartNumber));\n    this.options.Timeout = Math.max(0, this.options.Timeout);\n    if (this.options.AppId) {\n        console.warn('warning: AppId has been deprecated, Please put it at the end of parameter Bucket(E.g: \"test-1250000000\").');\n    }\n    // 云API SDK 用小写密钥，这里兼容并 warning\n    if (this.options.secretId || this.options.secretKey) {\n        if (this.options.secretId && !this.options.SecretId) this.options.SecretId = this.options.secretId;\n        if (this.options.secretKey && !this.options.SecretKey) this.options.SecretKey = this.options.secretKey;\n        console.warn('warning: Please change options secretId/secretKey to SecretId/SecretKey.');\n    }\n        // 支持外部传入Cred动态秘钥\n    if (this.options.Credentials.secretId && this.options.Credentials.secretKey) {\n        this.options.SecretId = this.options.Credentials.secretId || '';\n        this.options.SecretKey = this.options.Credentials.secretKey || '';\n    }\n    if (this.options.SecretId && this.options.SecretId.indexOf(' ') > -1) {\n        console.error('error: SecretId格式错误，请检查');\n        console.error('error: SecretId format is incorrect. Please check');\n    }\n    if (this.options.SecretKey && this.options.SecretKey.indexOf(' ') > -1) {\n        console.error('error: SecretKey格式错误，请检查');\n        console.error('error: SecretKey format is incorrect. Please check');\n    }\n    if (util.isWeb()) {\n        console.warn('warning: cos-nodejs-sdk-v5 不支持浏览器使用，请改用 cos-js-sdk-v5，参考文档： https://cloud.tencent.com/document/product/436/11459');\n        console.warn('warning: cos-nodejs-sdk-v5 does not support browsers. Please use cos-js-sdk-v5 instead, See: https://cloud.tencent.com/document/product/436/11459');\n    }\n    event.init(this);\n    task.init(this);\n\n    // 支持动态秘钥，监听到cred里secretId、secretKey变化时，主动给cos替换秘钥\n    watch(this.options.Credentials, 'secretId', () => {\n      console.log('Credentials secretId changed');\n      this.options.SecretId = this.options.Credentials.secretId;\n    });\n    watch(this.options.Credentials, 'secretKey', () => {\n      console.log('Credentials secretKey changed');\n      this.options.SecretKey = this.options.Credentials.secretKey;\n    });\n};\n\nbase.init(COS, task);\nadvance.init(COS, task);\n\nCOS.util = {\n    md5: util.md5,\n    xml2json: util.xml2json,\n    json2xml: util.json2xml,\n};\nCOS.getAuthorization = util.getAuth;\nCOS.version = pkg.version;\n\nmodule.exports = COS;\n","\n\nvar fs = require('fs');\nvar crypto = require('crypto');\nvar xml2js = require('xml2js');\nvar xmlParser = new xml2js.Parser({explicitArray: false, ignoreAttrs: true});\nvar xmlBuilder = new xml2js.Builder();\n\nfunction camSafeUrlEncode(str) {\n    return encodeURIComponent(str)\n        .replace(/!/g, '%21')\n        .replace(/'/g, '%27')\n        .replace(/\\(/g, '%28')\n        .replace(/\\)/g, '%29')\n        .replace(/\\*/g, '%2A');\n}\n\nvar getObjectKeys = function (obj, forKey) {\n    var list = [];\n    for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            list.push(forKey ? camSafeUrlEncode(key).toLowerCase() : key);\n        }\n    }\n    return list.sort(function (a, b) {\n        a = a.toLowerCase();\n        b = b.toLowerCase();\n        return a === b ? 0 : (a > b ? 1 : -1);\n    });\n};\n\n/**\n * obj转为string\n * @param  {Object}  obj                需要转的对象，必须\n * @param  {Boolean} lowerCaseKey       key是否转为小写，默认false，非必须\n * @return {String}  data               返回字符串\n */\nvar obj2str = function (obj, lowerCaseKey) {\n    var i, key, val;\n    var list = [];\n    var keyList = getObjectKeys(obj);\n    for (i = 0; i < keyList.length; i++) {\n        key = keyList[i];\n        val = (obj[key] === undefined || obj[key] === null) ? '' : ('' + obj[key]);\n        key = lowerCaseKey? camSafeUrlEncode(key).toLowerCase() : camSafeUrlEncode(key);\n        val = camSafeUrlEncode(val) || '';\n        list.push(key + '=' + val)\n    }\n    return list.join('&');\n};\n\n// 可以签入签名的headers\nvar signHeaders = ['content-disposition', 'content-encoding', 'content-length', 'content-md5',\n    'expect', 'expires', 'host', 'if-match', 'if-modified-since', 'if-none-match', 'if-unmodified-since',\n    'origin', 'range', 'transfer-encoding'];\n\nvar getSignHeaderObj = function (headers) {\n    var signHeaderObj = {};\n    for (var i in headers) {\n        var key = i.toLowerCase();\n        if (key.indexOf('x-cos-') > -1 || signHeaders.indexOf(key) > -1) {\n            signHeaderObj[i] = headers[i];\n        }\n    }\n    return signHeaderObj;\n}\n\n//测试用的key后面可以去掉\nvar getAuth = function (opt) {\n    opt = opt || {};\n\n    var SecretId = opt.SecretId;\n    var SecretKey = opt.SecretKey;\n    var KeyTime = opt.KeyTime;\n    var method = (opt.method || opt.Method || 'get').toLowerCase();\n    var queryParams = clone(opt.Query || opt.params || {});\n    var headers = getSignHeaderObj(clone(opt.Headers || opt.headers || {}));\n\n    var Key = opt.Key || '';\n    var pathname;\n    if (opt.UseRawKey) {\n        pathname = opt.Pathname || opt.pathname || '/' + Key;\n    } else {\n        pathname = opt.Pathname || opt.pathname || Key;\n        pathname.indexOf('/') !== 0 && (pathname = '/' + pathname);\n    }\n\n    // ForceSignHost明确传入false才不加入host签名\n    var forceSignHost = opt.ForceSignHost === false ? false : true;\n\n    // 如果有传入存储桶，那么签名默认加 Host 参与计算，避免跨桶访问\n    if (!headers.Host && !headers.host && opt.Bucket && opt.Region && forceSignHost) headers.Host = opt.Bucket + '.cos.' + opt.Region + '.myqcloud.com';\n\n    if (!SecretId) throw new Error('missing param SecretId');\n    if (!SecretKey) throw new Error('missing param SecretKey');\n\n    // 签名有效起止时间\n    var now = Math.round(getSkewTime(opt.SystemClockOffset) / 1000) - 1;\n    var exp = now;\n\n    var Expires = opt.Expires || opt.expires;\n    if (Expires === undefined) {\n        exp += 900; // 签名过期时间为当前 + 900s\n    } else {\n        exp += (Expires * 1) || 0;\n    }\n\n    // 要用到的 Authorization 参数列表\n    var qSignAlgorithm = 'sha1';\n    var qAk = SecretId;\n    var qSignTime = KeyTime || now + ';' + exp;\n    var qKeyTime = KeyTime || now + ';' + exp;\n    var qHeaderList = getObjectKeys(headers, true).join(';').toLowerCase();\n    var qUrlParamList = getObjectKeys(queryParams, true).join(';').toLowerCase();\n\n    // 签名算法说明文档：https://www.qcloud.com/document/product/436/7778\n    // 步骤一：计算 SignKey\n    var signKey = crypto.createHmac('sha1', SecretKey).update(qKeyTime).digest('hex');\n\n    // 步骤二：构成 FormatString\n    var formatString = [method, pathname, obj2str(queryParams, true), obj2str(headers, true), ''].join('\\n');\n    formatString = Buffer.from(formatString, 'utf8');\n\n    // 步骤三：计算 StringToSign\n    var res = crypto.createHash('sha1').update(formatString).digest('hex');\n    var stringToSign = ['sha1', qSignTime, res, ''].join('\\n');\n\n    // 步骤四：计算 Signature\n    var qSignature = crypto.createHmac('sha1', signKey).update(stringToSign).digest('hex');\n\n    // 步骤五：构造 Authorization\n    var authorization = [\n        'q-sign-algorithm=' + qSignAlgorithm,\n        'q-ak=' + qAk,\n        'q-sign-time=' + qSignTime,\n        'q-key-time=' + qKeyTime,\n        'q-header-list=' + qHeaderList,\n        'q-url-param-list=' + qUrlParamList,\n        'q-signature=' + qSignature\n    ].join('&');\n\n    return authorization;\n\n};\n\nvar getV4Auth = function (opt) {\n\n    if (!opt.SecretId) return console.error('missing param SecretId');\n    if (!opt.SecretKey) return console.error('missing param SecretKey');\n    if (!opt.Bucket) return console.error('missing param Bucket');\n\n    var longBucket = opt.Bucket;\n    var ShortBucket = longBucket.substr(0, longBucket.lastIndexOf('-'));\n    var AppId = longBucket.substr(longBucket.lastIndexOf('-') + 1);\n    var random = Math.round(Math.random() * Math.pow(2, 32));\n    var now = Math.round(Date.now() / 1000);\n    var e = now + (opt.Expires === undefined ? 900 : opt.Expires);\n    var path = '/' + AppId + '/' + ShortBucket + '/' + encodeURIComponent((opt.Key || '').replace(/(^\\/*)/g, '')).replace(/%2F/g, '/');\n    var plainText = 'a=' + AppId + '&b=' + ShortBucket + '&k=' + opt.SecretId + '&t=' + now + '&e=' + e + '&r=' + random + '&f=' + path;\n    var signKey = crypto.createHmac(\"sha1\", opt.SecretKey).update(plainText).digest();\n    var sign = Buffer.concat([signKey, Buffer.from(plainText)]).toString(\"base64\");\n    return sign;\n};\n\nvar getSourceParams = function (source) {\n    var parser = this.options.CopySourceParser;\n    if (parser) return parser(source);\n    var m = source.match(/^([^.]+-\\d+)\\.cos(v6|-cdc|-internal)?\\.([^.]+)\\.((myqcloud\\.com)|(tencentcos\\.cn))\\/(.+)$/);\n    if (!m) return null;\n    return { Bucket: m[1], Region: m[3], Key: m[7] };\n};\n\nvar noop = function () {\n\n};\n\n// 清除对象里值为的 undefined 或 null 的属性\nvar clearKey = function (obj) {\n    var retObj = {};\n    for (var key in obj) {\n        if (obj.hasOwnProperty(key) && obj[key] !== undefined && obj[key] !== null) {\n            retObj[key] = obj[key];\n        }\n    }\n    return retObj;\n};\n\n// XML 对象转 JSON 对象\nvar xml2json = function (bodyStr) {\n    var d = {};\n    xmlParser.parseString(bodyStr, function (err, result) {\n        d = result;\n    });\n\n    return d;\n};\n\n// JSON 对象转 XML 对象\nvar json2xml = function (json) {\n    var xml = xmlBuilder.buildObject(json);\n    return xml;\n};\n\n// 计算 MD5\nvar md5 = function (str, encoding) {\n    return crypto.createHash('md5').update(str).digest(encoding || 'hex');\n};\n\n// 获取文件分片\nvar fileSlice = function (FilePath, start, end, callback) {\n    if (FilePath) {\n        try {\n            var readStream = fs.createReadStream(FilePath, {start: start, end: end - 1});\n            readStream.isSdkCreated = true;\n            callback(readStream);\n        } catch(e) {\n        }\n    } else {\n        callback(null);\n    }\n};\n\n// 获取文件内容的 MD5\nvar getBodyMd5 = function (UploadCheckContentMd5, Body, callback) {\n    callback = callback || noop;\n    if (UploadCheckContentMd5) {\n        if (Body instanceof Buffer || typeof Body === 'string') {\n            callback(util.md5(Body));\n        } else {\n            callback();\n        }\n    } else {\n        callback();\n    }\n};\n\n// 获取文件 md5 值\nvar getFileMd5 = function (readStream, callback) {\n    var md5 = crypto.createHash('md5');\n    readStream.on('data', function (chunk) {\n        md5.update(chunk);\n    });\n    readStream.on('error', function (err) {\n        callback(util.error(err));\n    });\n    readStream.on('end', function () {\n        var hash = md5.digest('hex');\n        callback(null, hash);\n    });\n};\n\nfunction clone(obj) {\n    return map(obj, function (v) {\n        return typeof v === 'object' && v !== null ? clone(v) : v;\n    });\n}\n\nfunction attr(obj, name, defaultValue) {\n    return obj && name in obj ? obj[name] : defaultValue;\n}\n\nfunction extend(target, source) {\n    each(source, function (val, key) {\n        target[key] = source[key];\n    });\n    return target;\n}\n\nfunction isArray(arr) {\n    return arr instanceof Array;\n}\n\nfunction isInArray(arr, item) {\n    var flag = false;\n    for (var i = 0; i < arr.length; i++) {\n        if (item === arr[i]) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\n\nfunction makeArray(arr) {\n    return isArray(arr) ? arr : [arr];\n}\n\nfunction each(obj, fn) {\n    for (var i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            fn(obj[i], i);\n        }\n    }\n}\n\nfunction map(obj, fn) {\n    var o = isArray(obj) ? [] : {};\n    for (var i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            o[i] = fn(obj[i], i);\n        }\n    }\n    return o;\n}\n\nfunction filter(obj, fn) {\n    var iaArr = isArray(obj);\n    var o = iaArr ? [] : {};\n    for (var i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            if (fn(obj[i], i)) {\n                if (iaArr) {\n                    o.push(obj[i]);\n                } else {\n                    o[i] = obj[i];\n                }\n            }\n        }\n    }\n    return o;\n}\n\nvar binaryBase64 = function (str) {\n    var i, len, char, arr = [];\n    for (i = 0, len = str.length / 2; i < len; i++) {\n        char = parseInt(str[i * 2] + str[i * 2 + 1], 16);\n        arr.push(char);\n    }\n    return Buffer.from(arr).toString('base64');\n};\nvar uuid = function () {\n    var S4 = function () {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    };\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n};\n\nvar hasMissingParams = function (apiName, params) {\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    if (apiName.indexOf('Bucket') > -1 || apiName === 'deleteMultipleObject' || apiName === 'multipartList' || apiName === 'listObjectVersions') {\n        if (!Bucket) return 'Bucket';\n        if (!Region) return 'Region';\n    } else if (apiName.indexOf('Object') > -1 || apiName.indexOf('multipart') > -1 || apiName === 'sliceUploadFile' || apiName === 'abortUploadTask') {\n        if (!Bucket) return 'Bucket';\n        if (!Region) return 'Region';\n        if (!Key) return 'Key';\n    }\n    return false;\n};\n\nvar formatParams = function (apiName, params) {\n\n    // 复制参数对象\n    params = extend({}, params);\n\n    // 统一处理 Headers\n    if (apiName !== 'getAuth' && apiName !== 'getV4Auth' && apiName !== 'getObjectUrl') {\n        var Headers = params.Headers || {};\n        if (params && typeof params === 'object') {\n            (function () {\n                for (var key in params) {\n                    if (params.hasOwnProperty(key) && key.indexOf('x-cos-') > -1) {\n                        Headers[key] = params[key];\n                    }\n                }\n            })();\n\n            var headerMap = {\n                // params headers\n                'x-cos-mfa': 'MFA',\n                'Content-MD5': 'ContentMD5',\n                'Content-Length': 'ContentLength',\n                'Content-Type': 'ContentType',\n                'Expect': 'Expect',\n                'Expires': 'Expires',\n                'Cache-Control': 'CacheControl',\n                'Content-Disposition': 'ContentDisposition',\n                'Content-Encoding': 'ContentEncoding',\n                'Range': 'Range',\n                'If-Modified-Since': 'IfModifiedSince',\n                'If-Unmodified-Since': 'IfUnmodifiedSince',\n                'If-Match': 'IfMatch',\n                'If-None-Match': 'IfNoneMatch',\n                'x-cos-copy-source': 'CopySource',\n                'x-cos-copy-source-Range': 'CopySourceRange',\n                'x-cos-metadata-directive': 'MetadataDirective',\n                'x-cos-copy-source-If-Modified-Since': 'CopySourceIfModifiedSince',\n                'x-cos-copy-source-If-Unmodified-Since': 'CopySourceIfUnmodifiedSince',\n                'x-cos-copy-source-If-Match': 'CopySourceIfMatch',\n                'x-cos-copy-source-If-None-Match': 'CopySourceIfNoneMatch',\n                'x-cos-acl': 'ACL',\n                'x-cos-grant-read': 'GrantRead',\n                'x-cos-grant-write': 'GrantWrite',\n                'x-cos-grant-full-control': 'GrantFullControl',\n                'x-cos-grant-read-acp': 'GrantReadAcp',\n                'x-cos-grant-write-acp': 'GrantWriteAcp',\n                'x-cos-storage-class': 'StorageClass',\n                'x-cos-traffic-limit': 'TrafficLimit',\n                'x-cos-mime-limit': 'MimeLimit',\n                // SSE-C\n                'x-cos-server-side-encryption-customer-algorithm': 'SSECustomerAlgorithm',\n                'x-cos-server-side-encryption-customer-key': 'SSECustomerKey',\n                'x-cos-server-side-encryption-customer-key-MD5': 'SSECustomerKeyMD5',\n                // SSE-COS、SSE-KMS\n                'x-cos-server-side-encryption': 'ServerSideEncryption',\n                'x-cos-server-side-encryption-cos-kms-key-id': 'SSEKMSKeyId',\n                'x-cos-server-side-encryption-context': 'SSEContext',\n            };\n            util.each(headerMap, function (paramKey, headerKey) {\n                if (params[paramKey] !== undefined) {\n                    Headers[headerKey] = params[paramKey];\n                }\n            });\n\n            params.Headers = clearKey(Headers);\n        }\n    }\n\n    return params;\n};\n\nvar apiWrapper = function (apiName, apiFn) {\n    return function (params, callback) {\n\n        var self = this;\n\n        // 处理参数\n        if (typeof params === 'function') {\n            callback = params;\n            params = {};\n        }\n\n        // 整理参数格式\n        params = formatParams(apiName, params);\n\n        // 代理回调函数\n        var formatResult = function (result) {\n            if (result && result.headers) {\n                result.headers['x-cos-request-id'] && (result.RequestId = result.headers['x-cos-request-id']);\n                result.headers['x-ci-request-id'] && (result.RequestId = result.headers['x-ci-request-id']);\n                result.headers['x-cos-version-id'] && (result.VersionId = result.headers['x-cos-version-id']);\n                result.headers['x-cos-delete-marker'] && (result.DeleteMarker = result.headers['x-cos-delete-marker']);\n            }\n            return result;\n        };\n        var _callback = function (err, data) {\n            callback && callback(formatResult(err), formatResult(data));\n        };\n\n        var checkParams = function () {\n            if (apiName !== 'getService' && apiName !== 'abortUploadTask') {\n                // 判断参数是否完整\n                var missingResult = hasMissingParams(apiName, params)\n                if (missingResult) {\n                    return 'missing param ' + missingResult;\n                }\n                // 判断 region 格式\n                if (params.Region) {\n                    if (params.Region.indexOf('cos.') > -1) {\n                        return 'param Region should not be start with \"cos.\"';\n                    } else if (!/^([a-z\\d-]+)$/.test(params.Region)) {\n                        return 'Region format error.';\n                    }\n                    // 判断 region 格式\n                    if (!self.options.CompatibilityMode\n                        && params.Region.indexOf('-') === -1\n                        && params.Region !== 'yfb'\n                        && params.Region !== 'default'\n                        && params.Region !== 'accelerate') {\n                        console.warn('warning: param Region format error, find help here: https://cloud.tencent.com/document/product/436/6224');\n                    }\n                }\n                // 兼容不带 AppId 的 Bucket\n                if (params.Bucket) {\n                    if (!/^([a-z\\d-]+)-(\\d+)$/.test(params.Bucket)) {\n                        if (params.AppId) {\n                            params.Bucket = params.Bucket + '-' + params.AppId;\n                        } else if (self.options.AppId) {\n                            params.Bucket = params.Bucket + '-' + self.options.AppId;\n                        } else {\n                            return 'Bucket should format as \"test-1250000000\".';\n                        }\n                    }\n                    if (params.AppId) {\n                        console.warn('warning: AppId has been deprecated, Please put it at the end of parameter Bucket(E.g Bucket:\"test-1250000000\" ).');\n                        delete params.AppId;\n                    }\n                }\n                // 如果 Key 是 / 开头，强制去掉第一个 /\n                if (!self.options.UseRawKey && params.Key && params.Key.substr(0, 1) === '/') {\n                    params.Key = params.Key.substr(1);\n                }\n            }\n        };\n\n        var errMsg = checkParams();\n        var isSync = ['getAuth', 'getV4Auth', 'getObjectUrl'].includes(apiName) || apiName.indexOf('Stream') > -1;\n        if (Promise && !isSync && !callback) {\n            return new Promise(function (resolve, reject) {\n                callback = function (err, data) {\n                    err ? reject(err) : resolve(data);\n                };\n                if (errMsg) return _callback(util.error(new Error(errMsg)));\n                apiFn.call(self, params, _callback);\n            });\n        } else {\n            if (errMsg) return _callback(util.error(new Error(errMsg)));\n            var res = apiFn.call(self, params, _callback);\n            if (isSync) return res;\n        }\n    }\n};\n\nvar throttleOnProgress = function (total, onProgress) {\n    var self = this;\n    var size0 = 0;\n    var size1 = 0;\n    var time0 = Date.now();\n    var time1;\n    var timer;\n\n    function update() {\n        timer = 0;\n        if (onProgress && (typeof onProgress === 'function')) {\n            time1 = Date.now();\n            var speed = Math.max(0, Math.round((size1 - size0) / ((time1 - time0) / 1000) * 100) / 100) || 0;\n            var percent;\n            if (size1 === 0 && total === 0) {\n                percent = 1;\n            } else {\n                percent = Math.floor(size1 / total * 100) / 100 || 0;\n            }\n            time0 = time1;\n            size0 = size1;\n            try {\n                onProgress({loaded: size1, total: total, speed: speed, percent: percent});\n            } catch (e) {\n            }\n        }\n    }\n\n    return function (info, immediately) {\n        if (info) {\n            size1 = info.loaded;\n            total = info.total;\n        }\n        if (immediately) {\n            clearTimeout(timer);\n            update();\n        } else {\n            if (timer) return;\n            timer = setTimeout(update, self.options.ProgressInterval);\n        }\n    };\n};\n\nvar getFileSize = function (api, params, callback) {\n    var size;\n    if (api === 'sliceUploadFile') {\n        if (params.FilePath) {\n            fs.stat(params.FilePath, function (err, fileStats) {\n                if (err) {\n                    if (params.ContentLength !== undefined) {\n                        size = params.ContentLength;\n                    } else {\n                        return callback(err);\n                    }\n                } else {\n                    params.FileStat = fileStats;\n                    params.FileStat.FilePath = params.FilePath;\n                    size = fileStats.isDirectory() ? 0 : fileStats.size;\n                }\n                params.ContentLength = size = size || 0;\n                callback(null, size);\n            });\n            return;\n        } else {\n            callback(util.error(new Error('missing param FilePath')));\n            return;\n        }\n    } else {\n        if (params.Body !== undefined) {\n            if (typeof params.Body === 'string') {\n                params.Body = global.Buffer.from(params.Body);\n            }\n            if (params.Body instanceof global.Buffer) {\n                size = params.Body.length;\n            } else if (typeof params.Body.pipe === 'function') {\n                if (params.ContentLength === undefined) {\n                    size = undefined;\n                } else {\n                    size = params.ContentLength;\n                }\n            } else {\n                callback(util.error(new Error('params Body format error, Only allow Buffer|Stream|String.')));\n                return;\n            }\n        } else {\n            callback(util.error(new Error('missing param Body')));\n            return;\n        }\n    }\n    params.ContentLength = size;\n    callback(null, size);\n};\n\n// 获取调正的时间戳\nvar getSkewTime = function (offset) {\n    return Date.now() + (offset || 0);\n};\n\n// 重写 callback，等待流结束后才 callback\nvar callbackAfterStreamFinish = function (stream, callback) {\n    if (!stream) return callback;\n    var err, data, count = 2, loaded = false;\n    var cb = function (e, d) {\n        if (loaded) return;\n        // 如果有数据，且没有错误，清理 设置错误\n        if (d && !data || e || err) {\n            data = d;\n        }\n        if (e && !err) {\n            err = e;\n            data = null;\n        }\n        if (err || --count === 0) {\n            loaded = true;\n            callback(err, data);\n        }\n    };\n    stream.on('error', function (err) {\n        cb(err);\n    });\n    stream.on('finish', function () {\n        cb();\n    });\n    return cb;\n};\n\nvar error = function (err, opt) {\n    var sourceErr = err;\n    err.message = err.message || null;\n\n    if (typeof opt === 'string') {\n        err.error = opt;\n        err.message = opt;\n    } else if (typeof opt === 'object' && opt !== null) {\n        extend(err, opt);\n        if (opt.code || opt.name) err.code = opt.code || opt.name;\n        if (opt.message) err.message = opt.message;\n        if (opt.stack) err.stack = opt.stack;\n    }\n\n    if (typeof Object.defineProperty === 'function') {\n        Object.defineProperty(err, 'name', {writable: true, enumerable: false});\n        Object.defineProperty(err, 'message', {enumerable: true});\n    }\n\n    err.name = opt && opt.name || err.name || err.code || 'Error';\n    if (!err.code) err.code = err.name;\n    \n    if (!err.error) {\n        var objectType = Object.prototype.toString.call(err);\n        if (objectType === '[object Object]') {\n            // 兼容老的错误格式\n            err.error = clone(sourceErr);\n        } else if (objectType === '[object Error]') {\n            // 有环境报出[object Error]对象的情况,兼容处理一下\n            err = {\n              code: err.code || err.name || 'Error',\n              name: err.name || err.code || 'Error',\n              message: err.reason || err.message || 'Error',\n            };\n        }\n    }\n    return err;\n}\n\nvar isWeb = function () {\n    return typeof window === 'object';\n}\n\nvar isCIHost = function(url) {\n  return /^https?:\\/\\/([^/]+\\.)?ci\\.[^/]+/.test(url);\n}\n\nvar util = {\n    noop: noop,\n    formatParams: formatParams,\n    apiWrapper: apiWrapper,\n    xml2json: xml2json,\n    json2xml: json2xml,\n    md5: md5,\n    clearKey: clearKey,\n    fileSlice: fileSlice,\n    getBodyMd5: getBodyMd5,\n    getFileMd5: getFileMd5,\n    binaryBase64: binaryBase64,\n    extend: extend,\n    isArray: isArray,\n    isInArray: isInArray,\n    makeArray: makeArray,\n    each: each,\n    map: map,\n    filter: filter,\n    clone: clone,\n    attr: attr,\n    uuid: uuid,\n    camSafeUrlEncode: camSafeUrlEncode,\n    throttleOnProgress: throttleOnProgress,\n    getFileSize: getFileSize,\n    getSkewTime: getSkewTime,\n    error: error,\n    getAuth: getAuth,\n    callbackAfterStreamFinish: callbackAfterStreamFinish,\n    getV4Auth: getV4Auth,\n    isBrowser: false,\n    obj2str: obj2str,\n    isWeb: isWeb,\n    isCIHost: isCIHost,\n    getSourceParams: getSourceParams,\n};\n\nmodule.exports = util;\n","var initEvent = function (cos) {\n    var listeners = {};\n    var getList = function (action) {\n        !listeners[action] && (listeners[action] = []);\n        return listeners[action];\n    };\n    cos.on = function (action, callback) {\n        if (action === 'task-list-update') {\n            console.warn('warning: Event \"' + action + '\" has been deprecated. Please use \"list-update\" instead.');\n        }\n        getList(action).push(callback);\n    };\n    cos.off = function (action, callback) {\n        var list = getList(action);\n        for (var i = list.length - 1; i >= 0; i--) {\n            callback === list[i] && list.splice(i, 1);\n        }\n    };\n    cos.emit = function (action, data) {\n        var list = getList(action).map(function (cb) {\n            return cb;\n        });\n        for (var i = 0; i < list.length; i++) {\n            list[i](data);\n        }\n    };\n};\n\nvar EventProxy = function () {\n    initEvent(this);\n};\n\nmodule.exports.init = initEvent;\nmodule.exports.EventProxy = EventProxy;","var session = require('./session');\nvar util = require('./util');\n\nvar originApiMap = {};\nvar transferToTaskMethod = function (apiMap, apiName) {\n    originApiMap[apiName] = apiMap[apiName];\n    apiMap[apiName] = function (params, callback) {\n        if (params.SkipTask) {\n            originApiMap[apiName].call(this, params, callback);\n        } else {\n            this._addTask(apiName, params, callback);\n        }\n    };\n};\n\nvar initTask = function (cos) {\n\n    var queue = [];\n    var tasks = {};\n    var uploadingFileCount = 0;\n    var nextUploadIndex = 0;\n\n    // 接口返回简略的任务信息\n    var formatTask = function (task) {\n        var t = {\n            id: task.id,\n            Bucket: task.Bucket,\n            Region: task.Region,\n            Key: task.Key,\n            FilePath: task.FilePath,\n            state: task.state,\n            loaded: task.loaded,\n            size: task.size,\n            speed: task.speed,\n            percent: task.percent,\n            hashPercent: task.hashPercent,\n            error: task.error,\n        };\n        if (task.FilePath) t.FilePath = task.FilePath;\n        return t;\n    };\n\n    var emitListUpdate = (function () {\n        var timer;\n        var emit = function () {\n            timer = 0;\n            cos.emit('task-list-update', {list: util.map(queue, formatTask)});\n            cos.emit('list-update', {list: util.map(queue, formatTask)});\n        };\n        return function () {\n            if (!timer) timer = setTimeout(emit);\n        }\n    })();\n\n    var clearQueue = function () {\n        if (queue.length <= cos.options.UploadQueueSize) return;\n        for (var i = 0;\n             i < nextUploadIndex && // 小于当前操作的 index 才清理\n             i < queue.length && // 大于队列才清理\n             queue.length > cos.options.UploadQueueSize // 如果还太多，才继续清理\n            ;) {\n            var isActive = queue[i].state === 'waiting' || queue[i].state === 'checking' || queue[i].state === 'uploading';\n            if (!queue[i] || !isActive) {\n                tasks[queue[i].id] && (delete tasks[queue[i].id]);\n                queue.splice(i, 1);\n                nextUploadIndex--;\n            } else {\n                i++;\n            }\n        }\n        emitListUpdate();\n    };\n\n    var startNextTask = function () {\n        // 检查是否允许增加执行进程\n        if (uploadingFileCount >= cos.options.FileParallelLimit) return;\n        // 跳过不可执行的任务\n        while (queue[nextUploadIndex] && queue[nextUploadIndex].state !== 'waiting') nextUploadIndex++;\n        // 检查是否已遍历结束\n        if (nextUploadIndex >= queue.length) return;\n        // 上传该遍历到的任务\n        var task = queue[nextUploadIndex];\n        nextUploadIndex++;\n        uploadingFileCount++;\n        task.state = 'checking';\n        task.params.onTaskStart && task.params.onTaskStart(formatTask(task));\n        !task.params.UploadData && (task.params.UploadData = {});\n        var apiParams = util.formatParams(task.api, task.params);\n        originApiMap[task.api].call(cos, apiParams, function (err, data) {\n            if (!cos._isRunningTask(task.id)) return;\n            if (task.state === 'checking' || task.state === 'uploading') {\n                task.state = err ? 'error' : 'success';\n                err && (task.error = err);\n                uploadingFileCount--;\n                emitListUpdate();\n                startNextTask();\n                task.callback && task.callback(err, data);\n                if (task.state === 'success') {\n                    if (task.params) {\n                        delete task.params.UploadData;\n                        delete task.params.Body;\n                        delete task.params;\n                    }\n                    delete task.callback;\n                }\n            }\n            clearQueue();\n        });\n        emitListUpdate();\n        // 异步执行下一个任务\n        setTimeout(startNextTask);\n    };\n\n    var killTask = function (id, switchToState) {\n        var task = tasks[id];\n        if (!task) return;\n        var waiting = task && task.state === 'waiting';\n        var running = task && (task.state === 'checking' || task.state === 'uploading');\n        if (switchToState === 'canceled' && task.state !== 'canceled' ||\n            switchToState === 'paused' && waiting ||\n            switchToState === 'paused' && running) {\n            if (switchToState === 'paused' && task.params.Body && typeof task.params.Body.pipe === 'function') {\n                console.error('stream not support pause');\n                return;\n            }\n            task.state = switchToState;\n            cos.emit('inner-kill-task', {TaskId: id, toState: switchToState});\n            try {\n                var UploadId = task && task.params && task.params.UploadData.UploadId\n            } catch(e) {}\n            if (switchToState === 'canceled' && UploadId) session.removeUsing(UploadId)\n            emitListUpdate();\n            if (running) {\n                uploadingFileCount--;\n                startNextTask();\n            }\n            if (switchToState === 'canceled') {\n                if (task.params) {\n                    delete task.params.UploadData;\n                    delete task.params.Body;\n                    delete task.params;\n                }\n                delete task.callback;\n            }\n        }\n        clearQueue();\n    };\n\n    cos._addTasks = function (taskList) {\n        util.each(taskList, function (task) {\n            cos._addTask(task.api, task.params, task.callback, true);\n        });\n        emitListUpdate();\n    };\n\n    var isTaskReadyWarning = true;\n    cos._addTask = function (api, params, callback, ignoreAddEvent) {\n\n        // 复制参数对象\n        params = util.formatParams(api, params);\n\n        // 生成 id\n        var id = util.uuid();\n        params.TaskId = id;\n        params.onTaskReady && params.onTaskReady(id);\n        if (params.TaskReady) {\n            params.TaskReady(id);\n            isTaskReadyWarning && console.warn('warning: Param \"TaskReady\" has been deprecated. Please use \"onTaskReady\" instead.');\n            isTaskReadyWarning = false;\n        }\n\n        var task = {\n            // env\n            params: params,\n            callback: callback,\n            api: api,\n            index: queue.length,\n            // task\n            id: id,\n            Bucket: params.Bucket,\n            Region: params.Region,\n            Key: params.Key,\n            FilePath: params.FilePath || '',\n            state: 'waiting',\n            loaded: 0,\n            size: 0,\n            speed: 0,\n            percent: 0,\n            hashPercent: 0,\n            error: null,\n        };\n        var onHashProgress = params.onHashProgress;\n        params.onHashProgress = function (info) {\n            if (!cos._isRunningTask(task.id)) return;\n            task.hashPercent = info.percent;\n            onHashProgress && onHashProgress(info);\n            emitListUpdate();\n        };\n        var onProgress = params.onProgress;\n        params.onProgress = function (info) {\n            if (!cos._isRunningTask(task.id)) return;\n            task.state === 'checking' && (task.state = 'uploading');\n            task.loaded = info.loaded;\n            task.speed = info.speed;\n            task.percent = info.percent;\n            onProgress && onProgress(info);\n            emitListUpdate();\n        };\n\n        // 异步获取 filesize\n        util.getFileSize(api, params, function (err, size) {\n            // 开始处理上传\n            if (err) return callback(util.error(err)); // 如果获取大小出错，不加入队列\n            // 获取完文件大小再把任务加入队列\n            tasks[id] = task;\n            queue.push(task);\n            task.size = size;\n            !ignoreAddEvent && emitListUpdate();\n            startNextTask();\n            clearQueue();\n        });\n        return id;\n    };\n    cos._isRunningTask = function (id) {\n        var task = tasks[id];\n        return !!(task && (task.state === 'checking' || task.state === 'uploading'));\n    };\n    cos.getTaskList = function () {\n        return util.map(queue, formatTask);\n    };\n    cos.cancelTask = function (id) {\n        killTask(id, 'canceled');\n    };\n    cos.pauseTask = function (id) {\n        killTask(id, 'paused');\n    };\n    cos.restartTask = function (id) {\n        var task = tasks[id];\n        if (task && (task.state === 'paused' || task.state === 'error')) {\n            task.state = 'waiting';\n            emitListUpdate();\n            nextUploadIndex = Math.min(nextUploadIndex, task.index);\n            startNextTask();\n        }\n    };\n    cos.isUploadRunning = function () {\n        return uploadingFileCount || nextUploadIndex < queue.length;\n    };\n\n};\n\nmodule.exports.transferToTaskMethod = transferToTaskMethod;\nmodule.exports.init = initTask;\n","var util = require('./util');\n// 按照文件特征值，缓存 UploadId\nvar cacheKey = 'cos_sdk_upload_cache';\nvar expires = 30 * 24 * 3600;\nvar store;\nvar cache;\nvar timer;\n\nvar getCache = function () {\n    var val, opt = {configName: 'cos-nodejs-sdk-v5-storage'};\n    if (this.options.ConfCwd) opt.cwd = this.options.ConfCwd;\n    try {\n        var Conf = require('conf');\n        store = new Conf(opt);\n        val = store.get(cacheKey);\n    } catch (e) {}\n    if (!val || !(val instanceof Array)) val = [];\n    cache = val;\n};\nvar setCache = function () {\n    try {\n        if (cache.length) store.set(cacheKey, cache);\n        else store.delete(cacheKey);\n    } catch (e) {\n    }\n};\n\nvar init = function () {\n    if (cache) return;\n    getCache.call(this);\n    // 清理太老旧的数据\n    var changed = false;\n    var now = Math.round(Date.now() / 1000);\n    for (var i = cache.length - 1; i >= 0; i--) {\n        var mtime = cache[i][2];\n        if (!mtime || mtime + expires < now) {\n            cache.splice(i, 1);\n            changed = true;\n        }\n    }\n    changed && setCache();\n};\n\n// 把缓存存到本地\nvar save = function () {\n    if (timer) return;\n    timer = setTimeout(function () {\n        setCache();\n        timer = null;\n    }, 400);\n};\n\nvar mod = {\n    using: {},\n    // 标记 UploadId 正在使用\n    setUsing: function (uuid) {\n        mod.using[uuid] = true;\n    },\n    // 标记 UploadId 已经没在使用\n    removeUsing: function (uuid) {\n        delete mod.using[uuid];\n    },\n    // 用上传参数生成哈希值\n    getFileId: function (FileStat, ChunkSize, Bucket, Key) {\n        if (FileStat && FileStat.FilePath && FileStat.size && FileStat.ctime && FileStat.mtime && ChunkSize) {\n            return util.md5([FileStat.FilePath].join('::')) + '-' + util.md5([FileStat.size, FileStat.ctime, FileStat.mtime, ChunkSize, Bucket, Key].join('::'));\n        } else {\n            return null;\n        }\n    },\n    // 用上传参数生成哈希值\n    getCopyFileId: function (copySource, sourceHeaders, ChunkSize, Bucket, Key) {\n        var size = sourceHeaders['content-length'];\n        var etag = sourceHeaders.etag || '';\n        var lastModified = sourceHeaders['last-modified'];\n        if (copySource && ChunkSize) {\n            return util.md5([copySource, size, etag, lastModified, ChunkSize, Bucket, Key].join('::'));\n        } else {\n            return null;\n        }\n    },\n    // 获取文件对应的 UploadId 列表\n    getUploadIdList: function (uuid) {\n        if (!uuid) return null;\n        init.call(this);\n        var list = [];\n        for (var i = 0; i < cache.length; i++) {\n            if (cache[i][0] === uuid)\n                list.push(cache[i][1]);\n        }\n        return list.length ? list : null;\n    },\n    // 缓存 UploadId\n    saveUploadId: function (uuid, UploadId, limit) {\n        init.call(this);\n        if (!uuid) return;\n        // 清理没用的 UploadId\n        var part1 = uuid.substr(0, uuid.indexOf('-') + 1);\n        for (var i = cache.length - 1; i >= 0; i--) {\n            var item = cache[i];\n            if (item[0] === uuid && item[1] === UploadId) {\n                cache.splice(i, 1);\n            } else if (uuid !== item[0] && item[0].indexOf(part1) === 0) { // 文件路径相同，但其他信息不同，说明文件改变了或上传参数（存储桶、路径、分片大小）变了，直接清理掉\n                cache.splice(i, 1);\n            }\n        }\n        cache.unshift([uuid, UploadId, Math.round(Date.now() / 1000)]);\n        if (cache.length > limit) cache.splice(limit);\n        save();\n    },\n    // UploadId 已用完，移除掉\n    removeUploadId: function (UploadId) {\n        init.call(this);\n        delete mod.using[UploadId];\n        for (var i = cache.length - 1; i >= 0; i--) {\n            if (cache[i][1] === UploadId) cache.splice(i, 1)\n        }\n        save();\n    },\n};\n\nmodule.exports = mod;\n","var pkg = require('../package.json');\nvar REQUEST = require('request');\nvar mime = require('mime-types');\nvar Stream = require('stream');\nvar util = require('./util');\nvar fs = require('fs');\n\n\n// Bucket 相关\n\n/**\n * 获取用户的 bucket 列表\n * @param  {Object}  params         回调函数，必须，下面为参数列表\n * 无特殊参数\n * @param  {Function}  callback     回调函数，必须\n */\nfunction getService(params, callback) {\n\n    if (typeof params === 'function') {\n        callback = params;\n        params = {};\n    }\n    var protocol = this.options.Protocol || (util.isBrowser && location.protocol === 'http:' ? 'http:' : 'https:');\n    var domain = this.options.ServiceDomain;\n    var appId = params.AppId || this.options.appId;\n    var region = params.Region;\n    if (domain) {\n        domain = domain.replace(/\\{\\{AppId\\}\\}/ig, appId || '')\n            .replace(/\\{\\{Region\\}\\}/ig, region || '').replace(/\\{\\{.*?\\}\\}/ig, '');\n        if (!/^[a-zA-Z]+:\\/\\//.test(domain)) {\n            domain = protocol + '//' + domain;\n        }\n        if (domain.slice(-1) === '/') {\n            domain = domain.slice(0, -1);\n        }\n    } else if (region) {\n        domain = protocol + '//cos.' + region + '.myqcloud.com';\n    } else {\n        domain = protocol + '//service.cos.myqcloud.com';\n    }\n\n    var SignHost = '';\n    var standardHost = region ? 'cos.' + region + '.myqcloud.com' : 'service.cos.myqcloud.com';\n    var urlHost = domain.replace(/^https?:\\/\\/([^/]+)(\\/.*)?$/, '$1');\n    if (standardHost === urlHost) SignHost = standardHost;\n\n    submitRequest.call(this, {\n        Action: 'name/cos:GetService',\n        url: domain,\n        method: 'GET',\n        headers: params.Headers,\n        SignHost: SignHost,\n    }, function (err, data) {\n        if (err) return callback(err);\n        var buckets = (data && data.ListAllMyBucketsResult && data.ListAllMyBucketsResult.Buckets\n            && data.ListAllMyBucketsResult.Buckets.Bucket) || [];\n        buckets = util.isArray(buckets) ? buckets : [buckets];\n        var owner = (data && data.ListAllMyBucketsResult && data.ListAllMyBucketsResult.Owner) || {};\n        callback(null, {\n            Buckets: buckets,\n            Owner: owner,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 创建 Bucket，并初始化访问权限\n * @param  {Object}  params                         参数对象，必须\n *     @param  {String}  params.Bucket              Bucket名称，必须\n *     @param  {String}  params.Region              地域名称，必须\n *     @param  {String}  params.ACL                 用户自定义文件权限，可以设置：private，public-read；默认值：private，非必须\n *     @param  {String}  params.GrantRead           赋予被授权者读的权限，格式x-cos-grant-read: uin=\" \",uin=\" \"，非必须\n *     @param  {String}  params.GrantWrite          赋予被授权者写的权限，格式x-cos-grant-write: uin=\" \",uin=\" \"，非必须\n *     @param  {String}  params.GrantFullControl    赋予被授权者读写权限，格式x-cos-grant-full-control: uin=\" \",uin=\" \"，非必须\n * @param  {Function}  callback                     回调函数，必须\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                          返回的数据\n *     @return  {String}  data.Location             操作地址\n */\nfunction putBucket(params, callback) {\n\n    var self = this;\n\n    var xml = '';\n    var conf = {};\n    if (params.BucketAZConfig) conf.BucketAZConfig = params.BucketAZConfig;\n    if (params.BucketArchConfig) conf.BucketArchConfig = params.BucketArchConfig;\n    if (conf.BucketAZConfig || conf.BucketArchConfig) xml = util.json2xml({CreateBucketConfiguration: conf});\n    console.log(xml);\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucket',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        body: xml,\n    }, function (err, data) {\n        if (err) return callback(err);\n        var url = getUrl({\n            protocol: self.options.Protocol,\n            domain: self.options.Domain,\n            bucket: params.Bucket,\n            region: params.Region,\n            isLocation: true,\n        });\n        callback(null, {\n            Location: url,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 查看是否存在该Bucket，是否有权限访问\n * @param  {Object}  params                     参数对象，必须\n *     @param  {String}  params.Bucket          Bucket名称，必须\n *     @param  {String}  params.Region          地域名称，必须\n * @param  {Function}  callback                 回调函数，必须\n * @return  {Object}  err                       请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                      返回的数据\n *     @return  {Boolean}  data.BucketExist     Bucket是否存在\n *     @return  {Boolean}  data.BucketAuth      是否有 Bucket 的访问权限\n */\nfunction headBucket(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:HeadBucket',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        method: 'HEAD',\n    }, callback);\n}\n\n/**\n * 获取 Bucket 下的 object 列表\n * @param  {Object}  params                         参数对象，必须\n *     @param  {String}  params.Bucket              Bucket名称，必须\n *     @param  {String}  params.Region              地域名称，必须\n *     @param  {String}  params.Prefix              前缀匹配，用来规定返回的文件前缀地址，非必须\n *     @param  {String}  params.Delimiter           定界符为一个符号，如果有Prefix，则将Prefix到delimiter之间的相同路径归为一类，非必须\n *     @param  {String}  params.Marker              默认以UTF-8二进制顺序列出条目，所有列出条目从marker开始，非必须\n *     @param  {String}  params.MaxKeys             单次返回最大的条目数量，默认1000，非必须\n *     @param  {String}  params.EncodingType        规定返回值的编码方式，非必须\n * @param  {Function}  callback                     回调函数，必须\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                          返回的数据\n *     @return  {Object}  data.ListBucketResult     返回的 object 列表信息\n */\nfunction getBucket(params, callback) {\n    var reqParams = {};\n    reqParams['prefix'] = params['Prefix'] || '';\n    reqParams['delimiter'] = params['Delimiter'];\n    reqParams['marker'] = params['Marker'];\n    reqParams['max-keys'] = params['MaxKeys'];\n    reqParams['encoding-type'] = params['EncodingType'];\n\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucket',\n        ResourceKey: reqParams['prefix'],\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        qs: reqParams,\n    }, function (err, data) {\n        if (err) return callback(err);\n        var ListBucketResult = data.ListBucketResult || {};\n        var Contents = ListBucketResult.Contents || [];\n        var CommonPrefixes = ListBucketResult.CommonPrefixes || [];\n\n        Contents = util.isArray(Contents) ? Contents : [Contents];\n        CommonPrefixes = util.isArray(CommonPrefixes) ? CommonPrefixes : [CommonPrefixes];\n\n        var result = util.clone(ListBucketResult);\n        util.extend(result, {\n            Contents: Contents,\n            CommonPrefixes: CommonPrefixes,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n\n        callback(null, result);\n    });\n}\n\n/**\n * 删除 Bucket\n * @param  {Object}  params                 参数对象，必须\n *     @param  {String}  params.Bucket      Bucket名称，必须\n *     @param  {String}  params.Region      地域名称，必须\n * @param  {Function}  callback             回调函数，必须\n * @return  {Object}  err                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                  返回的数据\n *     @return  {String}  data.Location     操作地址\n */\nfunction deleteBucket(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteBucket',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        method: 'DELETE',\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 设置 Bucket 的 权限列表\n * @param  {Object}  params                         参数对象，必须\n *     @param  {String}  params.Bucket              Bucket名称，必须\n *     @param  {String}  params.Region              地域名称，必须\n *     @param  {String}  params.ACL                 用户自定义文件权限，可以设置：private，public-read；默认值：private，非必须\n *     @param  {String}  params.GrantRead           赋予被授权者读的权限，格式x-cos-grant-read: uin=\" \",uin=\" \"，非必须\n *     @param  {String}  params.GrantWrite          赋予被授权者写的权限，格式x-cos-grant-write: uin=\" \",uin=\" \"，非必须\n *     @param  {String}  params.GrantFullControl    赋予被授权者读写权限，格式x-cos-grant-full-control: uin=\" \",uin=\" \"，非必须\n * @param  {Function}  callback                     回调函数，必须\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                          返回的数据\n */\nfunction putBucketAcl(params, callback) {\n    var headers = params.Headers;\n\n    var xml = '';\n    if (params['AccessControlPolicy']) {\n        var AccessControlPolicy = util.clone(params['AccessControlPolicy'] || {});\n        var Grants = AccessControlPolicy.Grants || AccessControlPolicy.Grant;\n        Grants = util.isArray(Grants) ? Grants : [Grants];\n        delete AccessControlPolicy.Grant;\n        delete AccessControlPolicy.Grants;\n        AccessControlPolicy.AccessControlList = {Grant: Grants};\n        xml = util.json2xml({AccessControlPolicy: AccessControlPolicy});\n\n        headers['Content-Type'] = 'application/xml';\n        headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n    }\n\n    // Grant Header 去重\n    util.each(headers, function (val, key) {\n        if (key.indexOf('x-cos-grant-') === 0) {\n            headers[key] = uniqGrant(headers[key]);\n        }\n    });\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketACL',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: headers,\n        action: 'acl',\n        body: xml,\n    }, function (err, data) {\n        if (err) return callback(err);\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Bucket 的 权限列表\n * @param  {Object}  params                         参数对象，必须\n *     @param  {String}  params.Bucket              Bucket名称，必须\n *     @param  {String}  params.Region              地域名称，必须\n * @param  {Function}  callback                     回调函数，必须\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                          返回的数据\n *     @return  {Object}  data.AccessControlPolicy  访问权限信息\n */\nfunction getBucketAcl(params, callback) {\n\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketACL',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'acl',\n    }, function (err, data) {\n        if (err) return callback(err);\n        var AccessControlPolicy = data.AccessControlPolicy || {};\n        var Owner = AccessControlPolicy.Owner || {};\n        var Grant = AccessControlPolicy.AccessControlList && AccessControlPolicy.AccessControlList.Grant || [];\n        Grant = util.isArray(Grant) ? Grant : [Grant];\n        var result = decodeAcl(AccessControlPolicy);\n        if (data.headers && data.headers['x-cos-acl']) {\n            result.ACL = data.headers['x-cos-acl'];\n        }\n        result = util.extend(result, {\n            Owner: Owner,\n            Grants: Grant,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n        callback(null, result);\n    });\n}\n\n/**\n * 设置 Bucket 的 跨域设置\n * @param  {Object}  params                             参数对象，必须\n *     @param  {String}  params.Bucket                  Bucket名称，必须\n *     @param  {String}  params.Region                  地域名称，必须\n *     @param  {Object}  params.CORSConfiguration       相关的跨域设置，必须\n * @param  {Array}  params.CORSConfiguration.CORSRules  对应的跨域规则\n * @param  {Function}  callback                         回调函数，必须\n * @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                              返回的数据\n */\nfunction putBucketCors(params, callback) {\n\n    var CORSConfiguration = params['CORSConfiguration'] || {};\n    var CORSRules = CORSConfiguration['CORSRules'] || params['CORSRules'] || [];\n    CORSRules = util.clone(util.isArray(CORSRules) ? CORSRules : [CORSRules]);\n    util.each(CORSRules, function (rule) {\n        util.each(['AllowedOrigin', 'AllowedHeader', 'AllowedMethod', 'ExposeHeader'], function (key) {\n            var sKey = key + 's';\n            var val = rule[sKey] || rule[key] || [];\n            delete rule[sKey];\n            rule[key] = util.isArray(val) ? val : [val];\n        });\n    });\n\n    var Conf = {CORSRule: CORSRules};\n    if (params.ResponseVary) Conf.ResponseVary = params.ResponseVary;\n\n    var xml = util.json2xml({CORSConfiguration: Conf});\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketCORS',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'cors',\n        headers: headers,\n    }, function (err, data) {\n        if (err) return callback(err);\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Bucket 的 跨域设置\n * @param  {Object}  params                         参数对象，必须\n *     @param  {String}  params.Bucket              Bucket名称，必须\n *     @param  {String}  params.Region              地域名称，必须\n * @param  {Function}  callback                     回调函数，必须\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                          返回的数据\n *     @return  {Object}  data.CORSRules            Bucket的跨域设置\n */\nfunction getBucketCors(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketCORS',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'cors',\n    }, function (err, data) {\n        if (err) {\n            if (err.statusCode === 404 && err.error && err.error.Code === 'NoSuchCORSConfiguration') {\n                var result = {\n                    CORSRules: [],\n                    statusCode: err.statusCode,\n                };\n                err.headers && (result.headers = err.headers);\n                callback(null, result);\n            } else {\n                callback(err);\n            }\n            return;\n        }\n        var CORSConfiguration = data.CORSConfiguration || {};\n        var CORSRules = CORSConfiguration.CORSRules || CORSConfiguration.CORSRule || [];\n        CORSRules = util.clone(util.isArray(CORSRules) ? CORSRules : [CORSRules]);\n        var ResponseVary = CORSConfiguration.ResponseVary;\n\n        util.each(CORSRules, function (rule) {\n            util.each(['AllowedOrigin', 'AllowedHeader', 'AllowedMethod', 'ExposeHeader'], function (key) {\n                var sKey = key + 's';\n                var val = rule[sKey] || rule[key] || [];\n                delete rule[key];\n                rule[sKey] = util.isArray(val) ? val : [val];\n            });\n        });\n\n        callback(null, {\n            CORSRules: CORSRules,\n            ResponseVary: ResponseVary,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 删除 Bucket 的 跨域设置\n * @param  {Object}  params                 参数对象，必须\n *     @param  {String}  params.Bucket      Bucket名称，必须\n *     @param  {String}  params.Region      地域名称，必须\n * @param  {Function}  callback             回调函数，必须\n * @return  {Object}  err                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                  返回的数据\n */\nfunction deleteBucketCors(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteBucketCORS',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'cors',\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode || err.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Bucket 的 地域信息\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据，包含地域信息 LocationConstraint\n */\nfunction getBucketLocation(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketLocation',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'location',\n    }, callback);\n}\n\nfunction putBucketPolicy(params, callback) {\n    var Policy = params['Policy'];\n    try {\n        if (typeof Policy === 'string') Policy = JSON.parse(Policy);\n    } catch (e) {\n    }\n    if (!Policy || typeof Policy === 'string') return callback(util.error(new Error('Policy format error')));\n    var PolicyStr = JSON.stringify(Policy);\n    if (!Policy.version) Policy.version = '2.0';\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/json';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(PolicyStr));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketPolicy',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        action: 'policy',\n        body: PolicyStr,\n        headers: headers,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Bucket 的读取权限策略\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction getBucketPolicy(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketPolicy',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'policy',\n        rawBody: true,\n    }, function (err, data) {\n        if (err) {\n            if (err.statusCode && err.statusCode === 403) {\n                return callback(util.error(err, {ErrorStatus: 'Access Denied'}));\n            }\n            if (err.statusCode && err.statusCode === 405) {\n                return callback(util.error(err, {ErrorStatus: 'Method Not Allowed'}));\n            }\n            if (err.statusCode && err.statusCode === 404) {\n                return callback(util.error(err, {ErrorStatus: 'Policy Not Found'}));\n            }\n            return callback(err);\n        }\n        var Policy = {};\n        try {\n            Policy = JSON.parse(data.body);\n        } catch (e) {\n        }\n        callback(null, {\n            Policy: Policy,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 删除 Bucket 的 跨域设置\n * @param  {Object}  params                 参数对象，必须\n *     @param  {String}  params.Bucket      Bucket名称，必须\n *     @param  {String}  params.Region      地域名称，必须\n * @param  {Function}  callback             回调函数，必须\n * @return  {Object}  err                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                  返回的数据\n */\nfunction deleteBucketPolicy(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteBucketPolicy',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'policy',\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode || err.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 设置 Bucket 的标签\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n *     @param  {Array}   params.TagSet  标签设置，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction putBucketTagging(params, callback) {\n\n    var Tagging = params['Tagging'] || {};\n    var Tags = Tagging.TagSet || Tagging.Tags || params['Tags'] || [];\n    Tags = util.clone(util.isArray(Tags) ? Tags : [Tags]);\n    var xml = util.json2xml({Tagging: {TagSet: {Tag: Tags}}});\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketTagging',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'tagging',\n        headers: headers,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Bucket 的标签设置\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction getBucketTagging(params, callback) {\n\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketTagging',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'tagging',\n    }, function (err, data) {\n        if (err) {\n            if (err.statusCode === 404 && err.error && (err.error === \"Not Found\" || err.error.Code === 'NoSuchTagSet')) {\n                var result = {\n                    Tags: [],\n                    statusCode: err.statusCode,\n                };\n                err.headers && (result.headers = err.headers);\n                callback(null, result);\n            } else {\n                callback(err);\n            }\n            return;\n        }\n        var Tags = [];\n        try {\n            Tags = data.Tagging.TagSet.Tag || [];\n        } catch (e) {\n        }\n        Tags = util.clone(util.isArray(Tags) ? Tags : [Tags]);\n        callback(null, {\n            Tags: Tags,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 删除 Bucket 的 标签设置\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回的数据\n */\nfunction deleteBucketTagging(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteBucketTagging',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'tagging',\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\nfunction putBucketLifecycle(params, callback) {\n\n    var LifecycleConfiguration = params['LifecycleConfiguration'] || {};\n    var Rules = LifecycleConfiguration.Rules || params.Rules || [];\n    Rules = util.clone(Rules);\n    var xml = util.json2xml({LifecycleConfiguration: {Rule: Rules}});\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketLifecycle',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'lifecycle',\n        headers: headers,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\nfunction getBucketLifecycle(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketLifecycle',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'lifecycle',\n    }, function (err, data) {\n        if (err) {\n            if (err.statusCode === 404 && err.error && err.error.Code === 'NoSuchLifecycleConfiguration') {\n                var result = {\n                    Rules: [],\n                    statusCode: err.statusCode,\n                };\n                err.headers && (result.headers = err.headers);\n                callback(null, result);\n            } else {\n                callback(err);\n            }\n            return;\n        }\n        var Rules = [];\n        try {\n            Rules = data.LifecycleConfiguration.Rule || [];\n        } catch (e) {\n        }\n        Rules = util.clone(util.isArray(Rules) ? Rules : [Rules]);\n        callback(null, {\n            Rules: Rules,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\nfunction deleteBucketLifecycle(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteBucketLifecycle',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'lifecycle',\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\nfunction putBucketVersioning(params, callback) {\n\n    if (!params['VersioningConfiguration']) {\n        callback(util.error(new Error('missing param VersioningConfiguration')));\n        return;\n    }\n    var VersioningConfiguration = params['VersioningConfiguration'] || {};\n    var xml = util.json2xml({VersioningConfiguration: VersioningConfiguration});\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketVersioning',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'versioning',\n        headers: headers,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\nfunction getBucketVersioning(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketVersioning',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'versioning',\n    }, function (err, data) {\n        if (!err) {\n            !data.VersioningConfiguration && (data.VersioningConfiguration = {});\n        }\n        callback(err, data);\n    });\n}\n\nfunction putBucketReplication(params, callback) {\n    var ReplicationConfiguration = util.clone(params.ReplicationConfiguration);\n    var xml = util.json2xml({ReplicationConfiguration: ReplicationConfiguration});\n    xml = xml.replace(/<(\\/?)Rules>/ig, '<$1Rule>');\n    xml = xml.replace(/<(\\/?)Tags>/ig, '<$1Tag>');\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketReplication',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'replication',\n        headers: headers,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\nfunction getBucketReplication(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketReplication',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'replication',\n    }, function (err, data) {\n        if (err) {\n            if (err.statusCode === 404 && err.error && (err.error === 'Not Found' || err.error.Code === 'ReplicationConfigurationnotFoundError')) {\n                var result = {\n                    ReplicationConfiguration: {Rules: []},\n                    statusCode: err.statusCode,\n                };\n                err.headers && (result.headers = err.headers);\n                callback(null, result);\n            } else {\n                callback(err);\n            }\n            return;\n        }\n        if (!err) {\n            !data.ReplicationConfiguration && (data.ReplicationConfiguration = {});\n        }\n        if (data.ReplicationConfiguration.Rule) {\n            data.ReplicationConfiguration.Rules = util.makeArray(data.ReplicationConfiguration.Rule);\n            delete data.ReplicationConfiguration.Rule;\n        }\n        callback(err, data);\n    });\n}\n\nfunction deleteBucketReplication(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteBucketReplication',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'replication',\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 设置 Bucket 静态网站配置信息\n * @param  {Object}  params                                                 参数对象，必须\n *     @param  {String}  params.Bucket                                      Bucket名称，必须\n *     @param  {String}  params.Region                                      地域名称，必须\n *     @param  {Object}  params.WebsiteConfiguration                        地域名称，必须\n *         @param  {Object}   WebsiteConfiguration.IndexDocument            索引文档，必须\n *         @param  {Object}   WebsiteConfiguration.ErrorDocument            错误文档，非必须\n *         @param  {Object}   WebsiteConfiguration.RedirectAllRequestsTo    重定向所有请求，非必须\n *         @param  {Array}   params.RoutingRules                            重定向规则，非必须\n * @param  {Function}  callback                                             回调函数，必须\n * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                                                  返回数据\n */\nfunction putBucketWebsite(params, callback) {\n\n    if (!params['WebsiteConfiguration']) {\n        callback(util.error(new Error('missing param WebsiteConfiguration')));\n        return;\n    }\n\n    var WebsiteConfiguration = util.clone(params['WebsiteConfiguration'] || {});\n    var RoutingRules = WebsiteConfiguration['RoutingRules'] || WebsiteConfiguration['RoutingRule'] || [];\n    RoutingRules = util.isArray(RoutingRules) ? RoutingRules : [RoutingRules];\n    delete WebsiteConfiguration.RoutingRule;\n    delete WebsiteConfiguration.RoutingRules;\n    if (RoutingRules.length) WebsiteConfiguration.RoutingRules = { RoutingRule: RoutingRules };\n    var xml = util.json2xml({ WebsiteConfiguration: WebsiteConfiguration });\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketWebsite',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'website',\n        headers: headers,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Bucket 的静态网站配置信息\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction getBucketWebsite(params, callback) {\n\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketWebsite',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        headers: params.Headers,\n        action: 'website',\n    }, function (err, data) {\n        if (err) {\n            if(err.statusCode === 404 && err.error.Code === 'NoSuchWebsiteConfiguration'){\n                var result = {\n                    WebsiteConfiguration: {},\n                    statusCode: err.statusCode,\n                };\n                err.headers && (result.headers = err.headers);\n                callback(null, result);\n            } else {\n                callback(err);\n            }\n            return;\n        }\n\n        var WebsiteConfiguration = data.WebsiteConfiguration || {};\n        if (WebsiteConfiguration['RoutingRules']) {\n            var RoutingRules = util.clone(WebsiteConfiguration['RoutingRules'].RoutingRule || []);\n            RoutingRules = util.makeArray(RoutingRules);\n            WebsiteConfiguration.RoutingRules = RoutingRules;\n        }\n\n        callback(null, {\n            WebsiteConfiguration: WebsiteConfiguration,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 删除 Bucket 的静态网站配置\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction deleteBucketWebsite(params, callback) {\n\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteBucketWebsite',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'website',\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 设置 Bucket 的防盗链白名单或者黑名单\n * @param  {Object}  params                                                 参数对象，必须\n *     @param  {String}  params.Bucket                                      Bucket名称，必须\n *     @param  {String}  params.Region                                      地域名称，必须\n *     @param  {Object}  params.RefererConfiguration                        地域名称，必须\n *         @param  {String}   RefererConfiguration.Status                   是否开启防盗链，枚举值：Enabled、Disabled\n *         @param  {String}   RefererConfiguration.RefererType              防盗链类型，枚举值：Black-List、White-List，必须\n *         @param  {Array}   RefererConfiguration.DomianList.Domain         生效域名，必须\n *         @param  {String}   RefererConfiguration.EmptyReferConfiguration  ，非必须\n * @param  {Function}  callback                                             回调函数，必须\n * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                                                  返回数据\n */\nfunction putBucketReferer(params, callback) {\n\n    if (!params['RefererConfiguration']) {\n        callback(util.error(new Error('missing param RefererConfiguration')));\n        return;\n    }\n\n    var RefererConfiguration = util.clone(params['RefererConfiguration'] || {});\n    var DomainList = RefererConfiguration['DomainList'] || {};\n    var Domains = DomainList['Domains'] || DomainList['Domain'] || [];\n    Domains = util.isArray(Domains) ? Domains : [Domains];\n    if (Domains.length) RefererConfiguration.DomainList = {Domain: Domains};\n    var xml = util.json2xml({ RefererConfiguration: RefererConfiguration });\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketReferer',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'referer',\n        headers: headers,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Bucket 的防盗链白名单或者黑名单\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction getBucketReferer(params, callback) {\n\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketReferer',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        headers: params.Headers,\n        action: 'referer',\n    }, function (err, data) {\n        if (err) {\n            if(err.statusCode === 404 && err.error.Code === 'NoSuchRefererConfiguration'){\n                var result = {\n                    WebsiteConfiguration: {},\n                    statusCode: err.statusCode,\n                };\n                err.headers && (result.headers = err.headers);\n                callback(null, result);\n            } else {\n                callback(err);\n            }\n            return;\n        }\n\n        var RefererConfiguration = data.RefererConfiguration || {};\n        if (RefererConfiguration['DomainList']) {\n            var Domains = util.makeArray(RefererConfiguration['DomainList'].Domain || []);\n            RefererConfiguration.DomainList = {Domains: Domains};\n        }\n\n        callback(null, {\n            RefererConfiguration: RefererConfiguration,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 设置 Bucket 自定义域名\n * @param  {Object}  params                                                 参数对象，必须\n *     @param  {String}  params.Bucket                                      Bucket名称，必须\n *     @param  {String}  params.Region                                      地域名称，必须\n * @param  {Function}  callback                                             回调函数，必须\n * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                                                  返回数据\n */\nfunction putBucketDomain(params, callback) {\n\n    var DomainConfiguration = params['DomainConfiguration'] || {};\n    var DomainRule = DomainConfiguration.DomainRule || params.DomainRule || [];\n    DomainRule = util.clone(DomainRule);\n    var xml = util.json2xml({DomainConfiguration: {DomainRule: DomainRule}});\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketDomain',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'domain',\n        headers: headers,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Bucket 的自定义域名\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction getBucketDomain(params, callback) {\n\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketDomain',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'domain',\n    }, function (err, data) {\n        if (err) return callback(err);\n\n        var DomainRule = [];\n        try {\n            DomainRule = data.DomainConfiguration.DomainRule || [];\n        } catch (e) {\n        }\n        DomainRule = util.clone(util.isArray(DomainRule) ? DomainRule : [DomainRule]);\n        callback(null, {\n            DomainRule: DomainRule,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 删除 Bucket 自定义域名\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction deleteBucketDomain(params, callback) {\n\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteBucketDomain',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'domain',\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 设置 Bucket 的回源\n * @param  {Object}  params                                                 参数对象，必须\n *     @param  {String}  params.Bucket                                      Bucket名称，必须\n *     @param  {String}  params.Region                                      地域名称，必须\n * @param  {Function}  callback                                             回调函数，必须\n * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                                                  返回数据\n */\nfunction putBucketOrigin(params, callback){\n    var OriginConfiguration = params['OriginConfiguration'] || {};\n    var OriginRule = OriginConfiguration.OriginRule || params.OriginRule || [];\n    OriginRule = util.clone(OriginRule);\n    var xml = util.json2xml({OriginConfiguration: {OriginRule: OriginRule}});\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketOrigin',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'origin',\n        headers: headers,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Bucket 的回源\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction getBucketOrigin(params, callback) {\n\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketOrigin',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'origin',\n    }, function (err, data) {\n        if (err) return callback(err);\n\n        var OriginRule = [];\n        try {\n            OriginRule = data.OriginConfiguration.OriginRule || [];\n        } catch (e) {\n        }\n        OriginRule = util.clone(util.isArray(OriginRule) ? OriginRule : [OriginRule]);\n        callback(null, {\n            OriginRule: OriginRule,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 删除 Bucket 的回源\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction deleteBucketOrigin(params, callback) {\n\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteBucketOrigin',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'origin',\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 设置 Bucket 的日志记录\n * @param  {Object}  params                                                 参数对象，必须\n *     @param  {String}  params.Bucket                                      Bucket名称，必须\n *     @param  {String}  params.Region                                      地域名称，必须\n *     @param  {(Object|String)}  params.BucketLoggingStatus                         说明日志记录配置的状态，如果无子节点信息则意为关闭日志记录，必须\n * @param  {Function}  callback                                             回调函数，必须\n * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                                                  返回数据\n */\nfunction putBucketLogging(params, callback) {\n    var xml = util.json2xml({\n        BucketLoggingStatus: params['BucketLoggingStatus'] || ''\n    });\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketLogging',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'logging',\n        headers: headers,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Bucket 的日志记录\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction getBucketLogging(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketLogging',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'logging',\n    }, function (err, data) {\n        if (err) return callback(err);\n        callback(null, {\n            BucketLoggingStatus: data.BucketLoggingStatus,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 创建/编辑 Bucket 的清单任务\n * @param  {Object}  params                                                 参数对象，必须\n *     @param  {String}  params.Bucket                                      Bucket名称，必须\n *     @param  {String}  params.Region                                      地域名称，必须\n *     @param  {String}  params.Id                                          清单任务的名称，必须\n *     @param  {Object}  params.InventoryConfiguration                      包含清单的配置参数，必须\n * @param  {Function}  callback                                             回调函数，必须\n * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                                                  返回数据\n */\nfunction putBucketInventory(params, callback) {\n    var InventoryConfiguration = util.clone(params['InventoryConfiguration']);\n\n    if (InventoryConfiguration.OptionalFields) {\n        var Field = InventoryConfiguration.OptionalFields || [];\n        InventoryConfiguration.OptionalFields = {\n            Field: Field\n        };\n    }\n\n    if (InventoryConfiguration.Destination\n        && InventoryConfiguration.Destination.COSBucketDestination\n        && InventoryConfiguration.Destination.COSBucketDestination.Encryption\n    ) {\n        var Encryption = InventoryConfiguration.Destination.COSBucketDestination.Encryption;\n        if (Object.keys(Encryption).indexOf('SSECOS') > -1) {\n            Encryption['SSE-COS'] = Encryption['SSECOS'];\n            delete Encryption['SSECOS'];\n        }\n    }\n\n    var xml = util.json2xml({\n        InventoryConfiguration: InventoryConfiguration\n    });\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketInventory',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'inventory',\n        qs: {\n            id: params['Id']\n        },\n        headers: headers,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Bucket 的清单任务信息\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n *     @param  {String}  params.Id      清单任务的名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction getBucketInventory(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketInventory',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'inventory',\n        qs: {\n            id: params['Id']\n        }\n    }, function (err, data) {\n        if (err) return callback(err);\n\n        var InventoryConfiguration = data['InventoryConfiguration'];\n        if (InventoryConfiguration && InventoryConfiguration.OptionalFields && InventoryConfiguration.OptionalFields.Field) {\n            var Field = InventoryConfiguration.OptionalFields.Field;\n            if (!util.isArray(Field)) {\n                Field = [Field];\n            }\n            InventoryConfiguration.OptionalFields = Field;\n        }\n        if (InventoryConfiguration.Destination\n            && InventoryConfiguration.Destination.COSBucketDestination\n            && InventoryConfiguration.Destination.COSBucketDestination.Encryption\n        ) {\n            var Encryption = InventoryConfiguration.Destination.COSBucketDestination.Encryption;\n            if (Object.keys(Encryption).indexOf('SSE-COS') > -1) {\n                Encryption['SSECOS'] = Encryption['SSE-COS'];\n                delete Encryption['SSE-COS'];\n            }\n        }\n\n        callback(null, {\n            InventoryConfiguration: InventoryConfiguration,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Bucket 的清单任务信息\n * @param  {Object}  params                             参数对象，必须\n *     @param  {String}  params.Bucket                  Bucket名称，必须\n *     @param  {String}  params.Region                  地域名称，必须\n *     @param  {String}  params.ContinuationToken       当 COS 响应体中 IsTruncated 为 true，且 NextContinuationToken 节点中存在参数值时，您可以将这个参数作为 continuation-token 参数值，以获取下一页的清单任务信息，非必须\n * @param  {Function}  callback                         回调函数，必须\n * @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                              返回数据\n */\nfunction listBucketInventory(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:ListBucketInventory',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'inventory',\n        qs: {\n            'continuation-token': params['ContinuationToken']\n        }\n    }, function (err, data) {\n        if (err) return callback(err);\n        var ListInventoryConfigurationResult = data['ListInventoryConfigurationResult'];\n        var InventoryConfigurations = ListInventoryConfigurationResult.InventoryConfiguration || [];\n        InventoryConfigurations = util.isArray(InventoryConfigurations) ? InventoryConfigurations : [InventoryConfigurations];\n        delete ListInventoryConfigurationResult['InventoryConfiguration'];\n        util.each(InventoryConfigurations, function (InventoryConfiguration) {\n            if (InventoryConfiguration && InventoryConfiguration.OptionalFields && InventoryConfiguration.OptionalFields.Field) {\n                var Field = InventoryConfiguration.OptionalFields.Field;\n                if (!util.isArray(Field)) {\n                    Field = [Field];\n                }\n                InventoryConfiguration.OptionalFields = Field;\n            }\n\n            if (InventoryConfiguration.Destination\n                && InventoryConfiguration.Destination.COSBucketDestination\n                && InventoryConfiguration.Destination.COSBucketDestination.Encryption\n            ) {\n                var Encryption = InventoryConfiguration.Destination.COSBucketDestination.Encryption;\n                if (Object.keys(Encryption).indexOf('SSE-COS') > -1) {\n                    Encryption['SSECOS'] = Encryption['SSE-COS'];\n                    delete Encryption['SSE-COS'];\n                }\n            }\n        });\n        ListInventoryConfigurationResult.InventoryConfigurations = InventoryConfigurations;\n        util.extend(ListInventoryConfigurationResult, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n        callback(null, ListInventoryConfigurationResult);\n    });\n}\n\n/**\n * 删除 Bucket 的清单任务\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n *     @param  {String}  params.Id      清单任务的名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回数据\n */\nfunction deleteBucketInventory(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteBucketInventory',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'inventory',\n        qs: {\n            id: params['Id']\n        }\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/* 全球加速 */\nfunction putBucketAccelerate(params, callback) {\n\n    if (!params['AccelerateConfiguration']) {\n        callback(util.error(new Error('missing param AccelerateConfiguration')));\n        return;\n    }\n\n    var configuration = { AccelerateConfiguration: params.AccelerateConfiguration || {} };\n\n    var xml = util.json2xml(configuration);\n\n    var headers = {};\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketAccelerate',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'accelerate',\n        headers: headers,\n    }, function (err, data) {\n        if (err) return callback(err);\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\nfunction getBucketAccelerate(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketAccelerate',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        action: 'accelerate',\n    }, function (err, data) {\n        if (!err) {\n            !data.AccelerateConfiguration && (data.AccelerateConfiguration = {});\n        }\n        callback(err, data);\n    });\n}\n\nfunction putBucketEncryption(params, callback) {\n    var conf = params.ServerSideEncryptionConfiguration || {};\n    var Rules = conf.Rule || conf.Rules || [];\n    var xml = util.json2xml({ServerSideEncryptionConfiguration: {Rule:Rules}});\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutBucketEncryption',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'encryption',\n        headers: headers,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\nfunction getBucketEncryption(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketEncryption',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'encryption',\n    }, function (err, data) {\n        if (err) {\n            if (err.statusCode === 404 && err.code === 'NoSuchEncryptionConfiguration') {\n                var result = {\n                    EncryptionConfiguration: {Rules: []},\n                    statusCode: err.statusCode,\n                };\n                err.headers && (result.headers = err.headers);\n                callback(null, result);\n            } else {\n                callback(err);\n            }\n            return;\n        }\n        var Rules = util.makeArray(data.EncryptionConfiguration && data.EncryptionConfiguration.Rule || []);\n        data.EncryptionConfiguration = {Rules: Rules};\n        callback(err, data);\n    });\n}\n\nfunction deleteBucketEncryption(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteBucketReplication',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'encryption',\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n// Object 相关\n\n/**\n * 取回对应Object的元数据，Head的权限与Get的权限一致\n * @param  {Object}  params                         参数对象，必须\n *     @param  {String}  params.Bucket              Bucket名称，必须\n *     @param  {String}  params.Region              地域名称，必须\n *     @param  {String}  params.Key                 文件名称，必须\n *     @param  {String}  params.IfModifiedSince     当Object在指定时间后被修改，则返回对应Object元信息，否则返回304，非必须\n * @param  {Function}  callback                     回调函数，必须\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                          为指定 object 的元数据，如果设置了 IfModifiedSince ，且文件未修改，则返回一个对象，NotModified 属性为 true\n *     @return  {Boolean}  data.NotModified         是否在 IfModifiedSince 时间点之后未修改该 object，则为 true\n */\nfunction headObject(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:HeadObject',\n        method: 'HEAD',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        VersionId: params.VersionId,\n        headers: params.Headers,\n    }, function (err, data) {\n        if (err) {\n            var statusCode = err.statusCode;\n            if (params.Headers['If-Modified-Since'] && statusCode && statusCode === 304) {\n                return callback(null, {\n                    NotModified: true,\n                    statusCode: statusCode,\n                });\n            }\n            return callback(err);\n        }\n        data.ETag = util.attr(data.headers, 'etag', '');\n        callback(null, data);\n    });\n}\n\n\nfunction listObjectVersions(params, callback) {\n    var reqParams = {};\n    reqParams['prefix'] = params['Prefix'] || '';\n    reqParams['delimiter'] = params['Delimiter'];\n    reqParams['key-marker'] = params['KeyMarker'];\n    reqParams['version-id-marker'] = params['VersionIdMarker'];\n    reqParams['max-keys'] = params['MaxKeys'];\n    reqParams['encoding-type'] = params['EncodingType'];\n\n    submitRequest.call(this, {\n        Action: 'name/cos:GetBucketObjectVersions',\n        ResourceKey: reqParams['prefix'],\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        qs: reqParams,\n        action: 'versions',\n    }, function (err, data) {\n        if (err) return callback(err);\n        var ListVersionsResult = data.ListVersionsResult || {};\n        var DeleteMarkers = ListVersionsResult.DeleteMarker || [];\n        DeleteMarkers = util.isArray(DeleteMarkers) ? DeleteMarkers : [DeleteMarkers];\n        var Versions = ListVersionsResult.Version || [];\n        Versions = util.isArray(Versions) ? Versions : [Versions];\n\n        var result = util.clone(ListVersionsResult);\n        delete result.DeleteMarker;\n        delete result.Version;\n        util.extend(result, {\n            DeleteMarkers: DeleteMarkers,\n            Versions: Versions,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n\n        callback(null, result);\n    });\n}\n\n/**\n * 下载 object\n * @param  {Object}  params                                 参数对象，必须\n *     @param  {String}  params.Bucket                      Bucket名称，必须\n *     @param  {String}  params.Region                      地域名称，必须\n *     @param  {String}  params.Key                         文件名称，必须\n *     @param  {WriteStream}  params.Output                 文件写入流，非必须\n *     @param  {String}  params.IfModifiedSince             当Object在指定时间后被修改，则返回对应Object元信息，否则返回304，非必须\n *     @param  {String}  params.IfUnmodifiedSince           如果文件修改时间早于或等于指定时间，才返回文件内容。否则返回 412 (precondition failed)，非必须\n *     @param  {String}  params.IfMatch                     当 ETag 与指定的内容一致，才返回文件。否则返回 412 (precondition failed)，非必须\n *     @param  {String}  params.IfNoneMatch                 当 ETag 与指定的内容不一致，才返回文件。否则返回304 (not modified)，非必须\n *     @param  {String}  params.ResponseContentType         设置返回头部中的 Content-Type 参数，非必须\n *     @param  {String}  params.ResponseContentLanguage     设置返回头部中的 Content-Language 参数，非必须\n *     @param  {String}  params.ResponseExpires             设置返回头部中的 Content-Expires 参数，非必须\n *     @param  {String}  params.ResponseCacheControl        设置返回头部中的 Cache-Control 参数，非必须\n *     @param  {String}  params.ResponseContentDisposition  设置返回头部中的 Content-Disposition 参数，非必须\n *     @param  {String}  params.ResponseContentEncoding     设置返回头部中的 Content-Encoding 参数，非必须\n * @param  {Function}  callback                             回调函数，必须\n * @param  {Object}  err                                    请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @param  {Object}  data                                   为对应的 object 数据，包括 body 和 headers\n */\nfunction getObject(params, callback) {\n    var reqParams = params.Query || {};\n    var reqParamsStr = params.QueryString || '';\n\n    reqParams['response-content-type'] = params['ResponseContentType'];\n    reqParams['response-content-language'] = params['ResponseContentLanguage'];\n    reqParams['response-expires'] = params['ResponseExpires'];\n    reqParams['response-cache-control'] = params['ResponseCacheControl'];\n    reqParams['response-content-disposition'] = params['ResponseContentDisposition'];\n    reqParams['response-content-encoding'] = params['ResponseContentEncoding'];\n\n    var BodyType;\n\n    var self = this;\n    var outputStream = params.Output;\n    if (params.ReturnStream) {\n        outputStream = new Stream.PassThrough();\n        BodyType = 'stream';\n    } else if (outputStream && typeof outputStream === 'string') {\n        outputStream = fs.createWriteStream(outputStream);\n        BodyType = 'stream';\n    } else if (outputStream && typeof outputStream.pipe === 'function') {\n        BodyType = 'stream';\n    } else {\n        BodyType = 'buffer';\n    }\n\n    var onProgress = params.onProgress;\n    var onDownloadProgress = (function () {\n        var time0 = Date.now();\n        var size0 = 0;\n        var FinishSize = 0;\n        var FileSize = 0;\n        var progressTimer;\n        var update = function () {\n            progressTimer = 0;\n            if (onProgress && (typeof onProgress === 'function')) {\n                var time1 = Date.now();\n                var speed = parseInt((FinishSize - size0) / ((time1 - time0) / 1000) * 100) / 100 || 0;\n                var percent = parseInt(FinishSize / FileSize * 100) / 100 || 0;\n                time0 = time1;\n                size0 = FinishSize;\n                try {\n                    onProgress({\n                        loaded: FinishSize,\n                        total: FileSize,\n                        speed: speed,\n                        percent: percent\n                    });\n                } catch (e) {\n                }\n            }\n        };\n        return function (info, immediately) {\n            if (info && info.loaded) {\n                FinishSize = info.loaded;\n                FileSize = info.total;\n            }\n            if (immediately) {\n                clearTimeout(progressTimer);\n                update();\n            } else {\n                if (progressTimer) return;\n                progressTimer = setTimeout(update, self.options.ProgressInterval || 1000);\n            }\n        };\n    })();\n\n    // 如果用户自己传入了 output\n    submitRequest.call(this, {\n        Action: 'name/cos:GetObject',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        VersionId: params.VersionId,\n        headers: params.Headers,\n        qs: reqParams,\n        qsStr: reqParamsStr,\n        rawBody: true,\n        outputStream: outputStream,\n        onDownloadProgress: onDownloadProgress,\n    }, function (err, data) {\n        onDownloadProgress(null, true);\n        if (err) {\n            var statusCode = err.statusCode;\n            if (params.Headers['If-Modified-Since'] && statusCode && statusCode === 304) {\n                return callback(null, {NotModified: true});\n            }\n            if (outputStream) outputStream.emit('error', err);\n            return callback(err);\n        }\n        var result = {};\n        if (data.body) {\n            if (BodyType === 'buffer') {\n                result.Body = Buffer.from(data.body);\n            } else if (BodyType === 'string') {\n                result.Body = data.body;\n            }\n        }\n        util.extend(result, {\n            ETag: util.attr(data.headers, 'etag', ''),\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n        callback(null, result);\n    });\n    if (params.ReturnStream) return outputStream;\n}\n\nfunction getObjectStream(params, callback) {\n    params.ReturnStream = true;\n    return getObject.call(this, params, callback);\n}\n\n/**\n * 上传 object\n * @param  {Object} params                                          参数对象，必须\n *     @param  {String}  params.Bucket                              Bucket名称，必须\n *     @param  {String}  params.Region                              地域名称，必须\n *     @param  {String}  params.Key                                 文件名称，必须\n *     @param  {Buffer || ReadStream || String}  params.Body        上传文件的内容或流或字符串\n *     @param  {String}  params.CacheControl                        RFC 2616 中定义的缓存策略，将作为 Object 元数据保存，非必须\n *     @param  {String}  params.ContentDisposition                  RFC 2616 中定义的文件名称，将作为 Object 元数据保存，非必须\n *     @param  {String}  params.ContentEncoding                     RFC 2616 中定义的编码格式，将作为 Object 元数据保存，非必须\n *     @param  {String}  params.ContentLength                       RFC 2616 中定义的 HTTP 请求内容长度（字节），必须\n *     @param  {String}  params.ContentType                         RFC 2616 中定义的内容类型（MIME），将作为 Object 元数据保存，非必须\n *     @param  {String}  params.Expect                              当使用 Expect: 100-continue 时，在收到服务端确认后，才会发送请求内容，非必须\n *     @param  {String}  params.Expires                             RFC 2616 中定义的过期时间，将作为 Object 元数据保存，非必须\n *     @param  {String}  params.ACL                                 允许用户自定义文件权限，有效值：private | public-read，非必须\n *     @param  {String}  params.GrantRead                           赋予被授权者读取对象的权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\n *     @param  {String}  params.GrantReadAcp                        赋予被授权者读取对象的访问控制列表（ACL）的权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\n *     @param  {String}  params.GrantWriteAcp                       赋予被授权者写入对象的访问控制列表（ACL）的权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\n *     @param  {String}  params.GrantFullControl                    赋予被授权者操作对象的所有权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\n *     @param  {String}  params.StorageClass                        设置对象的存储级别，枚举值：STANDARD、STANDARD_IA、ARCHIVE，默认值：STANDARD，非必须\n *     @param  {String}  params.x-cos-meta-*                        允许用户自定义的头部信息，将作为对象的元数据保存。大小限制2KB，非必须\n *     @param  {String}  params.ContentSha1                         RFC 3174 中定义的 160-bit 内容 SHA-1 算法校验，非必须\n *     @param  {String}  params.ServerSideEncryption                支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\n *     @param  {Function}  params.onProgress                        上传进度回调函数\n * @param  {Function}  callback                                     回调函数，必须\n * @return  {Object}  err                                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                                          为对应的 object 数据\n *     @return  {String}  data.ETag                                 为对应上传文件的 ETag 值\n */\nfunction putObject(params, callback) {\n    var self = this;\n    var FileSize = params.ContentLength;\n    var onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);\n\n    // 特殊处理 Cache-Control、Content-Type，避免代理更改这两个字段导致写入到 Object 属性里\n    var headers = params.Headers;\n    if (!headers['Cache-Control'] && !headers['cache-control']) headers['Cache-Control'] = '';\n\n    util.getBodyMd5(self.options.UploadCheckContentMd5, params.Body, function (md5) {\n        if (md5) (params.Headers['Content-MD5'] = util.binaryBase64(md5));\n        if (params.ContentLength !== undefined) {\n            params.Headers['Content-Length'] = params.ContentLength;\n        }\n        onProgress(null, true); // 任务状态开始 uploading\n        submitRequest.call(self, {\n            Action: 'name/cos:PutObject',\n            TaskId: params.TaskId,\n            method: 'PUT',\n            Bucket: params.Bucket,\n            Region: params.Region,\n            Key: params.Key,\n            headers: params.Headers,\n            qs: params.Query,\n            body: params.Body,\n            onProgress: onProgress,\n        }, function (err, data) {\n            if (err) {\n                onProgress(null, true);\n                return callback(err);\n            }\n            onProgress({loaded: FileSize, total: FileSize}, true);\n            if (data) {\n                var url = getUrl({\n                    ForcePathStyle: self.options.ForcePathStyle,\n                    protocol: self.options.Protocol,\n                    domain: self.options.Domain,\n                    bucket: params.Bucket,\n                    region: !self.options.UseAccelerate ? params.Region : 'accelerate',\n                    object: params.Key,\n                });\n                url = url.substr(url.indexOf('://') + 3);\n                data.Location = url;\n                if (data.headers && data.headers.etag) data.ETag = data.headers.etag;\n                return callback(null, data);\n            }\n            callback(null, data);\n        });\n    });\n}\n\n/**\n * 删除 object\n * @param  {Object}  params                     参数对象，必须\n *     @param  {String}  params.Bucket          Bucket名称，必须\n *     @param  {String}  params.Region          地域名称，必须\n *     @param  {String}  params.Key             object名称，必须\n * @param  {Function}  callback                 回调函数，必须\n * @param  {Object}  err                        请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @param  {Object}  data                       删除操作成功之后返回的数据\n */\nfunction deleteObject(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteObject',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        headers: params.Headers,\n        VersionId: params.VersionId,\n    }, function (err, data) {\n        if (err) {\n            var statusCode = err.statusCode;\n            if (statusCode && statusCode === 404) {\n                return callback(null, {BucketNotFound: true, statusCode: statusCode,});\n            } else {\n                return callback(err);\n            }\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 object 的 权限列表\n * @param  {Object}  params                         参数对象，必须\n *     @param  {String}  params.Bucket              Bucket名称，必须\n *     @param  {String}  params.Region              地域名称，必须\n *     @param  {String}  params.Key                 object名称，必须\n * @param  {Function}  callback                     回调函数，必须\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                          返回的数据\n *     @return  {Object}  data.AccessControlPolicy  权限列表\n */\nfunction getObjectAcl(params, callback) {\n    var reqParams = {};\n\n    if (params.VersionId) {\n        reqParams.versionId = params.VersionId;\n    }\n    submitRequest.call(this, {\n        Action: 'name/cos:GetObjectACL',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        headers: params.Headers,\n        qs: reqParams,\n        action: 'acl',\n    }, function (err, data) {\n        if (err) return callback(err);\n        var AccessControlPolicy = data.AccessControlPolicy || {};\n        var Owner = AccessControlPolicy.Owner || {};\n        var Grant = AccessControlPolicy.AccessControlList && AccessControlPolicy.AccessControlList.Grant || [];\n        Grant = util.isArray(Grant) ? Grant : [Grant];\n        var result = decodeAcl(AccessControlPolicy);\n        delete result.GrantWrite;\n        if (data.headers && data.headers['x-cos-acl']) {\n            result.ACL = data.headers['x-cos-acl'];\n        }\n        result = util.extend(result, {\n            Owner: Owner,\n            Grants: Grant,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n        callback(null, result);\n    });\n}\n\n/**\n * 设置 object 的 权限列表\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n *     @param  {String}  params.Key     object名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回的数据\n */\nfunction putObjectAcl(params, callback) {\n    var headers = params.Headers;\n\n    var xml = '';\n    if (params['AccessControlPolicy']) {\n        var AccessControlPolicy = util.clone(params['AccessControlPolicy'] || {});\n        var Grants = AccessControlPolicy.Grants || AccessControlPolicy.Grant;\n        Grants = util.isArray(Grants) ? Grants : [Grants];\n        delete AccessControlPolicy.Grant;\n        delete AccessControlPolicy.Grants;\n        AccessControlPolicy.AccessControlList = {Grant: Grants};\n        xml = util.json2xml({AccessControlPolicy: AccessControlPolicy});\n\n        headers['Content-Type'] = 'application/xml';\n        headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n    }\n\n    // Grant Header 去重\n    util.each(headers, function (val, key) {\n        if (key.indexOf('x-cos-grant-') === 0) {\n            headers[key] = uniqGrant(headers[key]);\n        }\n    });\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutObjectACL',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        action: 'acl',\n        headers: headers,\n        body: xml,\n    }, function (err, data) {\n        if (err) return callback(err);\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * Options Object请求实现跨域访问的预请求。即发出一个 OPTIONS 请求给服务器以确认是否可以进行跨域操作。\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n *     @param  {String}  params.Key     object名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data              返回的数据\n */\nfunction optionsObject(params, callback) {\n\n    var headers = params.Headers;\n    headers['Origin'] = params['Origin'];\n    headers['Access-Control-Request-Method'] = params['AccessControlRequestMethod'];\n    headers['Access-Control-Request-Headers'] = params['AccessControlRequestHeaders'];\n\n    submitRequest.call(this, {\n        Action: 'name/cos:OptionsObject',\n        method: 'OPTIONS',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        headers: headers,\n    }, function (err, data) {\n        if (err) {\n            if (err.statusCode && err.statusCode === 403) {\n                return callback(null, {\n                    OptionsForbidden: true,\n                    statusCode: err.statusCode\n                });\n            }\n            return callback(err);\n        }\n\n        var headers = data.headers || {};\n        callback(null, {\n            AccessControlAllowOrigin: headers['access-control-allow-origin'],\n            AccessControlAllowMethods: headers['access-control-allow-methods'],\n            AccessControlAllowHeaders: headers['access-control-allow-headers'],\n            AccessControlExposeHeaders: headers['access-control-expose-headers'],\n            AccessControlMaxAge: headers['access-control-max-age'],\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * @param  {Object}                                     参数列表\n *     @param  {String}  Bucket                         Bucket 名称\n *     @param  {String}  Region                         地域名称\n *     @param  {String}  Key                            文件名称\n *     @param  {String}  CopySource                     源文件URL绝对路径，可以通过versionid子资源指定历史版本\n *     @param  {String}  ACL                            允许用户自定义文件权限。有效值：private，public-read默认值：private。\n *     @param  {String}  GrantRead                      赋予被授权者读的权限，格式 x-cos-grant-read: uin=\" \",uin=\" \"，当需要给子账户授权时，uin=\"RootAcountID/SubAccountID\"，当需要给根账户授权时，uin=\"RootAcountID\"。\n *     @param  {String}  GrantWrite                     赋予被授权者写的权限，格式 x-cos-grant-write: uin=\" \",uin=\" \"，当需要给子账户授权时，uin=\"RootAcountID/SubAccountID\"，当需要给根账户授权时，uin=\"RootAcountID\"。\n *     @param  {String}  GrantFullControl               赋予被授权者读写权限，格式 x-cos-grant-full-control: uin=\" \",uin=\" \"，当需要给子账户授权时，uin=\"RootAcountID/SubAccountID\"，当需要给根账户授权时，uin=\"RootAcountID\"。\n *     @param  {String}  MetadataDirective              是否拷贝元数据，枚举值：Copy, Replaced，默认值Copy。假如标记为Copy，忽略Header中的用户元数据信息直接复制；假如标记为Replaced，按Header信息修改元数据。当目标路径和原路径一致，即用户试图修改元数据时，必须为Replaced\n *     @param  {String}  CopySourceIfModifiedSince      当Object在指定时间后被修改，则执行操作，否则返回412。可与x-cos-copy-source-If-None-Match一起使用，与其他条件联合使用返回冲突。\n *     @param  {String}  CopySourceIfUnmodifiedSince    当Object在指定时间后未被修改，则执行操作，否则返回412。可与x-cos-copy-source-If-Match一起使用，与其他条件联合使用返回冲突。\n *     @param  {String}  CopySourceIfMatch              当Object的ETag和给定一致时，则执行操作，否则返回412。可与x-cos-copy-source-If-Unmodified-Since一起使用，与其他条件联合使用返回冲突。\n *     @param  {String}  CopySourceIfNoneMatch          当Object的ETag和给定不一致时，则执行操作，否则返回412。可与x-cos-copy-source-If-Modified-Since一起使用，与其他条件联合使用返回冲突。\n *     @param  {String}  StorageClass                   存储级别，枚举值：存储级别，枚举值：Standard, Standard_IA，Archive；默认值：Standard\n *     @param  {String}  CacheControl                   指定所有缓存机制在整个请求/响应链中必须服从的指令。\n *     @param  {String}  ContentDisposition             MIME 协议的扩展，MIME 协议指示 MIME 用户代理如何显示附加的文件\n *     @param  {String}  ContentEncoding                HTTP 中用来对「采用何种编码格式传输正文」进行协定的一对头部字段\n *     @param  {String}  ContentLength                  设置响应消息的实体内容的大小，单位为字节\n *     @param  {String}  ContentType                    RFC 2616 中定义的 HTTP 请求内容类型（MIME），例如text/plain\n *     @param  {String}  Expect                         请求的特定的服务器行为\n *     @param  {String}  Expires                        响应过期的日期和时间\n *     @param  {String}  params.ServerSideEncryption   支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\n *     @param  {String}  ContentLanguage                指定内容语言\n *     @param  {String}  x-cos-meta-*                   允许用户自定义的头部信息，将作为 Object 元数据返回。大小限制2K。\n */\nfunction putObjectCopy(params, callback) {\n\n    // 特殊处理 Cache-Control\n    var headers = params.Headers;\n    if (!headers['Cache-Control'] && !headers['cache-control']) headers['Cache-Control'] = '';\n\n    var CopySource = params.CopySource || '';\n    var m = util.getSourceParams.call(this, CopySource);\n    if (!m) {\n        callback(util.error(new Error('CopySource format error')));\n        return;\n    }\n\n    var SourceBucket = m.Bucket;\n    var SourceRegion = m.Region;\n    var SourceKey = decodeURIComponent(m.Key);\n\n    submitRequest.call(this, {\n        Scope: [{\n            action: 'name/cos:GetObject',\n            bucket: SourceBucket,\n            region: SourceRegion,\n            prefix: SourceKey,\n        }, {\n            action: 'name/cos:PutObject',\n            bucket: params.Bucket,\n            region: params.Region,\n            prefix: params.Key,\n        }],\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        VersionId: params.VersionId,\n        headers: params.Headers,\n    }, function (err, data) {\n        if (err) return callback(err);\n        var result = util.clone(data.CopyObjectResult || {});\n        util.extend(result, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n        callback(null, result);\n    });\n}\n\nfunction uploadPartCopy(params, callback) {\n\n    var CopySource = params.CopySource || '';\n    var m = util.getSourceParams.call(this, CopySource);\n    if (!m) {\n        callback(util.error(new Error('CopySource format error')));\n        return;\n    }\n\n    var SourceBucket = m.Bucket;\n    var SourceRegion = m.Region;\n    var SourceKey = decodeURIComponent(m.Key);\n\n    submitRequest.call(this, {\n        Scope: [{\n            action: 'name/cos:GetObject',\n            bucket: SourceBucket,\n            region: SourceRegion,\n            prefix: SourceKey,\n        }, {\n            action: 'name/cos:PutObject',\n            bucket: params.Bucket,\n            region: params.Region,\n            prefix: params.Key,\n        }],\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        VersionId: params.VersionId,\n        qs: {\n            partNumber: params['PartNumber'],\n            uploadId: params['UploadId'],\n        },\n        headers: params.Headers,\n    }, function (err, data) {\n        if (err) return callback(err);\n        var result = util.clone(data.CopyPartResult || {});\n        util.extend(result, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n        callback(null, result);\n    });\n}\n\nfunction deleteMultipleObject(params, callback) {\n    var Objects = params.Objects || [];\n    var Quiet = params.Quiet;\n    Objects = util.isArray(Objects) ? Objects : [Objects];\n\n    var xml = util.json2xml({Delete: {Object: Objects, Quiet: Quiet || false}});\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    var Scope = util.map(Objects, function (v) {\n        return {\n            action: 'name/cos:DeleteObject',\n            bucket: params.Bucket,\n            region: params.Region,\n            prefix: v.Key,\n        };\n    });\n\n    submitRequest.call(this, {\n        Scope: Scope,\n        method: 'POST',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        body: xml,\n        action: 'delete',\n        headers: headers,\n    }, function (err, data) {\n        if (err) return callback(err);\n        var DeleteResult = data.DeleteResult || {};\n        var Deleted = DeleteResult.Deleted || [];\n        var Errors = DeleteResult.Error || [];\n\n        Deleted = util.isArray(Deleted) ? Deleted : [Deleted];\n        Errors = util.isArray(Errors) ? Errors : [Errors];\n\n        var result = util.clone(DeleteResult);\n        util.extend(result, {\n            Error: Errors,\n            Deleted: Deleted,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n        callback(null, result);\n    });\n}\n\nfunction restoreObject(params, callback) {\n    var headers = params.Headers;\n    if (!params['RestoreRequest']) {\n        callback(util.error(new Error('missing param RestoreRequest')));\n        return;\n    }\n\n    var RestoreRequest = params.RestoreRequest || {};\n    var xml = util.json2xml({RestoreRequest: RestoreRequest});\n\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:RestoreObject',\n        method: 'POST',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        VersionId: params.VersionId,\n        body: xml,\n        action: 'restore',\n        headers: headers,\n    }, callback);\n}\n\n/**\n * 设置 Object 的标签\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Object名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n *     @param  {Array}   params.TagSet  标签设置，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/42998\n * @return  {Object}  data              返回数据\n */\nfunction putObjectTagging(params, callback) {\n\n    var Tagging = params['Tagging'] || {};\n    var Tags = Tagging.TagSet || Tagging.Tags || params['Tags'] || [];\n    Tags = util.clone(util.isArray(Tags) ? Tags : [Tags]);\n    var xml = util.json2xml({Tagging: {TagSet: {Tag: Tags}}});\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:PutObjectTagging',\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Key: params.Key,\n        Region: params.Region,\n        body: xml,\n        action: 'tagging',\n        headers: headers,\n        VersionId: params.VersionId,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 获取 Object 的标签设置\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Bucket名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/42998\n * @return  {Object}  data              返回数据\n */\nfunction getObjectTagging(params, callback) {\n\n    submitRequest.call(this, {\n        Action: 'name/cos:GetObjectTagging',\n        method: 'GET',\n        Key: params.Key,\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        action: 'tagging',\n        VersionId: params.VersionId,\n    }, function (err, data) {\n        if (err) {\n            if (err.statusCode === 404 && err.error && (err.error === \"Not Found\" || err.error.Code === 'NoSuchTagSet')) {\n                var result = {\n                    Tags: [],\n                    statusCode: err.statusCode,\n                };\n                err.headers && (result.headers = err.headers);\n                callback(null, result);\n            } else {\n                callback(err);\n            }\n            return;\n        }\n        var Tags = [];\n        try {\n            Tags = data.Tagging.TagSet.Tag || [];\n        } catch (e) {\n        }\n        Tags = util.clone(util.isArray(Tags) ? Tags : [Tags]);\n        callback(null, {\n            Tags: Tags,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 删除 Object 的 标签设置\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Bucket  Object名称，必须\n *     @param  {String}  params.Region  地域名称，必须\n * @param  {Function}  callback         回调函数，必须\n * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/42998\n * @return  {Object}  data              返回的数据\n */\nfunction deleteObjectTagging(params, callback) {\n    submitRequest.call(this, {\n        Action: 'name/cos:DeleteObjectTagging',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        headers: params.Headers,\n        action: 'tagging',\n        VersionId: params.VersionId,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            return callback(err);\n        }\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 使用 SQL 语句从指定对象（CSV 格式或者 JSON 格式）中检索内容\n * @param  {Object}  params                   参数对象，必须\n *     @param  {String}  params.Bucket        Object名称，必须\n *     @param  {String}  params.Region        地域名称，必须\n *     @param  {Object}  params.SelectRequest 地域名称，必须\n * @param  {Function}  callback               回调函数，必须\n * @return  {Object}  err                     请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/42998\n * @return  {Object}  data                    返回的数据\n */\nfunction selectObjectContent(params, callback) {\n    var SelectType = params['SelectType'];\n    if (!SelectType) return callback(util.error(new Error('missing param SelectType')));\n\n    var SelectRequest = params['SelectRequest'] || {};\n    var xml = util.json2xml({SelectRequest: SelectRequest});\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    var outputStream;\n    var selectResult = {};\n    var SelectStream = require('./select-stream');\n    if (params.ReturnStream && params.DataType === 'raw') { // 流 && raw 直接原样数据吐回\n        outputStream = new Stream.PassThrough();\n    } else { // 包含 params.ReturnStream || !params.ReturnStream\n        outputStream = new SelectStream();\n        outputStream.on('message:progress', function (progress) {\n            if (typeof params.onProgress === 'function') params.onProgress(progress);\n        });\n        outputStream.on('message:stats', function (stats) {\n            selectResult.stats = stats;\n        });\n        outputStream.on('message:error', function (error) {\n            selectResult.error = error;\n        });\n    }\n    submitRequest.call(this, {\n        Action: 'name/cos:GetObject',\n        method: 'POST',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        headers: params.Headers,\n        action: 'select',\n        qs: {\n            'select-type': params['SelectType'],\n        },\n        VersionId: params.VersionId,\n        body: xml,\n        rawBody: true,\n        outputStream: outputStream,\n    }, function (err, data) {\n        if (err && err.statusCode === 204) {\n            return callback(null, {statusCode: err.statusCode});\n        } else if (err) {\n            if (outputStream) outputStream.emit('error', err);\n            return callback(err);\n        } else if (selectResult.error) {\n            return callback(util.extend(selectResult.error, {\n                statusCode: data.statusCode,\n                headers: data.headers,\n            }));\n        }\n        var result = {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        };\n        // 只要流里有解析出 stats，就返回 Stats\n        if (selectResult.stats) result.Stats = selectResult.stats;\n        // 只要有 records，就返回 Payload\n        if (selectResult.records) result.Payload = Buffer.concat(selectResult.records);\n        callback(null, result);\n    });\n    if (!params.ReturnStream && params.DataType !== 'raw') {\n        selectResult.records = [];\n        outputStream.pipe(new Stream.Writable({\n            write: function (chunk, encoding, callback) {\n                selectResult.records.push(chunk);\n                callback();\n            },\n            writev: function (chunks, encoding, callback) {\n                chunks.forEach(function (item) {\n                    selectResult.records.push(chunks);\n                });\n                callback();\n            },\n        }));\n        outputStream.pipe(outputStream);\n    }\n    if (params.ReturnStream) return outputStream;\n}\n\n/**\n * 使用 SQL 语句从指定对象（CSV 格式或者 JSON 格式）中检索内容\n * @param  {Object}  params                   参数对象，必须\n *     @param  {String}  params.Bucket        Object名称，必须\n *     @param  {String}  params.Region        地域名称，必须\n *     @param  {Object}  params.SelectRequest 地域名称，必须\n * @param  {Function}  callback               回调函数，必须\n * @return  {Object}  err                     请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/42998\n * @return  {Object}  data                    返回的数据\n * @return  {Object}  Stream                  返回值\n */\nfunction selectObjectContentStream(params, callback) {\n    params.ReturnStream = true;\n    return selectObjectContent.call(this, params, callback);\n}\n\n\n// 分块上传\n\n\n/**\n * 初始化分块上传\n * @param  {Object}  params                                     参数对象，必须\n *     @param  {String}  params.Bucket                          Bucket名称，必须\n *     @param  {String}  params.Region                          地域名称，必须\n *     @param  {String}  params.Key                             object名称，必须\n *     @param  {String}  params.UploadId                        object名称，必须\n *     @param  {String}  params.CacheControl                    RFC 2616 中定义的缓存策略，将作为 Object 元数据保存，非必须\n *     @param  {String}  params.ContentDisposition              RFC 2616 中定义的文件名称，将作为 Object 元数据保存    ，非必须\n *     @param  {String}  params.ContentEncoding                 RFC 2616 中定义的编码格式，将作为 Object 元数据保存，非必须\n *     @param  {String}  params.ContentType                     RFC 2616 中定义的内容类型（MIME），将作为 Object 元数据保存，非必须\n *     @param  {String}  params.Expires                         RFC 2616 中定义的过期时间，将作为 Object 元数据保存，非必须\n *     @param  {String}  params.ACL                             允许用户自定义文件权限，非必须\n *     @param  {String}  params.GrantRead                       赋予被授权者读的权限 ，非必须\n *     @param  {String}  params.GrantWrite                      赋予被授权者写的权限 ，非必须\n *     @param  {String}  params.GrantFullControl                赋予被授权者读写权限 ，非必须\n *     @param  {String}  params.StorageClass                    设置Object的存储级别，枚举值：Standard，Standard_IA，Archive，非必须\n *     @param  {String}  params.ServerSideEncryption           支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\n * @param  {Function}  callback                                 回调函数，必须\n * @return  {Object}  err                                       请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                                      返回的数据\n */\nfunction multipartInit(params, callback) {\n\n    // 特殊处理 Cache-Control\n    var headers = params.Headers;\n\n    // 特殊处理 Cache-Control、Content-Type\n    if (!headers['Cache-Control'] && !headers['cache-control']) headers['Cache-Control'] = '';\n    if (!headers['Content-Type'] && !headers['content-type']) headers['Content-Type'] = params.Body && params.Body.type || '';\n\n    submitRequest.call(this, {\n        Action: 'name/cos:InitiateMultipartUpload',\n        method: 'POST',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        action: 'uploads',\n        headers: params.Headers,\n        qs: params.Query,\n    }, function (err, data) {\n        if (err) return callback(err);\n        data = util.clone(data || {});\n        if (data && data.InitiateMultipartUploadResult) {\n            return callback(null, util.extend(data.InitiateMultipartUploadResult, {\n                statusCode: data.statusCode,\n                headers: data.headers,\n            }));\n        }\n        callback(null, data);\n    });\n}\n\n/**\n * 分块上传\n * @param  {Object}  params                                 参数对象，必须\n *     @param  {String}  params.Bucket                      Bucket名称，必须\n *     @param  {String}  params.Region                      地域名称，必须\n *     @param  {String}  params.Key                         object名称，必须\n *     @param  {Buffer || Stream || String}  params.Body    上传文件对象或字符串\n *     @param  {String} params.ContentLength                RFC 2616 中定义的 HTTP 请求内容长度（字节），非必须\n *     @param  {String} params.Expect                       当使用 Expect: 100-continue 时，在收到服务端确认后，才会发送请求内容，非必须\n *     @param  {String} params.ServerSideEncryption         支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\n *     @param  {String} params.ContentSha1                  RFC 3174 中定义的 160-bit 内容 SHA-1 算法校验值，非必须\n * @param  {Function}  callback                             回调函数，必须\n *     @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n *     @return  {Object}  data                              返回的数据\n *     @return  {Object}  data.ETag                         返回的文件分块 sha1 值\n */\nfunction multipartUpload(params, callback) {\n\n    var self = this;\n    util.getFileSize('multipartUpload', params, function () {\n        util.getBodyMd5(self.options.UploadCheckContentMd5, params.Body, function (md5) {\n            if (md5) params.Headers['Content-MD5'] = util.binaryBase64(md5);\n            submitRequest.call(self, {\n                Action: 'name/cos:UploadPart',\n                TaskId: params.TaskId,\n                method: 'PUT',\n                Bucket: params.Bucket,\n                Region: params.Region,\n                Key: params.Key,\n                qs: {\n                    partNumber: params['PartNumber'],\n                    uploadId: params['UploadId'],\n                },\n                headers: params.Headers,\n                onProgress: params.onProgress,\n                body: params.Body || null\n            }, function (err, data) {\n                if (err) return callback(err);\n                callback(null, {\n                    ETag: util.attr(data.headers, 'etag', ''),\n                    statusCode: data.statusCode,\n                    headers: data.headers,\n                });\n            });\n        });\n    });\n\n}\n\n/**\n * 完成分块上传\n * @param  {Object}  params                             参数对象，必须\n *     @param  {String}  params.Bucket                  Bucket名称，必须\n *     @param  {String}  params.Region                  地域名称，必须\n *     @param  {String}  params.Key                     object名称，必须\n *     @param  {Array}   params.Parts                   分块信息列表，必须\n *     @param  {String}  params.Parts[i].PartNumber     块编号，必须\n *     @param  {String}  params.Parts[i].ETag           分块的 sha1 校验值\n * @param  {Function}  callback                         回调函数，必须\n * @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                              返回的数据\n *     @return  {Object}  data.CompleteMultipartUpload  完成分块上传后的文件信息，包括Location, Bucket, Key 和 ETag\n */\nfunction multipartComplete(params, callback) {\n    var self = this;\n\n    var UploadId = params.UploadId;\n\n    var Parts = params['Parts'];\n\n    for (var i = 0, len = Parts.length; i < len; i++) {\n        if (Parts[i]['ETag'].indexOf('\"') === 0) {\n            continue;\n        }\n        Parts[i]['ETag'] = '\"' + Parts[i]['ETag'] + '\"';\n    }\n\n    var xml = util.json2xml({CompleteMultipartUpload: {Part: Parts}});\n    // CSP/ceph CompleteMultipartUpload 接口 body 写死了限制 1MB，这里醉倒 10000 片时，xml 字符串去掉空格853KB\n    xml = xml.replace(/\\n\\s*/g, '');\n\n    var headers = params.Headers;\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n    submitRequest.call(this, {\n        Action: 'name/cos:CompleteMultipartUpload',\n        method: 'POST',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        qs: {\n            uploadId: UploadId\n        },\n        body: xml,\n        headers: headers,\n    }, function (err, data) {\n        if (err) return callback(err);\n        var url = getUrl({\n            ForcePathStyle: self.options.ForcePathStyle,\n            protocol: self.options.Protocol,\n            domain: self.options.Domain,\n            bucket: params.Bucket,\n            region: params.Region,\n            object: params.Key,\n            isLocation: true,\n        });\n        var res = data.CompleteMultipartUploadResult || {};\n        if (res.ProcessResults) {\n            if (res && res.ProcessResults) {\n                res.UploadResult = {\n                    OriginalInfo: {\n                        Key: res.Key,\n                        Location: url,\n                        ETag: res.ETag,\n                        ImageInfo: res.ImageInfo,\n                    },\n                    ProcessResults: res.ProcessResults,\n                };\n                delete res.ImageInfo;\n                delete res.ProcessResults;\n            }\n        }\n        var result = util.extend(res, {\n            Location: url,\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n        callback(null, result);\n    });\n}\n\n/**\n * 分块上传任务列表查询\n * @param  {Object}  params                                 参数对象，必须\n *     @param  {String}  params.Bucket                      Bucket名称，必须\n *     @param  {String}  params.Region                      地域名称，必须\n *     @param  {String}  params.Delimiter                   定界符为一个符号，如果有Prefix，则将Prefix到delimiter之间的相同路径归为一类，定义为Common Prefix，然后列出所有Common Prefix。如果没有Prefix，则从路径起点开始，非必须\n *     @param  {String}  params.EncodingType                规定返回值的编码方式，非必须\n *     @param  {String}  params.Prefix                      前缀匹配，用来规定返回的文件前缀地址，非必须\n *     @param  {String}  params.MaxUploads                  单次返回最大的条目数量，默认1000，非必须\n *     @param  {String}  params.KeyMarker                   与upload-id-marker一起使用 </Br>当upload-id-marker未被指定时，ObjectName字母顺序大于key-marker的条目将被列出 </Br>当upload-id-marker被指定时，ObjectName字母顺序大于key-marker的条目被列出，ObjectName字母顺序等于key-marker同时UploadId大于upload-id-marker的条目将被列出，非必须\n *     @param  {String}  params.UploadIdMarker              与key-marker一起使用 </Br>当key-marker未被指定时，upload-id-marker将被忽略 </Br>当key-marker被指定时，ObjectName字母顺序大于key-marker的条目被列出，ObjectName字母顺序等于key-marker同时UploadId大于upload-id-marker的条目将被列出，非必须\n * @param  {Function}  callback                             回调函数，必须\n * @return  {Object}  err                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                                  返回的数据\n *     @return  {Object}  data.ListMultipartUploadsResult   分块上传任务信息\n */\nfunction multipartList(params, callback) {\n    var reqParams = {};\n\n    reqParams['delimiter'] = params['Delimiter'];\n    reqParams['encoding-type'] = params['EncodingType'];\n    reqParams['prefix'] = params['Prefix'] || '';\n\n    reqParams['max-uploads'] = params['MaxUploads'];\n\n    reqParams['key-marker'] = params['KeyMarker'];\n    reqParams['upload-id-marker'] = params['UploadIdMarker'];\n\n    reqParams = util.clearKey(reqParams);\n\n    submitRequest.call(this, {\n        Action: 'name/cos:ListMultipartUploads',\n        ResourceKey: reqParams['prefix'],\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        headers: params.Headers,\n        qs: reqParams,\n        action: 'uploads',\n    }, function (err, data) {\n        if (err) return callback(err);\n\n        if (data && data.ListMultipartUploadsResult) {\n            var Upload = data.ListMultipartUploadsResult.Upload || [];\n            Upload = util.isArray(Upload) ? Upload : [Upload];\n            data.ListMultipartUploadsResult.Upload = Upload;\n        }\n        var result = util.clone(data.ListMultipartUploadsResult || {});\n        util.extend(result, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n        callback(null, result);\n    });\n}\n\n/**\n * 上传的分块列表查询\n * @param  {Object}  params                                 参数对象，必须\n *     @param  {String}  params.Bucket                      Bucket名称，必须\n *     @param  {String}  params.Region                      地域名称，必须\n *     @param  {String}  params.Key                         object名称，必须\n *     @param  {String}  params.UploadId                    标示本次分块上传的ID，必须\n *     @param  {String}  params.EncodingType                规定返回值的编码方式，非必须\n *     @param  {String}  params.MaxParts                    单次返回最大的条目数量，默认1000，非必须\n *     @param  {String}  params.PartNumberMarker            默认以UTF-8二进制顺序列出条目，所有列出条目从marker开始，非必须\n * @param  {Function}  callback                             回调函数，必须\n * @return  {Object}  err                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n * @return  {Object}  data                                  返回的数据\n *     @return  {Object}  data.ListMultipartUploadsResult   分块信息\n */\nfunction multipartListPart(params, callback) {\n    var reqParams = {};\n\n    reqParams['uploadId'] = params['UploadId'];\n    reqParams['encoding-type'] = params['EncodingType'];\n    reqParams['max-parts'] = params['MaxParts'];\n    reqParams['part-number-marker'] = params['PartNumberMarker'];\n\n    submitRequest.call(this, {\n        Action: 'name/cos:ListParts',\n        method: 'GET',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        headers: params.Headers,\n        qs: reqParams,\n    }, function (err, data) {\n        if (err) return callback(err);\n        var ListPartsResult = data.ListPartsResult || {};\n        var Part = ListPartsResult.Part || [];\n        Part = util.isArray(Part) ? Part : [Part];\n\n        ListPartsResult.Part = Part;\n        var result = util.clone(ListPartsResult);\n        util.extend(result, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n        callback(null, result);\n    });\n}\n\n/**\n * 抛弃分块上传\n * @param  {Object}  params                 参数对象，必须\n *     @param  {String}  params.Bucket      Bucket名称，必须\n *     @param  {String}  params.Region      地域名称，必须\n *     @param  {String}  params.Key         object名称，必须\n *     @param  {String}  params.UploadId    标示本次分块上传的ID，必须\n * @param  {Function}  callback             回调函数，必须\n *     @return  {Object}    err             请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n *     @return  {Object}    data            返回的数据\n */\nfunction multipartAbort(params, callback) {\n    var reqParams = {};\n\n    reqParams['uploadId'] = params['UploadId'];\n    submitRequest.call(this, {\n        Action: 'name/cos:AbortMultipartUpload',\n        method: 'DELETE',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        headers: params.Headers,\n        qs: reqParams,\n    }, function (err, data) {\n        if (err) return callback(err);\n        callback(null, {\n            statusCode: data.statusCode,\n            headers: data.headers,\n        });\n    });\n}\n\n/**\n * 追加上传\n * @param  {Object}  params                                         参数对象，必须\n *     @param  {String}  params.Bucket                              Bucket名称，必须\n *     @param  {String}  params.Region                              地域名称，必须\n *     @param  {String}  params.Key                                 object名称，必须\n *     @param  {{Buffer || ReadStream || String}}  params.Body                上传文件对象或字符串\n *     @param  {Number}  params.Position                            追加操作的起始点，单位为字节，必须\n *     @param  {String}  params.CacheControl                        RFC 2616 中定义的缓存策略，将作为 Object 元数据保存，非必须\n *     @param  {String}  params.ContentDisposition                  RFC 2616 中定义的文件名称，将作为 Object 元数据保存，非必须\n *     @param  {String}  params.ContentEncoding                     RFC 2616 中定义的编码格式，将作为 Object 元数据保存，非必须\n *     @param  {String}  params.ContentLength                       RFC 2616 中定义的 HTTP 请求内容长度（字节），必须\n *     @param  {String}  params.ContentType                         RFC 2616 中定义的内容类型（MIME），将作为 Object 元数据保存，非必须\n *     @param  {String}  params.Expect                              当使用 Expect: 100-continue 时，在收到服务端确认后，才会发送请求内容，非必须\n *     @param  {String}  params.Expires                             RFC 2616 中定义的过期时间，将作为 Object 元数据保存，非必须\n *     @param  {String}  params.ACL                                 允许用户自定义文件权限，有效值：private | public-read，非必须\n *     @param  {String}  params.GrantRead                           赋予被授权者读取对象的权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\n *     @param  {String}  params.GrantReadAcp                        赋予被授权者读取对象的访问控制列表（ACL）的权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\n *     @param  {String}  params.GrantWriteAcp                       赋予被授权者写入对象的访问控制列表（ACL）的权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\n *     @param  {String}  params.GrantFullControl                    赋予被授权者操作对象的所有权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\n *     @param  {String}  params.StorageClass                        设置对象的存储级别，枚举值：STANDARD、STANDARD_IA、ARCHIVE，默认值：STANDARD，非必须\n *     @param  {String}  params.x-cos-meta-*                        允许用户自定义的头部信息，将作为对象的元数据保存。大小限制2KB，非必须\n *     @param  {String}  params.ContentSha1                         RFC 3174 中定义的 160-bit 内容 SHA-1 算法校验，非必须\n *     @param  {String}  params.ServerSideEncryption                支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\n * @param  {Function}  callback                                     回调函数，必须\n *     @return  {Object}    err                                     请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n *     @return  {Object}    data                                    返回的数据\n */\n function appendObject(params, callback) {\n  // 特殊处理 Cache-Control、Content-Type，避免代理更改这两个字段导致写入到 Object 属性里\n  var headers = params.Headers;\n  if (!headers['Cache-Control'] && !headers['cache-control']) headers['Cache-Control'] = '';\n\n  submitRequest.call(this, {\n      Action: 'name/cos:AppendObject',\n      method: 'POST',\n      Bucket: params.Bucket,\n      Region: params.Region,\n      action: 'append',\n      Key: params.Key,\n      body: params.Body,\n      qs: {\n        position: params.Position\n      },\n      headers: params.Headers,\n  }, function (err, data) {\n      if (err) return callback(err);\n      callback(null, data);\n  });\n}\n\n/**\n * cos 内置请求\n * @param  {Object}  params                 参数对象，必须\n *     @param  {String}  params.Bucket      Bucket名称，必须\n *     @param  {String}  params.Region      地域名称，必须\n *     @param  {String}  params.Key         object名称，必须\n * @param  {Function}  callback             回调函数，必须\n *     @return  {Object}    err             请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n *     @return  {Object}    data            返回的数据\n */\nfunction request(params, callback) {\n  var Query = params.Query || {};\n  // 处理 url\n  if (params.Url) {\n    var m = params.Url.match(/^https?:\\/\\/([^/]+)(\\/[^?#]*)?(\\?[^#]*)?(#.*)?$/)\n    var urlPath = m && m[2] || '';\n    if (urlPath && !params.Key) params.Key = urlPath.substr(1);\n  }\n  submitRequest.call(this, {\n      method: params.Method,\n      Bucket: params.Bucket,\n      Region: params.Region,\n      Key: params.Key,\n      action: params.Action,\n      headers: params.Headers,\n      qs: Query,\n      body: params.Body,\n      url: params.Url,\n      rawBody: params.RawBody,\n  }, function (err, data) {\n      if (err) return callback(err);\n      if (data && data.body) {\n          data.Body = data.body;\n          delete data.body;\n      }\n      callback(err, data);\n  });\n}\n\n/**\n * 获取签名\n * @param  {Object}  params             参数对象，必须\n *     @param  {String}  params.Method  请求方法，必须\n *     @param  {String}  params.Key     object名称，必须\n *     @param  {String}  params.Expires 名超时时间，单位秒，可选\n * @return  {String}  data              返回签名字符串\n */\nfunction getAuth(params) {\n    var self = this;\n    return util.getAuth({\n        SecretId: params.SecretId || this.options.SecretId || '',\n        SecretKey: params.SecretKey || this.options.SecretKey || '',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Method: params.Method,\n        Key: params.Key,\n        Query: params.Query,\n        Headers: params.Headers,\n        Expires: params.Expires,\n        UseRawKey: self.options.UseRawKey,\n        SystemClockOffset: self.options.SystemClockOffset,\n    });\n}\n\nfunction getV4Auth(params) {\n    return util.getV4Auth({\n        SecretId: params.SecretId || this.options.SecretId || '',\n        SecretKey: params.SecretKey || this.options.SecretKey || '',\n        Bucket: params.Bucket,\n        Key: params.Key,\n        Expires: params.Expires,\n    });\n}\n\n/**\n * 获取文件下载链接\n * @param  {Object}  params                 参数对象，必须\n *     @param  {String}  params.Bucket      Bucket名称，必须\n *     @param  {String}  params.Region      地域名称，必须\n *     @param  {String}  params.Key         object名称，必须\n *     @param  {String}  params.Method      请求的方法，可选\n *     @param  {String}  params.Expires     签名超时时间，单位秒，可选\n * @param  {Function}  callback             回调函数，必须\n *     @return  {Object}    err             请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\n *     @return  {Object}    data            返回的数据\n */\nfunction getObjectUrl(params, callback) {\n    var self = this;\n    var useAccelerate = params.UseAccelerate === undefined ? self.options.UseAccelerate : params.UseAccelerate;\n    var url = getUrl({\n        ForcePathStyle: self.options.ForcePathStyle,\n        protocol: params.Protocol || self.options.Protocol,\n        domain: params.Domain || self.options.Domain,\n        bucket: params.Bucket,\n        region: useAccelerate ? 'accelerate' : params.Region,\n        object: params.Key,\n    });\n\n    var queryParamsStr = '';\n    if(params.Query){\n        queryParamsStr += util.obj2str(params.Query);\n    }\n    if(params.QueryString){\n        queryParamsStr += (queryParamsStr ? '&' : '') + params.QueryString;\n    }\n\n    var syncUrl = url;\n    if (params.Sign !== undefined && !params.Sign) {\n        queryParamsStr && (syncUrl += '?' + queryParamsStr);\n        callback(null, {Url: syncUrl});\n        return syncUrl;\n    }\n\n    // 签名加上 Host，避免跨桶访问\n    var SignHost = getSignHost.call(this, {Bucket: params.Bucket, Region: params.Region, UseAccelerate: params.UseAccelerate, Url: url});\n    var AuthData = getAuthorizationAsync.call(this, {\n        Action: ((params.Method || '').toUpperCase() === 'PUT' ? 'name/cos:PutObject' : 'name/cos:GetObject'),\n        Bucket: params.Bucket || '',\n        Region: params.Region || '',\n        Method: params.Method || 'get',\n        Key: params.Key,\n        Expires: params.Expires,\n        Headers: params.Headers,\n        Query: params.Query,\n        SignHost: SignHost,\n        ForceSignHost: params.ForceSignHost === false ? false : self.options.ForceSignHost, // getObjectUrl支持传参ForceSignHost\n    }, function (err, AuthData) {\n        if (!callback) return;\n        if (err) {\n            callback(err);\n            return;\n        }\n\n        // 兼容万象url qUrlParamList需要再encode一次\n        var replaceUrlParamList = function(url) {\n            var urlParams = url.match(/q-url-param-list.*?(?=&)/g)[0];\n            var encodedParams = 'q-url-param-list=' + encodeURIComponent(urlParams.replace(/q-url-param-list=/, '')).toLowerCase();\n            var reg = new RegExp(urlParams, 'g');\n            var replacedUrl = url.replace(reg, encodedParams);\n            return replacedUrl;\n        }\n\n        var signUrl = url;\n        signUrl += '?' + (AuthData.Authorization.indexOf('q-signature') > -1 ?\n            replaceUrlParamList(AuthData.Authorization) : 'sign=' + encodeURIComponent(AuthData.Authorization));\n        AuthData.SecurityToken && (signUrl += '&x-cos-security-token=' + AuthData.SecurityToken);\n        AuthData.ClientIP && (signUrl += '&clientIP=' + AuthData.ClientIP);\n        AuthData.ClientUA && (signUrl += '&clientUA=' + AuthData.ClientUA);\n        AuthData.Token && (signUrl += '&token=' + AuthData.Token);\n        queryParamsStr && (signUrl += '&' + queryParamsStr);\n        setTimeout(function () {\n            callback(null, {Url: signUrl});\n        });\n    });\n\n    if (AuthData) {\n        syncUrl += '?' + AuthData.Authorization +\n            (AuthData.SecurityToken ? '&x-cos-security-token=' + AuthData.SecurityToken : '');\n        queryParamsStr && (syncUrl += '&' + queryParamsStr);\n    } else{\n        queryParamsStr && (syncUrl += '?' + queryParamsStr);\n    }\n    return syncUrl;\n}\n\n\n/**\n * 私有方法\n */\nfunction decodeAcl(AccessControlPolicy) {\n    var result = {\n        GrantFullControl: [],\n        GrantWrite: [],\n        GrantRead: [],\n        GrantReadAcp: [],\n        GrantWriteAcp: [],\n        ACL: '',\n    };\n    var GrantMap = {\n        'FULL_CONTROL': 'GrantFullControl',\n        'WRITE': 'GrantWrite',\n        'READ': 'GrantRead',\n        'READ_ACP': 'GrantReadAcp',\n        'WRITE_ACP': 'GrantWriteAcp',\n    };\n    var AccessControlList = AccessControlPolicy && AccessControlPolicy.AccessControlList || {};\n    var Grant = AccessControlList.Grant;\n    if (Grant) {\n        Grant = util.isArray(Grant) ? Grant : [Grant];\n    }\n    var PublicAcl = {READ: 0, WRITE: 0, FULL_CONTROL: 0};\n    Grant && Grant.length && util.each(Grant, function (item) {\n        if (item.Grantee.ID === 'qcs::cam::anyone:anyone' || item.Grantee.URI === 'http://cam.qcloud.com/groups/global/AllUsers') {\n            PublicAcl[item.Permission] = 1;\n        } else if (item.Grantee.ID !== AccessControlPolicy.Owner.ID) {\n            result[GrantMap[item.Permission]].push('id=\"' + item.Grantee.ID + '\"');\n        }\n    });\n    if (PublicAcl.FULL_CONTROL || (PublicAcl.WRITE && PublicAcl.READ)) {\n        result.ACL = 'public-read-write';\n    } else if (PublicAcl.READ) {\n        result.ACL = 'public-read';\n    } else {\n        result.ACL = 'private';\n    }\n    util.each(GrantMap, function (item) {\n        result[item] = uniqGrant(result[item].join(','));\n    });\n    return result;\n}\n\n// Grant 去重\nfunction uniqGrant(str) {\n    var arr = str.split(',');\n    var exist = {};\n    var i, item;\n    for (i = 0; i < arr.length; ) {\n        item = arr[i].trim();\n        if (exist[item]) {\n            arr.splice(i, 1);\n        } else {\n            exist[item] = true;\n            arr[i] = item;\n            i++;\n        }\n    }\n    return arr.join(',');\n}\n\n// 生成操作 url\nfunction getUrl(params) {\n    var longBucket = params.bucket;\n    var shortBucket = longBucket.substr(0, longBucket.lastIndexOf('-'));\n    var appId = longBucket.substr(longBucket.lastIndexOf('-') + 1);\n    var domain = params.domain;\n    var region = params.region;\n    var object = params.object;\n    // 兼容不带冒号的http、https\n    if (['http', 'https'].includes(params.protocol)) {\n      params.protocol = params.protocol + ':';\n    }\n    var protocol = params.protocol || (util.isBrowser && location.protocol === 'http:' ? 'http:' : 'https:');\n    if (!domain) {\n        if (['cn-south', 'cn-south-2', 'cn-north', 'cn-east', 'cn-southwest', 'sg'].indexOf(region) > -1) {\n            domain = '{Region}.myqcloud.com';\n        } else {\n            domain = 'cos.{Region}.myqcloud.com';\n        }\n        if (!params.ForcePathStyle) {\n            domain = '{Bucket}.' + domain;\n        }\n    }\n    domain = domain.replace(/\\{\\{AppId\\}\\}/ig, appId)\n        .replace(/\\{\\{Bucket\\}\\}/ig, shortBucket)\n        .replace(/\\{\\{Region\\}\\}/ig, region)\n        .replace(/\\{\\{.*?\\}\\}/ig, '');\n    domain = domain.replace(/\\{AppId\\}/ig, appId)\n        .replace(/\\{BucketName\\}/ig, shortBucket)\n        .replace(/\\{Bucket\\}/ig, longBucket)\n        .replace(/\\{Region\\}/ig, region)\n        .replace(/\\{.*?\\}/ig, '');\n    if (!/^[a-zA-Z]+:\\/\\//.test(domain)) {\n        domain = protocol + '//' + domain;\n    }\n\n    // 去掉域名最后的斜杆\n    if (domain.slice(-1) === '/') {\n        domain = domain.slice(0, -1);\n    }\n    var url = domain;\n\n    if (params.ForcePathStyle) {\n        url += '/' + longBucket;\n    }\n    url += '/';\n    if (object) {\n        url += util.camSafeUrlEncode(object).replace(/%2F/g, '/');\n    }\n\n    if (params.isLocation) {\n        url = url.replace(/^https?:\\/\\//, '');\n    }\n    return url;\n}\n\nvar getSignHost = function (opt) {\n    if (!opt.Bucket || !opt.Region) return '';\n    var useAccelerate = opt.UseAccelerate === undefined ? this.options.UseAccelerate : opt.UseAccelerate;\n    var url = opt.Url || getUrl({\n        ForcePathStyle: this.options.ForcePathStyle,\n        protocol: this.options.Protocol,\n        domain: this.options.Domain,\n        bucket: opt.Bucket,\n        region: useAccelerate ? 'accelerate' : opt.Region,\n    });\n    var urlHost = url.replace(/^https?:\\/\\/([^/]+)(\\/.*)?$/, '$1');\n    var standardHostReg = new RegExp('^([a-z\\\\d-]+-\\\\d+\\\\.)?(cos|cosv6|ci|pic)\\\\.([a-z\\\\d-]+)\\\\.myqcloud\\\\.com$');\n    if (standardHostReg.test(urlHost)) return urlHost;\n    return '';\n}\n\n// 异步获取签名\nfunction getAuthorizationAsync(params, callback) {\n\n    var headers = util.clone(params.Headers);\n    var headerHost = '';\n    util.each(headers, function (v, k) {\n        (v === '' || ['content-type', 'cache-control'].indexOf(k.toLowerCase()) > -1) && delete headers[k];\n        if (k.toLowerCase() === 'host') headerHost = v;\n    });\n\n    // ForceSignHost明确传入false才不加入host签名\n    var forceSignHost = params.ForceSignHost === false ? false : true;\n\n    // Host 加入签名计算\n    if (!headerHost && params.SignHost && forceSignHost) headers.Host = params.SignHost;\n\n\n    // 获取凭证的回调，避免用户 callback 多次\n    var cbDone = false;\n    var cb = function (err, AuthData) {\n        if (cbDone) return;\n        cbDone = true;\n        if (AuthData && AuthData.XCosSecurityToken && !AuthData.SecurityToken) {\n            AuthData = util.clone(AuthData);\n            AuthData.SecurityToken = AuthData.XCosSecurityToken;\n            delete AuthData.XCosSecurityToken;\n        }\n        callback && callback(err, AuthData);\n    };\n\n    var self = this;\n    var Bucket = params.Bucket || '';\n    var Region = params.Region || '';\n\n    // PathName\n    var KeyName = params.Key || '';\n    if (self.options.ForcePathStyle && Bucket) {\n        KeyName = Bucket + '/' + KeyName;\n    }\n    var Pathname = '/' + KeyName;\n\n    // Action、ResourceKey\n    var StsData = {};\n    var Scope = params.Scope;\n    if (!Scope) {\n        var Action = params.Action || '';\n        var ResourceKey = params.ResourceKey || params.Key || '';\n        Scope = params.Scope || [{\n            action: Action,\n            bucket: Bucket,\n            region: Region,\n            prefix: ResourceKey,\n        }];\n    }\n    var ScopeKey  = util.md5(JSON.stringify(Scope));\n\n    // STS\n    self._StsCache = self._StsCache ||[];\n    (function () {\n        var i, AuthData;\n        for (i = self._StsCache.length - 1; i >= 0; i--) {\n            AuthData = self._StsCache[i];\n            var compareTime = Math.round(util.getSkewTime(self.options.SystemClockOffset) / 1000) + 30;\n            if (AuthData.StartTime && compareTime < AuthData.StartTime || compareTime >= AuthData.ExpiredTime) {\n                self._StsCache.splice(i, 1);\n                continue;\n            }\n            if (!AuthData.ScopeLimit || AuthData.ScopeLimit && AuthData.ScopeKey === ScopeKey) {\n                StsData = AuthData;\n                break;\n            }\n        }\n    })();\n\n    var calcAuthByTmpKey = function () {\n        var KeyTime = '';\n        if (StsData.StartTime && params.Expires) KeyTime = StsData.StartTime + ';' + (StsData.StartTime + params.Expires * 1);\n        else if (StsData.StartTime && StsData.ExpiredTime) KeyTime = StsData.StartTime + ';' + StsData.ExpiredTime;\n        var Authorization = util.getAuth({\n            SecretId: StsData.TmpSecretId,\n            SecretKey: StsData.TmpSecretKey,\n            Method: params.Method,\n            Pathname: Pathname,\n            Query: params.Query,\n            Headers: headers,\n            Expires: params.Expires,\n            UseRawKey: self.options.UseRawKey,\n            SystemClockOffset: self.options.SystemClockOffset,\n            KeyTime: KeyTime,\n            ForceSignHost: forceSignHost,\n        });\n        var AuthData = {\n            Authorization: Authorization,\n            SecurityToken: StsData.SecurityToken || StsData.XCosSecurityToken || '',\n            Token: StsData.Token || '',\n            ClientIP: StsData.ClientIP || '',\n            ClientUA: StsData.ClientUA || '',\n        };\n        cb(null, AuthData);\n    };\n    var checkAuthError = function (AuthData) {\n        if (AuthData.Authorization) {\n            // 检查签名格式\n            var formatAllow = false;\n            var auth = AuthData.Authorization;\n            if (auth) {\n                if (auth.indexOf(' ') > -1) {\n                    formatAllow = false;\n                } else if (auth.indexOf('q-sign-algorithm=') > -1 &&\n                    auth.indexOf('q-ak=') > -1 &&\n                    auth.indexOf('q-sign-time=') > -1 &&\n                    auth.indexOf('q-key-time=') > -1 &&\n                    auth.indexOf('q-url-param-list=') > -1) {\n                    formatAllow = true;\n                } else {\n                    try {\n                        auth = Buffer.from(auth, 'base64').toString();\n                        if (auth.indexOf('a=') > -1 &&\n                            auth.indexOf('k=') > -1 &&\n                            auth.indexOf('t=') > -1 &&\n                            auth.indexOf('r=') > -1 &&\n                            auth.indexOf('b=') > -1) {\n                            formatAllow = true;\n                        }\n                    } catch (e) {}\n                }\n            }\n            if (!formatAllow) return util.error(new Error('getAuthorization callback params format error'));\n        } else {\n            if (!AuthData.TmpSecretId) return util.error(new Error('getAuthorization callback params missing \"TmpSecretId\"'));\n            if (!AuthData.TmpSecretKey) return util.error(new Error('getAuthorization callback params missing \"TmpSecretKey\"'));\n            if (!AuthData.SecurityToken && !AuthData.XCosSecurityToken) return util.error(new Error('getAuthorization callback params missing \"SecurityToken\"'));\n            if (!AuthData.ExpiredTime) return util.error(new Error('getAuthorization callback params missing \"ExpiredTime\"'));\n            if (AuthData.ExpiredTime && AuthData.ExpiredTime.toString().length !== 10) return util.error(new Error('getAuthorization callback params \"ExpiredTime\" should be 10 digits'));\n            if (AuthData.StartTime && AuthData.StartTime.toString().length !== 10) return util.error(new Error('getAuthorization callback params \"StartTime\" should be 10 StartTime'));\n        }\n        return false;\n    };\n\n    // 先判断是否有临时密钥\n    if (StsData.ExpiredTime && StsData.ExpiredTime - (util.getSkewTime(self.options.SystemClockOffset) / 1000) > 60) { // 如果缓存的临时密钥有效，并还有超过60秒有效期就直接使用\n        calcAuthByTmpKey();\n    } else if (self.options.getAuthorization) { // 外部计算签名或获取临时密钥\n        self.options.getAuthorization.call(self, {\n            Bucket: Bucket,\n            Region: Region,\n            Method: params.Method,\n            Key: KeyName,\n            Pathname: Pathname,\n            Query: params.Query,\n            Headers: headers,\n            Scope: Scope,\n            SystemClockOffset: self.options.SystemClockOffset,\n            ForceSignHost: forceSignHost,\n        }, function (AuthData) {\n            if (typeof AuthData === 'string') AuthData = {Authorization: AuthData};\n            var AuthError = checkAuthError(AuthData);\n            if (AuthError) return cb(AuthError);\n            if (AuthData.Authorization) {\n                cb(null, AuthData);\n            } else {\n                StsData = AuthData || {};\n                StsData.Scope = Scope;\n                StsData.ScopeKey = ScopeKey;\n                self._StsCache.push(StsData);\n                calcAuthByTmpKey();\n            }\n        });\n    } else if (self.options.getSTS) { // 外部获取临时密钥\n        self.options.getSTS.call(self, {\n            Bucket: Bucket,\n            Region: Region,\n        }, function (data) {\n            StsData = data || {};\n            StsData.Scope = Scope;\n            StsData.ScopeKey = ScopeKey;\n            if (!StsData.TmpSecretId) StsData.TmpSecretId = StsData.SecretId;\n            if (!StsData.TmpSecretKey) StsData.TmpSecretKey = StsData.SecretKey;\n            var AuthError = checkAuthError(StsData);\n            if (AuthError) return cb(AuthError);\n            self._StsCache.push(StsData);\n            calcAuthByTmpKey();\n        });\n    } else { // 内部计算获取签名\n        return (function () {\n            var Authorization = util.getAuth({\n                SecretId: params.SecretId || self.options.SecretId,\n                SecretKey: params.SecretKey || self.options.SecretKey,\n                Method: params.Method,\n                Pathname: Pathname,\n                Query: params.Query,\n                Headers: headers,\n                Expires: params.Expires,\n                UseRawKey: self.options.UseRawKey,\n                SystemClockOffset: self.options.SystemClockOffset,\n                ForceSignHost: forceSignHost,\n            });\n            var AuthData = {\n                Authorization: Authorization,\n                SecurityToken: self.options.SecurityToken || self.options.XCosSecurityToken,\n            };\n            cb(null, AuthData);\n            return AuthData;\n        })();\n    }\n    return '';\n}\n\n// 调整时间偏差\nfunction allowRetry(err) {\n    var allowRetry = false;\n    var isTimeError = false;\n    var serverDate = (err.headers && (err.headers.date || err.headers.Date)) || (err.error && err.error.ServerTime);\n    try {\n        var errorCode = err.error.Code;\n        var errorMessage = err.error.Message;\n        if (errorCode === 'RequestTimeTooSkewed' ||\n            (errorCode === 'AccessDenied' && errorMessage === 'Request has expired')) {\n            isTimeError = true;\n        }\n    } catch (e) {\n    }\n    if (err) {\n        if (isTimeError && serverDate) {\n            var serverTime = Date.parse(serverDate);\n            if (this.options.CorrectClockSkew && Math.abs(util.getSkewTime(this.options.SystemClockOffset) - serverTime) >= 30000) {\n                console.error('error: Local time is too skewed.');\n                this.options.SystemClockOffset = serverTime - Date.now();\n                allowRetry = true;\n            }\n        } else if (Math.floor(err.statusCode / 100) === 5) {\n            allowRetry = true;\n        } else if (err.code === 'ECONNRESET') {\n            allowRetry = true;\n        }\n    }\n    return allowRetry;\n}\n\n// 获取签名并发起请求\nfunction submitRequest(params, callback) {\n    var self = this;\n\n    // 处理 headers\n    !params.headers && (params.headers = {});\n    params.headers['User-Agent'] = self.options.UserAgent || ('cos-nodejs-sdk-v5-' + pkg.version);\n\n    // 处理 query\n    !params.qs && (params.qs = {});\n    params.VersionId && (params.qs.versionId = params.VersionId);\n    params.qs = util.clearKey(params.qs);\n\n    // 清理 undefined 和 null 字段\n    params.headers && (params.headers = util.clearKey(params.headers));\n    params.qs && (params.qs = util.clearKey(params.qs));\n\n    var Query = util.clone(params.qs);\n    params.action && (Query[params.action] = '');\n\n    var SignHost = params.SignHost || getSignHost.call(this, {Bucket: params.Bucket, Region: params.Region, Url: params.url});\n    var next = function (tryTimes) {\n        var oldClockOffset = self.options.SystemClockOffset;\n        getAuthorizationAsync.call(self, {\n            Bucket: params.Bucket || '',\n            Region: params.Region || '',\n            Method: params.method,\n            Key: params.Key,\n            Query: Query,\n            Headers: params.headers,\n            SignHost: SignHost,\n            Action: params.Action,\n            ResourceKey: params.ResourceKey,\n            Scope: params.Scope,\n            ForceSignHost: self.options.ForceSignHost,\n        }, function (err, AuthData) {\n            if (err) return callback(err);\n            params.AuthData = AuthData;\n            _submitRequest.call(self, params, function (err, data) {\n                if (err &&\n                    !(params.body && params.body.pipe) &&\n                    !params.outputStream &&\n                    tryTimes < 2 &&\n                    (oldClockOffset !== self.options.SystemClockOffset || allowRetry.call(self, err))) {\n                    if (params.headers) {\n                        delete params.headers.Authorization;\n                        delete params.headers['token'];\n                        delete params.headers['clientIP'];\n                        delete params.headers['clientUA'];\n                        params.headers['x-cos-security-token'] && (delete params.headers['x-cos-security-token']);\n                        params.headers['x-ci-security-token'] && (delete params.headers['x-ci-security-token']);\n                    }\n                    next(tryTimes + 1);\n                } else {\n                    callback(err, data);\n                }\n            });\n        });\n    };\n    next(1);\n\n}\n\n// 发起请求\nfunction _submitRequest(params, callback) {\n    var self = this;\n    var TaskId = params.TaskId;\n    if (TaskId && !self._isRunningTask(TaskId)) return;\n\n    var bucket = params.Bucket;\n    var region = params.Region;\n    var object = params.Key;\n    var method = params.method || 'GET';\n    var url = params.url || params.Url;\n    var body = params.body;\n    var rawBody = params.rawBody;\n\n    // 处理 readStream and body\n    var readStream;\n    if (body && typeof body.pipe === 'function') {\n        readStream = body;\n        body = null;\n    }\n\n    // url\n\n    if (this.options.UseAccelerate) {\n        region = 'accelerate';\n    }\n    url = url || getUrl({\n        ForcePathStyle: self.options.ForcePathStyle,\n        protocol: self.options.Protocol,\n        domain: self.options.Domain,\n        bucket: bucket,\n        region: region,\n        object: object,\n    });\n    if (params.action) {\n        url = url + '?' + params.action;\n    }\n    if (params.qsStr) {\n        if(url.indexOf('?') > -1){\n          url = url + '&' + params.qsStr;\n        }else{\n          url = url + '?' + params.qsStr;\n        }\n    }\n\n    var opt = {\n        method: method,\n        url: url,\n        headers: params.headers,\n        qs: params.qs,\n        body: body,\n    };\n\n    // 兼容ci接口\n    var token = 'x-cos-security-token';\n    if (util.isCIHost(url)) {\n        token = 'x-ci-security-token';\n    }\n\n    // 获取签名\n    opt.headers.Authorization = params.AuthData.Authorization;\n    params.AuthData.Token && (opt.headers['token'] = params.AuthData.Token);\n    params.AuthData.ClientIP && (opt.headers['clientIP'] = params.AuthData.ClientIP);\n    params.AuthData.ClientUA && (opt.headers['clientUA'] = params.AuthData.ClientUA);\n    params.AuthData.SecurityToken && (opt.headers[token] = params.AuthData.SecurityToken);\n\n    // 清理 undefined 和 null 字段\n    opt.headers && (opt.headers = util.clearKey(opt.headers));\n    opt = util.clearKey(opt);\n\n    var Ip = this.options.Ip;\n    if (Ip) {\n        opt.url = opt.url.replace(/^(https?:\\/\\/)([^\\/]+)/, function (str, pre, Host) {\n            opt.headers.Host = Host;\n            return pre + Ip;\n        });\n    }\n    if (this.options.StrictSsl !== true) {\n        opt.strictSSL = this.options.StrictSsl;\n    }\n    if (this.options.Proxy) {\n        opt.proxy = this.options.Proxy;\n    }\n    if (typeof this.options.Tunnel === 'boolean') {\n        opt.tunnel = this.options.Tunnel;\n    }\n    if (this.options.Timeout) {\n        opt.timeout = this.options.Timeout;\n    }\n    if (this.options.KeepAlive) {\n        opt.forever = true;\n    }\n    if (!this.options.FollowRedirect) {\n        opt.followRedirect = false;\n    }\n\n    // 修复 Content-Type: false 的 Bug，原因 request 模块会获取 request('mime-types).lookup(readStream.path) 作为 Content-Type\n    // 问题代码位置：https://github.com/request/request/blob/v2.88.1/request.js#L500\n    if (readStream) {\n        var hasContentType = false;\n        util.each(opt.headers, function (val, key) {\n            if (key.toLowerCase() === 'content-type') hasContentType = true;\n        });\n        if (\n            !hasContentType && // 1. not set Content-Type\n            readStream.readable && readStream.path && readStream.mode && // 2. isFileReadStream\n            !mime.lookup(readStream.path) // 3. mime return false\n        ) {\n            opt.headers['Content-Type'] = 'application/octet-stream';\n        }\n    }\n\n    // 特殊处理内容到写入流的情况，等待流 finish 后才 callback\n    if (params.outputStream) callback = util.callbackAfterStreamFinish(params.outputStream, callback);\n\n    self.emit('before-send', opt);\n    var sender = REQUEST(opt);\n    var retResponse;\n    var hasReturned;\n    var cb = function (err, data) {\n        TaskId && self.off('inner-kill-task', killTask);\n        if (hasReturned) return;\n        hasReturned = true;\n        var attrs = {};\n        retResponse && retResponse.statusCode && (attrs.statusCode = retResponse.statusCode);\n        retResponse && retResponse.headers && (attrs.headers = retResponse.headers);\n        if (err) {\n            err = util.extend(err || {}, attrs);\n            callback(err, null);\n        } else {\n            data = util.extend(data || {}, attrs);\n            callback(null, data);\n        }\n        if (sender) {\n            sender.removeAllListeners && sender.removeAllListeners();\n            sender.on('error', function () {});\n            sender = null;\n        }\n    };\n    // 在 request 分配的 socket 上挂载 _lastBytesWritten 属性，记录该 socket 已经发送的字节数\n    var markLastBytesWritten = function() {\n        try {\n            Object.defineProperty(sender.req.connection, '_lastBytesWritten', {\n                enumerable: true,\n                configurable: true,\n                writable: true,\n                value: sender.req.connection.bytesWritten\n            });\n        } catch(e) {\n        }\n    };\n\n    sender.on('error', function (err) {\n        markLastBytesWritten();\n        cb(util.error(err));\n    });\n    sender.on('response', function (response) {\n        retResponse = response;\n        var responseContentLength = response.headers['content-length'] || 0;\n        var chunkList = [];\n        var statusCode = response.statusCode;\n        var statusSuccess = Math.floor(statusCode / 100) === 2; // 200 202 204 206\n        if (statusSuccess && params.outputStream) {\n            sender.on('end', function () {\n                cb(null, {});\n            });\n        } else if (responseContentLength >= process.binding('buffer').kMaxLength && opt.method !== 'HEAD') {\n            cb(util.error(new Error('file size large than ' + process.binding('buffer').kMaxLength + ', please use \"Output\" Stream to getObject.')));\n        } else {\n            var dataHandler = function (chunk) {\n                chunkList.push(chunk);\n            };\n            var endHandler = function () {\n                try {\n                    var bodyBuf = Buffer.concat(chunkList);\n                } catch (e) {\n                    cb(util.error(e));\n                    return;\n                }\n                var body = bodyBuf.toString();\n\n                // 不对 body 进行转换，body 直接挂载返回\n                if (rawBody && statusSuccess) return cb(null, {body: bodyBuf});\n\n                // 解析 xml body\n                var json = {};\n                try {\n                    json = body && body.indexOf('<') > -1 && body.indexOf('>') > -1 && util.xml2json(body) || {};\n                } catch (e) {\n                }\n\n                // 处理返回值\n                var xmlError = json && json.Error;\n                if (statusSuccess) { // 正确返回，状态码 2xx 时，body 不会有 Error\n                    cb(null, json);\n                } else if (xmlError) { // 正常返回了 xml body，且有 Error 节点\n                    cb(util.error(new Error(xmlError.Message), {code: xmlError.Code, error: xmlError}));\n                } else if (statusCode) { // 有错误的状态码\n                    cb(util.error(new Error(response.statusMessage), {code: '' + statusCode}));\n                } else { // 无状态码，或者获取不到状态码\n                    cb(util.error(new Error('statusCode error')));\n                }\n                chunkList = null;\n            };\n            sender.on('data', dataHandler);\n            sender.on('end', endHandler);\n        }\n    });\n\n    // kill task\n    var killTask = function (data) {\n        if (data.TaskId === TaskId) {\n            readStream && readStream.isSdkCreated && readStream.close && readStream.close(); // 如果是 SDK 里从 FilePath 创建的读流，要主动取消\n            sender && sender.abort && sender.abort();\n            self.off('inner-kill-task', killTask);\n        }\n    };\n    TaskId && self.on('inner-kill-task', killTask);\n\n    // 请求结束时，在 request 分配的 socket 上挂载 _lastBytesWritten 属性，记录该 socket 已经发送的字节数\n    sender.once('end', function() {\n        markLastBytesWritten();\n    });\n\n    // upload progress\n    if (params.onProgress && typeof params.onProgress === 'function') {\n        var contentLength = opt.headers['Content-Length'];\n        var time0 = Date.now();\n        var size0 = 0;\n        sender.on('drain', function () {\n            var time1 = Date.now();\n            var loaded = 0;\n            try {\n                // 已经上传的字节数 = socket当前累计发送的字节数 - 头部长度 - socket以前发送的字节数\n                loaded = sender.req.connection.bytesWritten - sender.req._header.length - (sender.req.connection._lastBytesWritten || 0);\n            } catch (e) {\n            }\n            var total = contentLength;\n            var speed = parseInt((loaded - size0) / ((time1 - time0) / 1000) * 100) / 100 || 0;\n            var percent = parseInt(loaded / total * 100) / 100 || 0;\n            time0 = time1;\n            size0 = loaded;\n            params.onProgress({\n                loaded: loaded,\n                total: total,\n                speed: speed,\n                percent: percent,\n            });\n        });\n    }\n    // download progress\n    if (params.onDownloadProgress && typeof params.onDownloadProgress === 'function') {\n        var time0 = Date.now();\n        var size0 = 0;\n        var loaded = 0;\n        var total = 0;\n        sender.on('response', function (res) {\n            total = res.headers['content-length'];\n            sender.on('data', function (chunk) {\n                loaded += chunk.length;\n                var time1 = Date.now();\n                var speed = parseInt((loaded - size0) / ((time1 - time0) / 1000) * 100) / 100 || 0;\n                var percent = parseInt(loaded / total * 100) / 100 || 0;\n                time0 = time1;\n                size0 = loaded;\n                params.onDownloadProgress({\n                    loaded: loaded,\n                    total: total,\n                    speed: speed,\n                    percent: percent,\n                });\n            });\n        });\n    }\n\n    // pipe 输入\n    if (readStream) {\n        readStream.on('error', function (err) {\n            sender && sender.abort && sender.abort();\n            cb(err);\n        });\n        readStream.pipe(sender);\n    }\n    // pipe 输出\n    if (params.outputStream) {\n        params.outputStream.on('error', function (err) {\n            sender && sender.abort && sender.abort();\n            cb(err)\n        });\n        sender.pipe(params.outputStream);\n    }\n\n    return sender;\n\n}\n\n\nvar API_MAP = {\n    // Bucket 相关方法\n    getService: getService,                      // Bucket\n    putBucket: putBucket,\n    headBucket: headBucket,                      // Bucket\n    getBucket: getBucket,\n    deleteBucket: deleteBucket,\n    putBucketAcl: putBucketAcl,                  // BucketACL\n    getBucketAcl: getBucketAcl,\n    putBucketCors: putBucketCors,                // BucketCors\n    getBucketCors: getBucketCors,\n    deleteBucketCors: deleteBucketCors,\n    getBucketLocation: getBucketLocation,        // BucketLocation\n    getBucketPolicy: getBucketPolicy,            // BucketPolicy\n    putBucketPolicy: putBucketPolicy,\n    deleteBucketPolicy: deleteBucketPolicy,\n    putBucketTagging: putBucketTagging,          // BucketTagging\n    getBucketTagging: getBucketTagging,\n    deleteBucketTagging: deleteBucketTagging,\n    putBucketLifecycle: putBucketLifecycle,      // BucketLifecycle\n    getBucketLifecycle: getBucketLifecycle,\n    deleteBucketLifecycle: deleteBucketLifecycle,\n    putBucketVersioning: putBucketVersioning,    // BucketVersioning\n    getBucketVersioning: getBucketVersioning,\n    putBucketReplication: putBucketReplication,  // BucketReplication\n    getBucketReplication: getBucketReplication,\n    deleteBucketReplication: deleteBucketReplication,\n    putBucketWebsite: putBucketWebsite,          // BucketWebsite\n    getBucketWebsite: getBucketWebsite,\n    deleteBucketWebsite: deleteBucketWebsite,\n    putBucketReferer: putBucketReferer,          // BucketReferer\n    getBucketReferer: getBucketReferer,\n    putBucketDomain: putBucketDomain,            // BucketDomain\n    getBucketDomain: getBucketDomain,\n    deleteBucketDomain: deleteBucketDomain,\n    putBucketOrigin: putBucketOrigin,            // BucketOrigin\n    getBucketOrigin: getBucketOrigin,\n    deleteBucketOrigin: deleteBucketOrigin,\n    putBucketLogging: putBucketLogging,             // BucketLogging\n    getBucketLogging: getBucketLogging,\n    putBucketInventory: putBucketInventory,         // BucketInventory\n    getBucketInventory: getBucketInventory,\n    listBucketInventory: listBucketInventory,\n    deleteBucketInventory: deleteBucketInventory,\n    putBucketAccelerate: putBucketAccelerate,\n    getBucketAccelerate: getBucketAccelerate,\n    putBucketEncryption: putBucketEncryption,\n    getBucketEncryption: getBucketEncryption,\n    deleteBucketEncryption: deleteBucketEncryption,\n\n    // Object 相关方法\n    getObject: getObject,\n    getObjectStream: getObjectStream,\n    headObject: headObject,\n    listObjectVersions: listObjectVersions,\n    putObject: putObject,\n    deleteObject: deleteObject,\n    getObjectAcl: getObjectAcl,\n    putObjectAcl: putObjectAcl,\n    optionsObject: optionsObject,\n    putObjectCopy: putObjectCopy,\n    deleteMultipleObject: deleteMultipleObject,\n    restoreObject: restoreObject,\n    putObjectTagging: putObjectTagging,\n    getObjectTagging: getObjectTagging,\n    deleteObjectTagging: deleteObjectTagging,\n    selectObjectContent: selectObjectContent,\n    selectObjectContentStream: selectObjectContentStream,\n    appendObject: appendObject,\n\n    // 分块上传相关方法\n    uploadPartCopy: uploadPartCopy,\n    multipartInit: multipartInit,\n    multipartUpload: multipartUpload,\n    multipartComplete: multipartComplete,\n    multipartList: multipartList,\n    multipartListPart: multipartListPart,\n    multipartAbort: multipartAbort,\n\n    // 工具方法\n    request: request,\n    getObjectUrl: getObjectUrl,\n    getAuth: getAuth,\n    getV4Auth: getV4Auth,\n};\n\nfunction warnOldApi(apiName, fn, proto) {\n    util.each(['Cors', 'Acl'], function (suffix) {\n        if (apiName.slice(-suffix.length) === suffix) {\n            var oldName = apiName.slice(0, -suffix.length) + suffix.toUpperCase();\n            var apiFn = util.apiWrapper(apiName, fn);\n            var warned = false;\n            proto[oldName] = function () {\n                !warned && console.warn('warning: cos.' + oldName + ' has been deprecated. Please Use cos.' + apiName + ' instead.');\n                warned = true;\n                apiFn.apply(this, arguments);\n            };\n        }\n    });\n}\n\nmodule.exports.init = function (COS, task) {\n    task.transferToTaskMethod(API_MAP, 'putObject');\n    util.each(API_MAP, function (fn, apiName) {\n        COS.prototype[apiName] = util.apiWrapper(apiName, fn);\n        warnOldApi(apiName, fn, COS.prototype);\n    });\n};\n","module.exports = {\n  \"name\": \"cos-nodejs-sdk-v5\",\n  \"version\": \"2.11.19\",\n  \"description\": \"cos nodejs sdk v5\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"scripts\": {\n    \"demo\": \"node demo/demo.js\",\n    \"demo-sts\": \"node demo/demo-sts.js\",\n    \"demo-sts-scope\": \"node demo/demo-sts-scope.js\",\n    \"test\": \"mocha test/test.js\",\n    \"nyc\": \"nyc --reporter=clover --reporter=cobertura mocha --reporter xunit --reporter-options output=mocha.xml test/test.js\",\n    \"csp\": \"mocha test/csp.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/tencentyun/cos-nodejs-sdk-v5.git\"\n  },\n  \"keywords\": [\n    \"tencent\",\n    \"tencent cloud\",\n    \"qcloud\",\n    \"cos\",\n    \"cos-sdk\"\n  ],\n  \"author\": \"carsonxu\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/tencentyun/cos-nodejs-sdk-v5/issues\"\n  },\n  \"homepage\": \"https://github.com/tencentyun/cos-nodejs-sdk-v5#readme\",\n  \"dependencies\": {\n    \"conf\": \"^9.0.0\",\n    \"mime-types\": \"^2.1.24\",\n    \"request\": \"^2.88.2\",\n    \"xml2js\": \"^0.4.19\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^14.14.20\",\n    \"batch\": \"^0.6.1\",\n    \"crc64-ecma182.js\": \"^1.0.0\",\n    \"mocha\": \"^4.0.1\",\n    \"nyc\": \"^15.1.0\",\n    \"qcloud-cos-sts\": \"^3.0.0\"\n  },\n  \"engines\": {\n    \"node\": \">= 6\"\n  }\n}\n","var { Transform } = require('stream');\nvar sysUtil = require('util');\nvar util = require('./util');\n\nfunction SelectStream(options) {\n    if (!(this instanceof SelectStream)) return new SelectStream(options);\n    Transform.call(this, options);\n    Object.assign(this, {\n        totalLength: 0, // current message block's total length\n        headerLength: 0, // current message block's header length\n        payloadRestLength: 0, // current message block's rest payload length\n        header: null, // current message block's header\n        chunk: Buffer.alloc(0), // the data chunk being parsed\n        callback: null, // current _transform function's callback\n    });\n}\nSelectStream.prototype = {\n    /**\n     * process data chunk\n     * concat the last chunk and current chunk\n     * try to parse current message block's totalLength and headerLength\n     * try to parse current message block's header\n     * try to parse current message block's payload\n     */\n    processChunk(chunk, encoding, callback) {\n        Object.assign(this, {\n            chunk: Buffer.concat([this.chunk, chunk], this.chunk.length + chunk.length),\n            encoding,\n            callback,\n        });\n\n        this.parseLength();\n        this.parseHeader();\n        this.parsePayload();\n    },\n\n    /**\n     * try to parse current message block's totalLength and headerLength\n     */\n    parseLength() {\n        if (!this.callback) {\n            return;\n        }\n\n        if (this.totalLength && this.headerLength) {\n            return;\n        }\n\n        if (this.chunk.length >= 12) {\n            this.totalLength = this.chunk.readInt32BE(0);\n            this.headerLength = this.chunk.readInt32BE(4);\n            this.payloadRestLength = this.totalLength - this.headerLength - 16;\n            this.chunk = this.chunk.slice(12);\n        } else {\n            this.callback();\n            this.callback = null;\n        }\n    },\n\n    /**\n     * try to parse current message block's header\n     * if header[':message-type'] is error, callback the error, emit error to next stream\n     */\n    parseHeader() {\n        if (!this.callback) {\n            return;\n        }\n\n        if (!this.headerLength || this.header) {\n            return;\n        }\n\n        if (this.chunk.length >= this.headerLength) {\n            var header = {};\n            var offset = 0;\n            while (offset < this.headerLength) {\n                var headerNameLength = this.chunk[offset] * 1;\n                var headerName = this.chunk.toString('ascii', offset + 1, offset + 1 + headerNameLength);\n                var headerValueLength = this.chunk.readInt16BE(offset + headerNameLength + 2);\n                var headerValue = this.chunk.toString('ascii', offset + headerNameLength + 4, offset + headerNameLength + 4 + headerValueLength);\n                header[headerName] = headerValue;\n                offset += headerNameLength + 4 + headerValueLength;\n            }\n            this.header = header;\n            this.chunk = this.chunk.slice(this.headerLength);\n            this.checkErrorHeader();\n        } else {\n            this.callback();\n            this.callback = null;\n        }\n    },\n\n    /**\n     * try to parse current message block's payload\n     */\n    parsePayload() {\n        var self = this;\n        if (!this.callback) {\n            return;\n        }\n\n        if (this.chunk.length <= this.payloadRestLength) {\n            this.payloadRestLength -= this.chunk.length;\n            this.pushData(this.chunk);\n            this.chunk = Buffer.alloc(0);\n        } else if (this.chunk.length < this.payloadRestLength + 4) {\n            this.pushData(this.chunk.slice(0, this.payloadRestLength));\n            this.chunk = this.chunk.slice(this.payloadRestLength);\n            this.payloadRestLength = 0;\n        } else {\n            this.pushData(this.chunk.slice(0, this.payloadRestLength));\n            this.chunk = this.chunk.slice(this.payloadRestLength + 4);\n            this.totalLength = 0;\n            this.headerLength = 0;\n            this.payloadRestLength = 0;\n            this.header = null;\n        }\n\n        if (\n            this.chunk.length\n            && !(this.payloadRestLength === 0 && this.chunk.length < 4)\n        ) {\n            process.nextTick(function () {\n                self.processChunk(Buffer.alloc(0), self.encoding, self.callback);\n            });\n        } else {\n            this.callback();\n            this.callback = null;\n        }\n    },\n\n    /**\n     * if header[':event-type'] is Records, pipe payload to next stream\n     */\n    pushData(content) {\n        if (this.header[':event-type'] === 'Records') {\n            this.push(content);\n            this.emit('message:records', content);\n        } else if (this.header[':event-type'] === 'Progress') {\n            var progress = util.xml2json(content.toString()).Progress;\n            this.emit('message:progress', progress);\n        } else if (this.header[':event-type'] === 'Stats') {\n            var stats = util.xml2json(content.toString()).Stats;\n            this.emit('message:stats', stats);\n        } else if (this.header[':event-type'] === 'error') {\n            var errCode = this.header[':error-code'];\n            var errMessage = this.header[':error-message'];\n            var err = new Error(errMessage);\n            err.message = errMessage;\n            err.name = err.code = errCode;\n            this.emit('message:error', err);\n        } else { // 'Continuation', 'End'\n            this.emit('message:' + this.header[':event-type'].toLowerCase());\n        }\n    },\n\n    /**\n     * if header[':message-type'] is error, callback the error, emit error to next stream\n     */\n    checkErrorHeader() {\n        if (this.header[':message-type'] === 'error') {\n            this.callback(this.header);\n            this.callback = null;\n        }\n    },\n\n    /**\n     * Transform Stream's implementations\n     */\n    _transform(chunk, encoding, callback) {\n        this.processChunk(chunk, encoding, callback);\n    },\n    _flush(callback) {\n        this.processChunk(Buffer.alloc(0), this.encoding, callback);\n    },\n};\nsysUtil.inherits(SelectStream, Transform);\n\nmodule.exports = SelectStream;\n","var session = require('./session');\nvar fs = require('fs');\nvar Async = require('./async');\nvar EventProxy = require('./event').EventProxy;\nvar util = require('./util');\n\n// 文件分块上传全过程，暴露的分块上传接口\nfunction sliceUploadFile(params, callback) {\n    var self = this;\n    var ep = new EventProxy();\n    var TaskId = params.TaskId;\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var FilePath = params.FilePath;\n    var ChunkSize = params.ChunkSize || params.SliceSize || self.options.ChunkSize;\n    var AsyncLimit = params.AsyncLimit;\n    var StorageClass = params.StorageClass;\n    var ServerSideEncryption = params.ServerSideEncryption;\n    var FileSize;\n\n    var onProgress;\n    var onHashProgress = params.onHashProgress;\n\n    // 上传过程中出现错误，返回错误\n    ep.on('error', function (err) {\n        if (!self._isRunningTask(TaskId)) return;\n        var _err = {\n          UploadId: params.UploadData.UploadId || '',\n          err: err,\n        };\n        return callback(_err);\n    });\n\n    // 上传分块完成，开始 uploadSliceComplete 操作\n    ep.on('upload_complete', function (UploadCompleteData) {\n        var _UploadCompleteData = util.extend({\n          UploadId: params.UploadData.UploadId || ''\n        }, UploadCompleteData);\n        callback(null, _UploadCompleteData);\n    });\n\n    // 上传分块完成，开始 uploadSliceComplete 操作\n    ep.on('upload_slice_complete', function (UploadData) {\n        var metaHeaders = {};\n        util.each(params.Headers, function (val, k) {\n            var shortKey = k.toLowerCase();\n            if (shortKey.indexOf('x-cos-meta-') === 0 || shortKey === 'pic-operations') metaHeaders[k] = val;\n        });\n        uploadSliceComplete.call(self, {\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            UploadId: UploadData.UploadId,\n            SliceList: UploadData.SliceList,\n            Headers: metaHeaders,\n        }, function (err, data) {\n            if (!self._isRunningTask(TaskId)) return;\n            session.removeUsing(UploadData.UploadId);\n            if (err) {\n                onProgress(null, true);\n                return ep.emit('error', err);\n            }\n            session.removeUploadId.call(self, UploadData.UploadId);\n            onProgress({loaded: FileSize, total: FileSize}, true);\n            ep.emit('upload_complete', data);\n        });\n    });\n\n    // 获取 UploadId 完成，开始上传每个分片\n    ep.on('get_upload_data_finish', function (UploadData) {\n\n        // 处理 UploadId 缓存\n        var uuid = session.getFileId(params.FileStat, params.ChunkSize, Bucket, Key);\n        uuid && session.saveUploadId.call(self, uuid, UploadData.UploadId, self.options.UploadIdCacheLimit); // 缓存 UploadId\n        session.setUsing(UploadData.UploadId); // 标记 UploadId 为正在使用\n\n        // 获取 UploadId\n        onProgress(null, true); // 任务状态开始 uploading\n        uploadSliceList.call(self, {\n            TaskId: TaskId,\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            FilePath: FilePath,\n            FileSize: FileSize,\n            SliceSize: ChunkSize,\n            AsyncLimit: AsyncLimit,\n            ServerSideEncryption: ServerSideEncryption,\n            UploadData: UploadData,\n            onProgress: onProgress\n        }, function (err, data) {\n            if (!self._isRunningTask(TaskId)) return;\n            if (err) {\n                onProgress(null, true);\n                return ep.emit('error', err);\n            }\n            ep.emit('upload_slice_complete', data);\n        });\n    });\n\n    // 开始获取文件 UploadId，里面会视情况计算 ETag，并比对，保证文件一致性，也优化上传\n    ep.on('get_file_size_finish', function () {\n\n        onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);\n\n        if (params.UploadData.UploadId) {\n            ep.emit('get_upload_data_finish', params.UploadData);\n        } else {\n            var _params = util.extend({\n                TaskId: TaskId,\n                Bucket: Bucket,\n                Region: Region,\n                Key: Key,\n                Headers: params.Headers,\n                StorageClass: StorageClass,\n                FilePath: FilePath,\n                FileSize: FileSize,\n                SliceSize: ChunkSize,\n                onHashProgress: onHashProgress,\n            }, params);\n            getUploadIdAndPartList.call(self, _params, function (err, UploadData) {\n                if (!self._isRunningTask(TaskId)) return;\n                if (err) return ep.emit('error', err);\n                params.UploadData.UploadId = UploadData.UploadId;\n                params.UploadData.PartList = UploadData.PartList;\n                ep.emit('get_upload_data_finish', params.UploadData);\n            });\n        }\n    });\n\n    // 获取上传文件大小\n    FileSize = params.ContentLength;\n    delete params.ContentLength;\n    !params.Headers && (params.Headers = {});\n    util.each(params.Headers, function (item, key) {\n        if (key.toLowerCase() === 'content-length') {\n            delete params.Headers[key];\n        }\n    });\n\n    // 控制分片大小\n    (function () {\n        var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];\n        var AutoChunkSize = 1024 * 1024;\n        for (var i = 0; i < SIZE.length; i++) {\n            AutoChunkSize = SIZE[i] * 1024 * 1024;\n            if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;\n        }\n        params.ChunkSize = params.SliceSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);\n    })();\n\n    // 开始上传\n    if (FileSize === 0) {\n        params.Body = '';\n        params.ContentLength = 0;\n        params.SkipTask = true;\n        self.putObject(params, callback);\n    } else {\n        ep.emit('get_file_size_finish');\n    }\n\n}\n\n// 获取上传任务的 UploadId\nfunction getUploadIdAndPartList(params, callback) {\n    var TaskId = params.TaskId;\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var StorageClass = params.StorageClass;\n    var self = this;\n\n    // 计算 ETag\n    var ETagMap = {};\n    var FileSize = params.FileSize;\n    var SliceSize = params.SliceSize;\n    var SliceCount = Math.ceil(FileSize / SliceSize);\n    var FinishSliceCount = 0;\n    var FinishSize = 0;\n    var onHashProgress = util.throttleOnProgress.call(self, FileSize, params.onHashProgress);\n    var getChunkETag = function (PartNumber, callback) {\n        var start = SliceSize * (PartNumber - 1);\n        var end = Math.min(start + SliceSize, FileSize);\n        var ChunkSize = end - start;\n\n        if (ETagMap[PartNumber]) {\n            callback(null, {\n                PartNumber: PartNumber,\n                ETag: ETagMap[PartNumber],\n                Size: ChunkSize\n            });\n        } else {\n            util.fileSlice(params.FilePath, start, end, function (chunkItem) {\n                util.getFileMd5(chunkItem, function (err, md5) {\n                    if (err) return callback(util.error(err));\n                    var ETag = '\"' + md5 + '\"';\n                    ETagMap[PartNumber] = ETag;\n                    FinishSliceCount += 1;\n                    FinishSize += ChunkSize;\n                    onHashProgress({loaded: FinishSize, total: FileSize});\n                    callback(null, {\n                        PartNumber: PartNumber,\n                        ETag: ETag,\n                        Size: ChunkSize\n                    });\n                });\n            });\n        }\n    };\n\n    // 通过和文件的 md5 对比，判断 UploadId 是否可用\n    var isAvailableUploadList = function (PartList, callback) {\n        var PartCount = PartList.length;\n        // 如果没有分片，通过\n        if (PartCount === 0) {\n            return callback(null, true);\n        }\n        // 检查分片数量\n        if (PartCount > SliceCount) {\n            return callback(null, false);\n        }\n        // 检查分片大小\n        if (PartCount > 1) {\n            var PartSliceSize = Math.max(PartList[0].Size, PartList[1].Size);\n            if (PartSliceSize !== SliceSize) {\n                return callback(null, false);\n            }\n        }\n        // 逐个分片计算并检查 ETag 是否一致\n        var next = function (index) {\n            if (index < PartCount) {\n                var Part = PartList[index];\n                getChunkETag(Part.PartNumber, function (err, chunk) {\n                    if (chunk && chunk.ETag === Part.ETag && chunk.Size === Part.Size) {\n                        next(index + 1);\n                    } else {\n                        callback(null, false);\n                    }\n                });\n            } else {\n                callback(null, true);\n            }\n        };\n        next(0);\n    };\n\n    var ep = new EventProxy();\n    ep.on('error', function (errData) {\n        if (!self._isRunningTask(TaskId)) return;\n        return callback(errData);\n    });\n\n    // 存在 UploadId\n    ep.on('upload_id_available', function (UploadData) {\n        // 转换成 map\n        var map = {};\n        var list = [];\n        util.each(UploadData.PartList, function (item) {\n            map[item.PartNumber] = item;\n        });\n        for (var PartNumber = 1; PartNumber <= SliceCount; PartNumber++) {\n            var item = map[PartNumber];\n            if (item) {\n                item.PartNumber = PartNumber;\n                item.Uploaded = true;\n            } else {\n                item = {\n                    PartNumber: PartNumber,\n                    ETag: null,\n                    Uploaded: false\n                };\n            }\n            list.push(item);\n        }\n        UploadData.PartList = list;\n        callback(null, UploadData);\n    });\n\n    // 不存在 UploadId, 初始化生成 UploadId\n    ep.on('no_available_upload_id', function () {\n        if (!self._isRunningTask(TaskId)) return;\n        var _params = util.extend({\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            Headers: util.clone(params.Headers),\n            Query: util.clone(params.Query),\n            StorageClass: StorageClass,\n        }, params);\n        self.multipartInit(_params, function (err, data) {\n            if (!self._isRunningTask(TaskId)) return;\n            if (err) return ep.emit('error', err);\n            var UploadId = data.UploadId;\n            if (!UploadId) {\n                return callback(util.error(new Error('no such upload id')));\n            }\n            ep.emit('upload_id_available', {UploadId: UploadId, PartList: []});\n        });\n    });\n\n    // 如果已存在 UploadId，找一个可以用的 UploadId\n    ep.on('has_and_check_upload_id', function (UploadIdList) {\n        // 串行地，找一个内容一致的 UploadId\n        UploadIdList = UploadIdList.reverse();\n        Async.eachLimit(UploadIdList, 1, function (UploadId, asyncCallback) {\n            if (!self._isRunningTask(TaskId)) return;\n            // 如果正在上传，跳过\n            if (session.using[UploadId]) {\n                asyncCallback(); // 检查下一个 UploadId\n                return;\n            }\n            // 判断 UploadId 是否可用\n            wholeMultipartListPart.call(self, {\n                Bucket: Bucket,\n                Region: Region,\n                Key: Key,\n                UploadId: UploadId,\n            }, function (err, PartListData) {\n                if (!self._isRunningTask(TaskId)) return;\n                if (err) {\n                    session.removeUsing(UploadId);\n                    return ep.emit('error', err);\n                }\n                var PartList = PartListData.PartList;\n                PartList.forEach(function (item) {\n                    item.PartNumber *= 1;\n                    item.Size *= 1;\n                    item.ETag = item.ETag || '';\n                });\n                isAvailableUploadList(PartList, function (err, isAvailable) {\n                    if (!self._isRunningTask(TaskId)) return;\n                    if (err) return ep.emit('error', err);\n                    if (isAvailable) {\n                        asyncCallback({\n                            UploadId: UploadId,\n                            PartList: PartList\n                        }); // 马上结束\n                    } else {\n                        asyncCallback(); // 检查下一个 UploadId\n                    }\n                });\n            });\n        }, function (AvailableUploadData) {\n            if (!self._isRunningTask(TaskId)) return;\n            onHashProgress(null, true);\n            if (AvailableUploadData && AvailableUploadData.UploadId) {\n                ep.emit('upload_id_available', AvailableUploadData);\n            } else {\n                ep.emit('no_available_upload_id');\n            }\n        });\n    });\n\n    // 在本地缓存找可用的 UploadId\n    ep.on('seek_local_avail_upload_id', function (RemoteUploadIdList) {\n        // 在本地找可用的 UploadId\n        var uuid = session.getFileId(params.FileStat, params.ChunkSize, Bucket, Key);\n        var LocalUploadIdList = session.getUploadIdList.call(self, uuid);\n        if (!uuid || !LocalUploadIdList) {\n            ep.emit('has_and_check_upload_id', RemoteUploadIdList);\n            return;\n        }\n        var next = function (index) {\n            // 如果本地找不到可用 UploadId，再一个个遍历校验远端\n            if (index >= LocalUploadIdList.length) {\n                ep.emit('has_and_check_upload_id', RemoteUploadIdList);\n                return;\n            }\n            var UploadId = LocalUploadIdList[index];\n            // 如果不在远端 UploadId 列表里，跳过并删除\n            if (!util.isInArray(RemoteUploadIdList, UploadId)) {\n                session.removeUploadId.call(self, UploadId);\n                next(index + 1);\n                return;\n            }\n            // 如果正在上传，跳过\n            if (session.using[UploadId]) {\n                next(index + 1);\n                return;\n            }\n            // 判断 UploadId 是否存在线上\n            wholeMultipartListPart.call(self, {\n                Bucket: Bucket,\n                Region: Region,\n                Key: Key,\n                UploadId: UploadId,\n            }, function (err, PartListData) {\n                if (!self._isRunningTask(TaskId)) return;\n                if (err) {\n                    // 如果 UploadId 获取会出错，跳过并删除\n                    session.removeUploadId.call(self, UploadId);\n                    next(index + 1);\n                } else {\n                    // 找到可用 UploadId\n                    ep.emit('upload_id_available', {\n                        UploadId: UploadId,\n                        PartList: PartListData.PartList,\n                    });\n                }\n            });\n        };\n        next(0);\n    });\n\n    // 获取线上 UploadId 列表\n    ep.on('get_remote_upload_id_list', function () {\n        // 获取符合条件的 UploadId 列表，因为同一个文件可以有多个上传任务。\n        wholeMultipartList.call(self, {\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n        }, function (err, data) {\n            if (!self._isRunningTask(TaskId)) return;\n            if (err) return ep.emit('error', err);\n            // 整理远端 UploadId 列表\n            var RemoteUploadIdList = util.filter(data.UploadList, function (item) {\n                return item.Key === Key && (!StorageClass || item.StorageClass.toUpperCase() === StorageClass.toUpperCase());\n            }).reverse().map(function (item) {\n                return item.UploadId || item.UploadID;\n            });\n            if (RemoteUploadIdList.length) {\n                ep.emit('seek_local_avail_upload_id', RemoteUploadIdList);\n            } else {\n                // 远端没有 UploadId，清理缓存的 UploadId\n                var uuid = session.getFileId(params.FileStat, params.ChunkSize, Bucket, Key), LocalUploadIdList;\n                if (uuid && (LocalUploadIdList = session.getUploadIdList.call(self, uuid))) {\n                    util.each(LocalUploadIdList, function (UploadId) {\n                        session.removeUploadId.call(self, UploadId);\n                    });\n                }\n                ep.emit('no_available_upload_id');\n            }\n        });\n    });\n\n    // 开始找可用 UploadId\n    ep.emit('get_remote_upload_id_list');\n\n}\n\n// 获取符合条件的全部上传任务 (条件包括 Bucket, Region, Prefix)\nfunction wholeMultipartList(params, callback) {\n    var self = this;\n    var UploadList = [];\n    var sendParams = {\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Prefix: params.Key\n    };\n    var next = function () {\n        self.multipartList(sendParams, function (err, data) {\n            if (err) return callback(err);\n            UploadList.push.apply(UploadList, data.Upload || []);\n            if (data.IsTruncated === 'true') { // 列表不完整\n                sendParams.KeyMarker = data.NextKeyMarker;\n                sendParams.UploadIdMarker = data.NextUploadIdMarker;\n                next();\n            } else {\n                callback(null, {UploadList: UploadList});\n            }\n        });\n    };\n    next();\n}\n\n// 获取指定上传任务的分块列表\nfunction wholeMultipartListPart(params, callback) {\n    var self = this;\n    var PartList = [];\n    var sendParams = {\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        UploadId: params.UploadId\n    };\n    var next = function () {\n        self.multipartListPart(sendParams, function (err, data) {\n            if (err) return callback(err);\n            PartList.push.apply(PartList, data.Part || []);\n            if (data.IsTruncated === 'true') { // 列表不完整\n                sendParams.PartNumberMarker = data.NextPartNumberMarker;\n                next();\n            } else {\n                callback(null, {PartList: PartList});\n            }\n        });\n    };\n    next();\n}\n\n// 上传文件分块，包括\n/*\n UploadId (上传任务编号)\n AsyncLimit (并发量)，\n SliceList (上传的分块数组)，\n FilePath (本地文件的位置)，\n SliceSize (文件分块大小)\n FileSize (文件大小)\n onProgress (上传成功之后的回调函数)\n */\nfunction uploadSliceList(params, cb) {\n    var self = this;\n    var TaskId = params.TaskId;\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var UploadData = params.UploadData;\n    var FileSize = params.FileSize;\n    var SliceSize = params.SliceSize;\n    var ChunkParallel = Math.min(params.AsyncLimit || self.options.ChunkParallelLimit || 1, 256);\n    var FilePath = params.FilePath;\n    var SliceCount = Math.ceil(FileSize / SliceSize);\n    var FinishSize = 0;\n    var ServerSideEncryption = params.ServerSideEncryption;\n    var needUploadSlices = util.filter(UploadData.PartList, function (SliceItem) {\n        if (SliceItem['Uploaded']) {\n            FinishSize += SliceItem['PartNumber'] >= SliceCount ? (FileSize % SliceSize || SliceSize) : SliceSize;\n        }\n        return !SliceItem['Uploaded'];\n    });\n    var onProgress = params.onProgress;\n\n    Async.eachLimit(needUploadSlices, ChunkParallel, function (SliceItem, asyncCallback) {\n        if (!self._isRunningTask(TaskId)) return;\n        var PartNumber = SliceItem['PartNumber'];\n        var currentSize = Math.min(FileSize, SliceItem['PartNumber'] * SliceSize) - (SliceItem['PartNumber'] - 1) * SliceSize;\n        var preAddSize = 0;\n        uploadSliceItem.call(self, {\n            TaskId: TaskId,\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            SliceSize: SliceSize,\n            FileSize: FileSize,\n            PartNumber: PartNumber,\n            ServerSideEncryption: ServerSideEncryption,\n            FilePath: FilePath,\n            UploadData: UploadData,\n            onProgress: function (data) {\n                FinishSize += data.loaded - preAddSize;\n                preAddSize = data.loaded;\n                onProgress({loaded: FinishSize, total: FileSize});\n            },\n        }, function (err, data) {\n            if (!self._isRunningTask(TaskId)) return;\n            if (err) {\n                FinishSize -= preAddSize;\n            } else {\n                FinishSize += currentSize - preAddSize;\n                SliceItem.ETag = data.ETag;\n            }\n            onProgress({loaded: FinishSize, total: FileSize});\n            asyncCallback(err || null, data);\n        });\n    }, function (err) {\n        if (!self._isRunningTask(TaskId)) return;\n        if (err) return cb(err);\n        cb(null, {\n            UploadId: UploadData.UploadId,\n            SliceList: UploadData.PartList\n        });\n    });\n}\n\n// 上传指定分片\nfunction uploadSliceItem(params, callback) {\n    var self = this;\n    var TaskId = params.TaskId;\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var FileSize = params.FileSize;\n    var FilePath = params.FilePath;\n    var PartNumber = params.PartNumber * 1;\n    var SliceSize = params.SliceSize;\n    var ServerSideEncryption = params.ServerSideEncryption;\n    var UploadData = params.UploadData;\n    var ChunkRetryTimes = self.options.ChunkRetryTimes + 1;\n    var Headers = params.Headers || {};\n\n    var start = SliceSize * (PartNumber - 1);\n\n    var ContentLength = SliceSize;\n\n    var end = start + SliceSize;\n\n    if (end > FileSize) {\n        end = FileSize;\n        ContentLength = end - start;\n    }\n\n    var headersWhiteList = ['x-cos-traffic-limit', 'x-cos-mime-limit'];\n    var headers = {};\n    util.each(Headers, function(v, k) {\n        if (headersWhiteList.indexOf(k) > -1) {\n            headers[k] = v;\n        }\n    });\n\n    util.fileSlice(FilePath, start, end, function (md5Body) {\n        util.getFileMd5(md5Body, function (err, md5) {\n            var contentMd5 = md5 ? util.binaryBase64(md5) : '';\n            var PartItem = UploadData.PartList[PartNumber - 1];\n            Async.retry(ChunkRetryTimes, function (tryCallback) {\n                if (!self._isRunningTask(TaskId)) return;\n                util.fileSlice(FilePath, start, end, function (Body) {\n                    self.multipartUpload({\n                        TaskId: TaskId,\n                        Bucket: Bucket,\n                        Region: Region,\n                        Key: Key,\n                        ContentLength: ContentLength,\n                        PartNumber: PartNumber,\n                        UploadId: UploadData.UploadId,\n                        ServerSideEncryption: ServerSideEncryption,\n                        Body: Body,\n                        Headers: headers,\n                        onProgress: params.onProgress,\n                        ContentMD5: contentMd5,\n                    }, function (err, data) {\n                        if (!self._isRunningTask(TaskId)) return;\n                        if (err) return tryCallback(err);\n                        PartItem.Uploaded = true;\n                        return tryCallback(null, data);\n                    });\n                });\n            }, function (err, data) {\n                if (!self._isRunningTask(TaskId)) return;\n                return callback(err, data);\n            });\n        });\n    });\n}\n\n\n// 完成分块上传\nfunction uploadSliceComplete(params, callback) {\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var UploadId = params.UploadId;\n    var SliceList = params.SliceList;\n    var self = this;\n    var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\n    var Headers = params.Headers;\n    var Parts = SliceList.map(function (item) {\n        return {\n            PartNumber: item.PartNumber,\n            ETag: item.ETag\n        };\n    });\n    // 完成上传的请求也做重试\n    Async.retry(ChunkRetryTimes, function (tryCallback) {\n        self.multipartComplete({\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            UploadId: UploadId,\n            Parts: Parts,\n            Headers: Headers,\n        }, tryCallback);\n    }, function (err, data) {\n        callback(err, data);\n    });\n}\n\n// 抛弃分块上传任务\n/*\n AsyncLimit (抛弃上传任务的并发量)，\n UploadId (上传任务的编号，当 Level 为 task 时候需要)\n Level (抛弃分块上传任务的级别，task : 抛弃指定的上传任务，file ： 抛弃指定的文件对应的上传任务，其他值 ：抛弃指定Bucket 的全部上传任务)\n */\nfunction abortUploadTask(params, callback) {\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var UploadId = params.UploadId;\n    var Level = params.Level || 'task';\n    var AsyncLimit = params.AsyncLimit;\n    var self = this;\n\n    var ep = new EventProxy();\n\n    ep.on('error', function (errData) {\n        return callback(errData);\n    });\n\n    // 已经获取到需要抛弃的任务列表\n    ep.on('get_abort_array', function (AbortArray) {\n        abortUploadTaskArray.call(self, {\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            Headers: params.Headers,\n            AsyncLimit: AsyncLimit,\n            AbortArray: AbortArray\n        }, callback);\n    });\n\n    if (Level === 'bucket') {\n        // Bucket 级别的任务抛弃，抛弃该 Bucket 下的全部上传任务\n        wholeMultipartList.call(self, {\n            Bucket: Bucket,\n            Region: Region\n        }, function (err, data) {\n            if (err) return callback(err);\n            ep.emit('get_abort_array', data.UploadList || []);\n        });\n    } else if (Level === 'file') {\n        // 文件级别的任务抛弃，抛弃该文件的全部上传任务\n        if (!Key) return callback(util.error(new Error('abort_upload_task_no_key')));\n        wholeMultipartList.call(self, {\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key\n        }, function (err, data) {\n            if (err) return callback(err);\n            ep.emit('get_abort_array', data.UploadList || []);\n        });\n    } else if (Level === 'task') {\n        // 单个任务级别的任务抛弃，抛弃指定 UploadId 的上传任务\n        if (!UploadId) return callback(util.error(new Error('abort_upload_task_no_id')));\n        if (!Key) return callback(util.error(new Error('abort_upload_task_no_key')));\n        ep.emit('get_abort_array', [{\n            Key: Key,\n            UploadId: UploadId\n        }]);\n    } else {\n        return callback(util.error(new Error('abort_unknown_level')));\n    }\n}\n\n// 批量抛弃分块上传任务\nfunction abortUploadTaskArray(params, callback) {\n\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var AbortArray = params.AbortArray;\n    var AsyncLimit = params.AsyncLimit || 1;\n    var self = this;\n\n    var index = 0;\n    var resultList = new Array(AbortArray.length);\n    Async.eachLimit(AbortArray, AsyncLimit, function (AbortItem, nextItem) {\n        var eachIndex = index;\n        if (Key && Key !== AbortItem.Key) {\n            resultList[eachIndex] = {error: {KeyNotMatch: true}};\n            nextItem(null);\n            return;\n        }\n        var UploadId = AbortItem.UploadId || AbortItem.UploadID;\n\n        self.multipartAbort({\n            Bucket: Bucket,\n            Region: Region,\n            Key: AbortItem.Key,\n            Headers: params.Headers,\n            UploadId: UploadId\n        }, function (err) {\n            var task = {\n                Bucket: Bucket,\n                Region: Region,\n                Key: AbortItem.Key,\n                UploadId: UploadId\n            };\n            resultList[eachIndex] = {error: err, task: task};\n            nextItem(null);\n        });\n        index++;\n\n    }, function (err) {\n        if (err) return callback(err);\n\n        var successList = [];\n        var errorList = [];\n\n        for (var i = 0, len = resultList.length; i < len; i++) {\n            var item = resultList[i];\n            if (item['task']) {\n                if (item['error']) {\n                    errorList.push(item['task']);\n                } else {\n                    successList.push(item['task']);\n                }\n            }\n        }\n\n        return callback(null, {\n            successList: successList,\n            errorList: errorList\n        });\n    });\n}\n\n// 高级上传\nfunction uploadFile(params, callback) {\n  var self = this;\n\n  // 判断多大的文件使用分片上传\n  var SliceSize = params.SliceSize === undefined ? self.options.SliceSize : params.SliceSize;\n\n  // 开始处理每个文件\n  var taskList = [];\n\n  fs.stat(params.FilePath, function (err, stat) {\n      if (err) {\n          return callback(err);\n      }\n\n      var isDir = stat.isDirectory();\n      var FileSize = params.ContentLength = stat.size || 0;\n      var fileInfo = {TaskId: ''};\n\n      // 整理 option，用于返回给回调\n      util.each(params, function (v, k) {\n          if (typeof v !== 'object' && typeof v !== 'function') {\n              fileInfo[k] = v;\n          }\n      });\n\n      // 处理文件 TaskReady\n      var _onTaskReady = params.onTaskReady;\n      var onTaskReady = function (tid) {\n          fileInfo.TaskId = tid;\n          _onTaskReady && _onTaskReady(tid);\n      };\n      params.onTaskReady = onTaskReady;\n\n      // 处理文件完成\n      var _onFileFinish = params.onFileFinish;\n      var onFileFinish = function (err, data) {\n          _onFileFinish && _onFileFinish(err, data, fileInfo);\n          callback && callback(err, data);\n      };\n\n      // 添加上传任务\n      var api = FileSize <= SliceSize || isDir ? 'putObject' : 'sliceUploadFile';\n      if (api === 'putObject') {\n        params.Body = isDir ? '' : fs.createReadStream(params.FilePath);\n        params.Body.isSdkCreated = true;\n      }\n      taskList.push({\n          api: api,\n          params: params,\n          callback: onFileFinish,\n      });\n      self._addTasks(taskList);\n  });\n}\n\n// 批量上传文件\nfunction uploadFiles(params, callback) {\n    var self = this;\n\n    // 判断多大的文件使用分片上传\n    var SliceSize = params.SliceSize === undefined ? self.options.SliceSize : params.SliceSize;\n\n    // 汇总返回进度\n    var TotalSize = 0;\n    var TotalFinish = 0;\n    var onTotalProgress = util.throttleOnProgress.call(self, TotalFinish, params.onProgress);\n\n    // 汇总返回回调\n    var unFinishCount = params.files.length;\n    var _onTotalFileFinish = params.onFileFinish;\n    var resultList = Array(unFinishCount);\n    var onTotalFileFinish = function (err, data, options) {\n        onTotalProgress(null, true);\n        _onTotalFileFinish && _onTotalFileFinish(err, data, options);\n        resultList[options.Index] = {\n            options: options,\n            error: err,\n            data: data\n        };\n        if (--unFinishCount <= 0 && callback) {\n            callback(null, {files: resultList});\n        }\n    };\n\n    // 开始处理每个文件\n    var taskList = [];\n    var count = params.files.length;\n    util.each(params.files, function (fileParams, index) {\n        fs.stat(fileParams.FilePath, function (err, stat) {\n            var isDir = stat ? stat.isDirectory() : false;\n            var FileSize = fileParams.ContentLength = stat ? stat.size : 0;\n            var fileInfo = {Index: index, TaskId: ''};\n\n            // 更新文件总大小\n            TotalSize += FileSize;\n\n            // 整理 option，用于返回给回调\n            util.each(fileParams, function (v, k) {\n                if (typeof v !== 'object' && typeof v !== 'function') {\n                    fileInfo[k] = v;\n                }\n            });\n\n            // 处理单个文件 TaskReady\n            var _onTaskReady = fileParams.onTaskReady;\n            var onTaskReady = function (tid) {\n                fileInfo.TaskId = tid;\n                _onTaskReady && _onTaskReady(tid);\n            };\n            fileParams.onTaskReady = onTaskReady;\n\n            // 处理单个文件进度\n            var PreAddSize = 0;\n            var _onProgress = fileParams.onProgress;\n            var onProgress = function (info) {\n                TotalFinish = TotalFinish - PreAddSize + info.loaded;\n                PreAddSize = info.loaded;\n                _onProgress && _onProgress(info);\n                onTotalProgress({loaded: TotalFinish, total: TotalSize});\n            };\n            fileParams.onProgress = onProgress;\n\n            // 处理单个文件完成\n            var _onFileFinish = fileParams.onFileFinish;\n            var onFileFinish = function (err, data) {\n                _onFileFinish && _onFileFinish(err, data);\n                onTotalFileFinish && onTotalFileFinish(err, data, fileInfo);\n            };\n\n            // 添加上传任务\n            var api = FileSize <= SliceSize || isDir ? 'putObject' : 'sliceUploadFile';\n            if (api === 'putObject') {\n                fileParams.Body = isDir ? '' : fs.createReadStream(fileParams.FilePath);\n                fileParams.Body.isSdkCreated = true;\n            }\n            taskList.push({\n                api: api,\n                params: fileParams,\n                callback: onFileFinish,\n            });\n            --count === 0 && self._addTasks(taskList);\n        });\n    });\n}\n\n// 分片复制文件\nfunction sliceCopyFile(params, callback) {\n    var ep = new EventProxy();\n\n    var self = this;\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var CopySource = params.CopySource;\n    var m = util.getSourceParams.call(this, CopySource);\n    if (!m) {\n        callback(util.error(new Error('CopySource format error')));\n        return;\n    }\n\n    var SourceBucket = m.Bucket;\n    var SourceRegion = m.Region;\n    var SourceKey = decodeURIComponent(m.Key);\n    var CopySliceSize = params.CopySliceSize === undefined ? self.options.CopySliceSize : params.CopySliceSize;\n    CopySliceSize = Math.max(0, CopySliceSize);\n\n    var ChunkSize = params.CopyChunkSize || this.options.CopyChunkSize;\n    var ChunkParallel = this.options.CopyChunkParallelLimit;\n    var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\n\n    var ChunkCount = 0;\n    var FinishSize = 0;\n    var FileSize;\n    var onProgress;\n    var SourceResHeaders = {};\n    var SourceHeaders = {};\n    var TargetHeader = {};\n\n    // 分片复制完成，开始 multipartComplete 操作\n    ep.on('copy_slice_complete', function (UploadData) {\n        var metaHeaders = {};\n        util.each(params.Headers, function (val, k) {\n            if (k.toLowerCase().indexOf('x-cos-meta-') === 0) metaHeaders[k] = val;\n        });\n        var Parts = util.map(UploadData.PartList, function (item) {\n            return {\n                PartNumber: item.PartNumber,\n                ETag: item.ETag,\n            };\n        });\n        // 完成上传的请求也做重试\n        Async.retry(ChunkRetryTimes, function (tryCallback) {\n            self.multipartComplete({\n                Bucket: Bucket,\n                Region: Region,\n                Key: Key,\n                UploadId: UploadData.UploadId,\n                Parts: Parts,\n            }, tryCallback);\n        }, function (err, data) {\n          session.removeUsing(UploadData.UploadId); // 标记 UploadId 没被使用了，因为复制没提供重试，所以只要出错，就是 UploadId 停用了。\n          if (err) {\n              onProgress(null, true);\n              return callback(err);\n          }\n          session.removeUploadId.call(self, UploadData.UploadId);\n          onProgress({loaded: FileSize, total: FileSize}, true);\n          callback(null, data);\n      });\n    });\n\n    ep.on('get_copy_data_finish',function (UploadData) {\n        // 处理 UploadId 缓存\n        var uuid = session.getCopyFileId(CopySource, SourceResHeaders, ChunkSize, Bucket, Key);\n        uuid && session.saveUploadId.call(self, uuid, UploadData.UploadId, self.options.UploadIdCacheLimit); // 缓存 UploadId\n        session.setUsing(UploadData.UploadId); // 标记 UploadId 为正在使用\n\n        var needCopySlices = util.filter(UploadData.PartList, function (SliceItem) {\n            if (SliceItem['Uploaded']) {\n                FinishSize += SliceItem['PartNumber'] >= ChunkCount ? (FileSize % ChunkSize || ChunkSize) : ChunkSize;\n            }\n            return !SliceItem['Uploaded'];\n        });\n        Async.eachLimit(needCopySlices, ChunkParallel, function (SliceItem, asyncCallback) {\n            var PartNumber = SliceItem.PartNumber;\n            var CopySourceRange = SliceItem.CopySourceRange;\n            var currentSize = SliceItem.end - SliceItem.start;\n            Async.retry(ChunkRetryTimes, function (tryCallback) {\n                copySliceItem.call(self, {\n                  Bucket: Bucket,\n                  Region: Region,\n                  Key: Key,\n                  CopySource: CopySource,\n                  UploadId: UploadData.UploadId,\n                  PartNumber: PartNumber,\n                  CopySourceRange: CopySourceRange,\n              }, tryCallback);\n            }, function (err,data) {\n              if (err) return asyncCallback(err);\n              FinishSize += currentSize;\n              onProgress({loaded: FinishSize, total: FileSize});\n              SliceItem.ETag = data.ETag;\n              asyncCallback(err || null, data);\n          });\n        }, function (err) {\n            if (err) {\n                session.removeUsing(UploadData.UploadId); // 标记 UploadId 没被使用了，因为复制没提供重试，所以只要出错，就是 UploadId 停用了。\n                onProgress(null, true);\n                return callback(err);\n            }\n            ep.emit('copy_slice_complete', UploadData);\n        });\n    });\n\n    ep.on('get_chunk_size_finish', function () {\n        var createNewUploadId = function () {\n            self.multipartInit({\n                Bucket: Bucket,\n                Region: Region,\n                Key: Key,\n                Headers: TargetHeader,\n            }, function (err,data) {\n                if (err) return callback(err);\n                params.UploadId = data.UploadId;\n                ep.emit('get_copy_data_finish', {UploadId: params.UploadId, PartList: params.PartList});\n            });\n        };\n\n        // 在本地找可用的 UploadId\n        var uuid = session.getCopyFileId(CopySource, SourceResHeaders, ChunkSize, Bucket, Key);\n        var LocalUploadIdList = session.getUploadIdList.call(self, uuid);\n        if (!uuid || !LocalUploadIdList) return createNewUploadId();\n\n        var next = function (index) {\n            // 如果本地找不到可用 UploadId，再一个个遍历校验远端\n            if (index >= LocalUploadIdList.length) return createNewUploadId();\n            var UploadId = LocalUploadIdList[index];\n            // 如果正在被使用，跳过\n            if (session.using[UploadId]) return next(index + 1);\n            // 判断 UploadId 是否存在线上\n            wholeMultipartListPart.call(self, {\n                Bucket: Bucket,\n                Region: Region,\n                Key: Key,\n                UploadId: UploadId,\n            }, function (err, PartListData) {\n                if (err) {\n                    // 如果 UploadId 获取会出错，跳过并删除\n                    session.removeUploadId.call(self, UploadId);\n                    next(index + 1);\n                } else {\n                    // 如果异步回来 UploadId 已经被用了，也跳过\n                    if (session.using[UploadId]) return next(index + 1);\n                    // 找到可用 UploadId\n                    var finishETagMap = {};\n                    var offset = 0;\n                    util.each(PartListData.PartList, function (PartItem) {\n                        var size = parseInt(PartItem.Size);\n                        var end = offset + size - 1;\n                        finishETagMap[PartItem.PartNumber + '|' + offset + '|' + end] = PartItem.ETag;\n                        offset += size;\n                    });\n                    util.each(params.PartList, function (PartItem) {\n                        var ETag = finishETagMap[PartItem.PartNumber + '|' + PartItem.start + '|' + PartItem.end];\n                        if (ETag) {\n                            PartItem.ETag = ETag;\n                            PartItem.Uploaded = true;\n                        }\n                    });\n                    ep.emit('get_copy_data_finish', {UploadId: UploadId, PartList: params.PartList});\n                }\n            });\n        };\n        next(0);\n    });\n\n    ep.on('get_file_size_finish', function () {\n        // 控制分片大小\n        (function () {\n            var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];\n            var AutoChunkSize = 1024 * 1024;\n            for (var i = 0; i < SIZE.length; i++) {\n                AutoChunkSize = SIZE[i] * 1024 * 1024;\n                if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;\n            }\n            params.ChunkSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);\n            ChunkCount = Math.ceil(FileSize / ChunkSize);\n\n            var list = [];\n            for (var partNumber = 1; partNumber <= ChunkCount; partNumber++) {\n                var start = (partNumber - 1) * ChunkSize;\n                var end = partNumber * ChunkSize < FileSize ? (partNumber * ChunkSize - 1) : FileSize - 1;\n                var item = {\n                    PartNumber: partNumber,\n                    start: start,\n                    end: end,\n                    CopySourceRange: \"bytes=\" + start + \"-\" + end,\n                };\n                list.push(item);\n            }\n            params.PartList = list;\n        })();\n\n        var TargetHeader;\n        if (params.Headers['x-cos-metadata-directive'] === 'Replaced') {\n            TargetHeader = params.Headers;\n        } else {\n            TargetHeader = SourceHeaders;\n        }\n        TargetHeader['x-cos-storage-class'] = params.Headers['x-cos-storage-class'] || SourceHeaders['x-cos-storage-class'];\n        TargetHeader = util.clearKey(TargetHeader);\n        /**\n         * 对于归档存储的对象，如果未恢复副本，则不允许 Copy\n         */\n        if (SourceHeaders['x-cos-storage-class'] === 'ARCHIVE' || SourceHeaders['x-cos-storage-class'] === 'DEEP_ARCHIVE') {\n            var restoreHeader = SourceHeaders['x-cos-restore'];\n            if (!restoreHeader || restoreHeader === 'ongoing-request=\"true\"') {\n                callback(util.error(new Error('Unrestored archive object is not allowed to be copied')));\n                return;\n            }\n        }\n        /**\n         * 去除一些无用的头部，规避 multipartInit 出错\n         * 这些头部通常是在 putObjectCopy 时才使用\n         */\n        delete TargetHeader['x-cos-copy-source'];\n        delete TargetHeader['x-cos-metadata-directive'];\n        delete TargetHeader['x-cos-copy-source-If-Modified-Since'];\n        delete TargetHeader['x-cos-copy-source-If-Unmodified-Since'];\n        delete TargetHeader['x-cos-copy-source-If-Match'];\n        delete TargetHeader['x-cos-copy-source-If-None-Match'];\n        ep.emit('get_chunk_size_finish');\n    });\n\n    // 获取远端复制源文件的大小\n    self.headObject({\n        Bucket: SourceBucket,\n        Region: SourceRegion,\n        Key: SourceKey,\n    },function(err, data) {\n        if (err) {\n            if (err.statusCode && err.statusCode === 404) {\n                callback(util.error(err, {ErrorStatus: SourceKey + ' Not Exist'}));\n            } else {\n                callback(err);\n            }\n            return;\n        }\n\n        FileSize = params.FileSize = data.headers['content-length'];\n        if (FileSize === undefined || !FileSize) {\n            callback(util.error(new Error('get Content-Length error, please add \"Content-Length\" to CORS ExposeHeader setting.（ 获取Content-Length失败，请在CORS ExposeHeader设置中添加Content-Length，请参考文档：https://cloud.tencent.com/document/product/436/13318 ）')));\n            return;\n        }\n\n        onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);\n\n        // 开始上传\n        if (FileSize <= CopySliceSize) {\n            if (!params.Headers['x-cos-metadata-directive']) {\n                params.Headers['x-cos-metadata-directive'] = 'Copy';\n            }\n            self.putObjectCopy(params, function (err, data) {\n                if (err) {\n                    onProgress(null, true);\n                    return callback(err);\n                }\n                onProgress({loaded: FileSize, total: FileSize}, true);\n                callback(err, data);\n            });\n        } else {\n            var resHeaders = data.headers;\n            SourceResHeaders = resHeaders;\n            SourceHeaders = {\n                'Cache-Control': resHeaders['cache-control'],\n                'Content-Disposition': resHeaders['content-disposition'],\n                'Content-Encoding': resHeaders['content-encoding'],\n                'Content-Type': resHeaders['content-type'],\n                'Expires': resHeaders['expires'],\n                'x-cos-storage-class': resHeaders['x-cos-storage-class'],\n            };\n            util.each(resHeaders, function (v, k) {\n                var metaPrefix = 'x-cos-meta-';\n                if (k.indexOf(metaPrefix) === 0 && k.length > metaPrefix.length) {\n                    SourceHeaders[k] = v;\n                }\n            });\n            ep.emit('get_file_size_finish');\n        }\n    });\n}\n\n// 复制指定分片\nfunction copySliceItem(params, callback) {\n    var TaskId = params.TaskId;\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var CopySource = params.CopySource;\n    var UploadId = params.UploadId;\n    var PartNumber = params.PartNumber * 1;\n    var CopySourceRange = params.CopySourceRange;\n\n    var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\n    var self = this;\n\n    Async.retry(ChunkRetryTimes, function (tryCallback) {\n        self.uploadPartCopy({\n            TaskId: TaskId,\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n            CopySource: CopySource,\n            UploadId: UploadId,\n            PartNumber:PartNumber,\n            CopySourceRange:CopySourceRange,\n        },function (err,data) {\n            tryCallback(err || null, data);\n        })\n    }, function (err, data) {\n        return callback(err, data);\n    });\n}\n\n// 分片下载文件\nfunction downloadFile(params, callback) {\n    var self = this;\n    var TaskId = params.TaskId || util.uuid();\n    var Bucket = params.Bucket;\n    var Region = params.Region;\n    var Key = params.Key;\n    var FilePath = params.FilePath;\n    var FileSize;\n    var FinishSize = 0;\n    var onProgress;\n    var ChunkSize = params.ChunkSize || 1024 * 1024;\n    var ParallelLimit = params.ParallelLimit || 5;\n    var RetryTimes = params.RetryTimes || 3;\n    var ep = new EventProxy();\n    var PartList;\n    var aborted = false;\n    var head = {};\n\n    ep.on('error', function (err) {\n        callback(err);\n    });\n\n    ep.on('get_file_info', function () {\n        // 获取远端复制源文件的大小\n        self.headObject({\n            Bucket: Bucket,\n            Region: Region,\n            Key: Key,\n        },function(err, data) {\n            if (err) return ep.emit('error', err);\n\n            // 获取文件大小\n            FileSize = params.FileSize = parseInt(data.headers['content-length']);\n            if (FileSize === undefined || !FileSize) {\n                callback(util.error(new Error('get Content-Length error, please add \"Content-Length\" to CORS ExposeHeader setting.（ 获取Content-Length失败，请在CORS ExposeHeader设置中添加Content-Length，请参考文档：https://cloud.tencent.com/document/product/436/13318 ）')));\n                return;\n            }\n\n            // 归档文件不支持下载\n            const resHeaders = data.headers;\n            const storageClass = resHeaders['x-cos-storage-class'] || '';\n            const restoreStatus = resHeaders['x-cos-restore'] || '';\n            if (\n                ['DEEP_ARCHIVE', 'ARCHIVE'].includes(storageClass) &&\n                (!restoreStatus || restoreStatus === 'ongoing-request=\"true\"')\n            ) {\n                return callback({statusCode, header: resHeaders, code: 'CannotDownload', message: 'Archive object can not download, please restore to Standard storage class.'});\n            }\n\n            // 整理文件信息\n            head = {\n                ETag: data.ETag,\n                size: FileSize,\n                mtime: resHeaders['last-modified'],\n                crc64ecma: resHeaders['x-cos-hash-crc64ecma'],\n            };\n\n            // 处理进度反馈\n            onProgress = util.throttleOnProgress.call(self, FileSize, function (info) {\n                if (aborted) return;\n                params.onProgress(info);\n            });\n\n            if (FileSize <= ChunkSize) {\n                // 小文件直接单请求下载\n                self.getObject({\n                    TaskId: TaskId,\n                    Bucket: Bucket,\n                    Region: Region,\n                    Key: Key,\n                    onProgress: onProgress,\n                    Output: fs.createWriteStream(FilePath),\n                }, function (err, data) {\n                    if (err) {\n                        onProgress(null, true);\n                        return callback(err);\n                    }\n                    onProgress({loaded: FileSize, total: FileSize}, true);\n                    callback(err, data);\n                });\n            } else {\n                // 大文件分片下载\n                ep.emit('calc_suitable_chunk_size');\n            }\n        });\n    });\n\n    // 计算合适的分片大小\n    ep.on('calc_suitable_chunk_size', function (SourceHeaders) {\n\n        // 控制分片大小\n        var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];\n        var AutoChunkSize = 1024 * 1024;\n        for (var i = 0; i < SIZE.length; i++) {\n            AutoChunkSize = SIZE[i] * 1024 * 1024;\n            if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;\n        }\n        params.ChunkSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);\n\n        var ChunkCount = Math.ceil(FileSize / ChunkSize);\n\n        var list = [];\n        for (var partNumber = 1; partNumber <= ChunkCount; partNumber++) {\n            var start = (partNumber - 1) * ChunkSize;\n            var end = partNumber * ChunkSize < FileSize ? (partNumber * ChunkSize - 1) : FileSize - 1;\n            var item = {\n                PartNumber: partNumber,\n                start: start,\n                end: end,\n            };\n            list.push(item);\n        }\n        PartList = list;\n\n        ep.emit('prepare_file');\n    });\n\n    // 准备要下载的空文件\n    ep.on('prepare_file', function (SourceHeaders) {\n        fs.writeFile(FilePath, '', err => {\n            if (err) {\n                ep.emit('error', err.code === 'EISDIR' ? { code: 'exist_same_dir', message: FilePath } : err);\n            } else {\n                ep.emit('start_download_chunks');\n            }\n        });\n    });\n\n    // 计算合适的分片大小\n    var result;\n    ep.on('start_download_chunks', function (SourceHeaders) {\n        onProgress({loaded: 0, total: FileSize}, true);\n        var maxPartNumber = PartList.length;\n        Async.eachLimit(PartList, ParallelLimit, function (part, nextChunk) {\n            if (aborted) return;\n            Async.retry(RetryTimes, function (tryCallback) {\n                if (aborted) return;\n                // FinishSize\n                var Headers = util.clone(params.Headers);\n                Headers.Range = \"bytes=\" + part.start + \"-\" + part.end;\n                const writeStream = fs.createWriteStream(FilePath, {\n                    start: part.start,\n                    flags: 'r+'\n                });\n                var preAddSize = 0;\n                var chunkReadSize = part.end - part.start;\n                self.getObject({\n                    TaskId: TaskId,\n                    Bucket: params.Bucket,\n                    Region: params.Region,\n                    Key: params.Key,\n                    Query: params.Query,\n                    Headers: Headers,\n                    onProgress: function (data) {\n                        if (aborted) return;\n                        FinishSize += data.loaded - preAddSize;\n                        preAddSize = data.loaded;\n                        onProgress({loaded: FinishSize, total: FileSize});\n                    },\n                    Output: writeStream,\n                }, function (err, data) {\n                    if (aborted) return;\n\n                    // 处理错误和进度\n                    if (err) {\n                        FinishSize -= preAddSize;\n                        return tryCallback(err);\n                    }\n\n                    // 处理返回值\n                    if (part.PartNumber === maxPartNumber) result = data;\n                    var chunkHeaders = data.headers || {};\n\n\n                    var contentRanges = chunkHeaders['content-range'] || ''; // content-range 格式：\"bytes 3145728-4194303/68577051\"\n                    var totalSize = parseInt(contentRanges.split('/')[1] || 0);\n\n                    // 只校验文件大小和 crc64 是否有变更\n                    var changed;\n                    if (chunkHeaders['x-cos-hash-crc64ecma'] !== head.crc64ecma) changed = 'download error, x-cos-hash-crc64ecma has changed.';\n                    else if (totalSize !== head.size) changed = 'download error, Last-Modified has changed.';\n                    // else if (data.ETag !== head.ETag) error = 'download error, ETag has changed.';\n                    // else if (chunkHeaders['last-modified'] !== head.mtime) error = 'download error, Last-Modified has changed.';\n\n                    // 如果\n                    if (changed) {\n                        FinishSize -= preAddSize;\n                        onProgress({loaded: FinishSize, total: FileSize});\n                        ep.emit('error', {\n                            code: 'ObjectHasChanged',\n                            message: changed,\n                            statusCode: data.statusCode,\n                            header: chunkHeaders,\n                        });\n                        self.emit('inner-kill-task', {TaskId: TaskId});\n                    } else {\n                        FinishSize += chunkReadSize - preAddSize;\n                        part.loaded = true;\n                        onProgress({loaded: FinishSize, total: FileSize});\n                        tryCallback(err, data);\n                    }\n                });\n            }, function (err, data) {\n                if (aborted) return;\n                nextChunk(err, data);\n            });\n        }, function (err, data) {\n            if (aborted) return;\n            onProgress({loaded: FileSize, total: FileSize}, true);\n            if (err) return ep.emit('error', err);\n            ep.emit('download_chunks_complete');\n        });\n    });\n\n    // 下载已完成\n    ep.on('download_chunks_complete', function () {\n        callback(null, result);\n    });\n\n    // 监听 取消任务\n    var killTask = function () {\n        aborted = true;\n    };\n    TaskId && self.on('inner-kill-task', killTask);\n\n    ep.emit('get_file_info');\n}\n\n\nvar API_MAP = {\n    sliceUploadFile: sliceUploadFile,\n    abortUploadTask: abortUploadTask,\n    uploadFile:  uploadFile,\n    uploadFiles: uploadFiles,\n    sliceCopyFile: sliceCopyFile,\n    downloadFile: downloadFile,\n};\n\nmodule.exports.init = function (COS, task) {\n    task.transferToTaskMethod(API_MAP, 'sliceUploadFile');\n    util.each(API_MAP, function (fn, apiName) {\n        COS.prototype[apiName] = util.apiWrapper(apiName, fn);\n    });\n};\n","var eachLimit = function (arr, limit, iterator, callback) {\n    callback = callback || function () {};\n    if (!arr.length || limit <= 0) {\n        return callback();\n    }\n\n    var completed = 0;\n    var started = 0;\n    var running = 0;\n\n    (function replenish () {\n        if (completed >= arr.length) {\n            return callback();\n        }\n\n        while (running < limit && started < arr.length) {\n            started += 1;\n            running += 1;\n            iterator(arr[started - 1], function (err) {\n\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                } else {\n                    completed += 1;\n                    running -= 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    } else {\n                        replenish();\n                    }\n                }\n            });\n        }\n    })();\n};\n\nvar retry = function (times, iterator, callback) {\n    var next = function (index) {\n        iterator(function (err, data) {\n            if (err && index < times) {\n                next(index + 1);\n            } else {\n                callback(err, data);\n            }\n        });\n    };\n    if (times < 1) {\n        callback();\n    } else {\n        next(1);\n    }\n};\n\nvar async = {\n    eachLimit: eachLimit,\n    retry: retry\n};\n\nmodule.exports = async;"]}