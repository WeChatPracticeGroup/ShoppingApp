{"version":3,"sources":["index.js","lib/canUnquote.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst parser = require('postcss-selector-parser');\nconst canUnquote = require('./lib/canUnquote.js');\n\nconst pseudoElements = new Set([\n  '::before',\n  '::after',\n  '::first-letter',\n  '::first-line',\n]);\n\n/**\n * @param {parser.Attribute} selector\n * @return {void}\n */\nfunction attribute(selector) {\n  if (selector.value) {\n    if (selector.raws.value) {\n      // Join selectors that are split over new lines\n      selector.raws.value = selector.raws.value.replace(/\\\\\\n/g, '').trim();\n    }\n    if (canUnquote(selector.value)) {\n      selector.quoteMark = null;\n    }\n\n    if (selector.operator) {\n      selector.operator = /** @type {parser.AttributeOperator} */ (\n        selector.operator.trim()\n      );\n    }\n  }\n\n  selector.rawSpaceBefore = '';\n  selector.rawSpaceAfter = '';\n  selector.spaces.attribute = { before: '', after: '' };\n  selector.spaces.operator = { before: '', after: '' };\n  selector.spaces.value = {\n    before: '',\n    after: selector.insensitive ? ' ' : '',\n  };\n\n  if (selector.raws.spaces) {\n    selector.raws.spaces.attribute = {\n      before: '',\n      after: '',\n    };\n\n    selector.raws.spaces.operator = {\n      before: '',\n      after: '',\n    };\n\n    selector.raws.spaces.value = {\n      before: '',\n      after: selector.insensitive ? ' ' : '',\n    };\n\n    if (selector.insensitive) {\n      selector.raws.spaces.insensitive = {\n        before: '',\n        after: '',\n      };\n    }\n  }\n\n  selector.attribute = selector.attribute.trim();\n}\n\n/**\n * @param {parser.Combinator} selector\n * @return {void}\n */\nfunction combinator(selector) {\n  const value = selector.value.trim();\n  selector.spaces.before = '';\n  selector.spaces.after = '';\n  selector.rawSpaceBefore = '';\n  selector.rawSpaceAfter = '';\n  selector.value = value.length ? value : ' ';\n}\n\nconst pseudoReplacements = new Map([\n  [':nth-child', ':first-child'],\n  [':nth-of-type', ':first-of-type'],\n  [':nth-last-child', ':last-child'],\n  [':nth-last-of-type', ':last-of-type'],\n]);\n\n/**\n * @param {parser.Pseudo} selector\n * @return {void}\n */\nfunction pseudo(selector) {\n  const value = selector.value.toLowerCase();\n\n  if (selector.nodes.length === 1 && pseudoReplacements.has(value)) {\n    const first = selector.at(0);\n    const one = first.at(0);\n\n    if (first.length === 1) {\n      if (one.value === '1') {\n        selector.replaceWith(\n          parser.pseudo({\n            value: /** @type {string} */ (pseudoReplacements.get(value)),\n          })\n        );\n      }\n\n      if (one.value && one.value.toLowerCase() === 'even') {\n        one.value = '2n';\n      }\n    }\n\n    if (first.length === 3) {\n      const two = first.at(1);\n      const three = first.at(2);\n\n      if (\n        one.value &&\n        one.value.toLowerCase() === '2n' &&\n        two.value === '+' &&\n        three.value === '1'\n      ) {\n        one.value = 'odd';\n\n        two.remove();\n        three.remove();\n      }\n    }\n\n    return;\n  }\n\n  selector.walk((child) => {\n    if (child.type === 'selector' && child.parent) {\n      const uniques = new Set();\n      child.parent.each((sibling) => {\n        const siblingStr = String(sibling);\n\n        if (!uniques.has(siblingStr)) {\n          uniques.add(siblingStr);\n        } else {\n          sibling.remove();\n        }\n      });\n    }\n  });\n\n  if (pseudoElements.has(value)) {\n    selector.value = selector.value.slice(1);\n  }\n}\n\nconst tagReplacements = new Map([\n  ['from', '0%'],\n  ['100%', 'to'],\n]);\n\n/**\n * @param {parser.Tag} selector\n * @return {void}\n */\nfunction tag(selector) {\n  const value = selector.value.toLowerCase();\n\n  if (tagReplacements.has(value)) {\n    selector.value = /** @type {string} */ (tagReplacements.get(value));\n  }\n}\n\n/**\n * @param {parser.Universal} selector\n * @return {void}\n */\nfunction universal(selector) {\n  const next = selector.next();\n\n  if (next && next.type !== 'combinator') {\n    selector.remove();\n  }\n}\n\nconst reducers = new Map(\n  /** @type {[string, ((selector: parser.Node) => void)][]}*/ ([\n    ['attribute', attribute],\n    ['combinator', combinator],\n    ['pseudo', pseudo],\n    ['tag', tag],\n    ['universal', universal],\n  ])\n);\n\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-minify-selectors',\n\n    OnceExit(css) {\n      const cache = new Map();\n      const processor = parser((selectors) => {\n        const uniqueSelectors = new Set();\n\n        selectors.walk((sel) => {\n          // Trim whitespace around the value\n          sel.spaces.before = sel.spaces.after = '';\n          const reducer = reducers.get(sel.type);\n          if (reducer !== undefined) {\n            reducer(sel);\n            return;\n          }\n\n          const toString = String(sel);\n\n          if (\n            sel.type === 'selector' &&\n            sel.parent &&\n            sel.parent.type !== 'pseudo'\n          ) {\n            if (!uniqueSelectors.has(toString)) {\n              uniqueSelectors.add(toString);\n            } else {\n              sel.remove();\n            }\n          }\n        });\n        selectors.nodes.sort();\n      });\n\n      css.walkRules((rule) => {\n        const selector =\n          rule.raws.selector && rule.raws.selector.value === rule.selector\n            ? rule.raws.selector.raw\n            : rule.selector;\n\n        // If the selector ends with a ':' it is likely a part of a custom mixin,\n        // so just pass through.\n        if (selector[selector.length - 1] === ':') {\n          return;\n        }\n\n        if (cache.has(selector)) {\n          rule.selector = cache.get(selector);\n\n          return;\n        }\n\n        const optimizedSelector = processor.processSync(selector);\n\n        rule.selector = optimizedSelector;\n        cache.set(selector, optimizedSelector);\n      });\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n","\n/**\n * Can unquote attribute detection from mothereff.in\n * Copyright Mathias Bynens <https://mathiasbynens.be/>\n * https://github.com/mathiasbynens/mothereff.in\n */\nconst escapes = /\\\\([0-9A-Fa-f]{1,6})[ \\t\\n\\f\\r]?/g;\nconst range =\n  // eslint-disable-next-line no-control-regex\n  /[\\u0000-\\u002c\\u002e\\u002f\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u009f]/;\n\n/**\n * @param {string} value\n * @return {boolean}\n */\nmodule.exports = function canUnquote(value) {\n  if (value === '-' || value === '') {\n    return false;\n  }\n\n  value = value.replace(escapes, 'a').replace(/\\\\./g, 'a');\n\n  return !(range.test(value) || /^(?:-?\\d|--)/.test(value));\n};\n"]}