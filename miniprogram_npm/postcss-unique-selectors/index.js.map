{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst selectorParser = require('postcss-selector-parser');\n\n/**\n * @param {string} selectors\n * @param {selectorParser.SyncProcessor<void>} callback\n * @return {string}\n */\nfunction parseSelectors(selectors, callback) {\n  return selectorParser(callback).processSync(selectors);\n}\n\n/**\n * @param {import('postcss').Rule} rule\n * @return {string}\n */\nfunction unique(rule) {\n  const selector = [...new Set(rule.selectors)];\n  selector.sort();\n  return selector.join();\n}\n\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-unique-selectors',\n    OnceExit(css) {\n      css.walkRules((nodes) => {\n        /** @type {string[]} */\n        let comments = [];\n        /** @type {selectorParser.SyncProcessor<void>} */\n        const removeAndSaveComments = (selNode) => {\n          selNode.walk((sel) => {\n            if (sel.type === 'comment') {\n              comments.push(sel.value);\n              sel.remove();\n              return;\n            } else {\n              return;\n            }\n          });\n        };\n        if (nodes.raws.selector && nodes.raws.selector.raw) {\n          parseSelectors(nodes.raws.selector.raw, removeAndSaveComments);\n          nodes.raws.selector.raw = unique(nodes);\n        }\n        nodes.selector = parseSelectors(nodes.selector, removeAndSaveComments);\n        nodes.selector = unique(nodes);\n        nodes.selectors = nodes.selectors.concat(comments);\n      });\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]}