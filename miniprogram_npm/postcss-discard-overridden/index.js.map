{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst OVERRIDABLE_RULES = new Set(['keyframes', 'counter-style']);\nconst SCOPE_RULES = new Set(['media', 'supports']);\n\n/**\n * @param {string} prop\n * @return {string}\n */\nfunction vendorUnprefixed(prop) {\n  return prop.replace(/^-\\w+-/, '');\n}\n\n/**\n * @param {string} name\n * @return {boolean}\n */\nfunction isOverridable(name) {\n  return OVERRIDABLE_RULES.has(vendorUnprefixed(name.toLowerCase()));\n}\n\n/**\n * @param {string} name\n * @return {boolean}\n */\nfunction isScope(name) {\n  return SCOPE_RULES.has(vendorUnprefixed(name.toLowerCase()));\n}\n\n/**\n * @param {import('postcss').AtRule} node\n * @return {string}\n */\nfunction getScope(node) {\n  /** @type {import('postcss').Container<import('postcss').ChildNode> | import('postcss').Document | undefined} */\n  let current = node.parent;\n\n  const chain = [node.name.toLowerCase(), node.params];\n\n  while (current) {\n    if (\n      current.type === 'atrule' &&\n      isScope(/** @type import('postcss').AtRule */ (current).name)\n    ) {\n      chain.unshift(\n        /** @type import('postcss').AtRule */ (current).name +\n          ' ' +\n          /** @type import('postcss').AtRule */ (current).params\n      );\n    }\n    current = current.parent;\n  }\n\n  return chain.join('|');\n}\n\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-discard-overridden',\n    prepare() {\n      const cache = new Map();\n      /** @type {{node: import('postcss').AtRule, scope: string}[]} */\n      const rules = [];\n\n      return {\n        OnceExit(css) {\n          css.walkAtRules((node) => {\n            if (isOverridable(node.name)) {\n              const scope = getScope(node);\n\n              cache.set(scope, node);\n              rules.push({\n                node,\n                scope,\n              });\n            }\n          });\n\n          rules.forEach((rule) => {\n            if (cache.get(rule.scope) !== rule.node) {\n              rule.node.remove();\n            }\n          });\n        },\n      };\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]}