{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\nconst browserslist = require('browserslist');\nconst valueParser = require('postcss-value-parser');\nconst { getArguments } = require('cssnano-utils');\n\n/**\n * Return the greatest common divisor\n * of two numbers.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nfunction gcd(a, b) {\n  return b ? gcd(b, a % b) : a;\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @return {[number, number]}\n */\nfunction aspectRatio(a, b) {\n  const divisor = gcd(a, b);\n\n  return [a / divisor, b / divisor];\n}\n\n/**\n * @param {valueParser.Node[]} args\n * @return {string}\n */\nfunction split(args) {\n  return args.map((arg) => valueParser.stringify(arg)).join('');\n}\n\n/**\n * @param {valueParser.Node} node\n * @return {void}\n */\nfunction removeNode(node) {\n  node.value = '';\n  node.type = 'word';\n}\n\n/**\n * @param {unknown[]} items\n * @return {string}\n */\nfunction sortAndDedupe(items) {\n  const a = [...new Set(items)];\n  a.sort();\n  return a.join();\n}\n\n/**\n * @param {boolean} legacy\n * @param {import('postcss').AtRule} rule\n * @return {void}\n */\nfunction transform(legacy, rule) {\n  const ruleName = rule.name.toLowerCase();\n\n  // We should re-arrange parameters only for `@media` and `@supports` at-rules\n  if (!rule.params || !['media', 'supports'].includes(ruleName)) {\n    return;\n  }\n\n  const params = valueParser(rule.params);\n\n  params.walk((node, index) => {\n    if (node.type === 'div') {\n      node.before = node.after = '';\n    } else if (node.type === 'function') {\n      node.before = '';\n      if (\n        node.nodes[0] &&\n        node.nodes[0].type === 'word' &&\n        node.nodes[0].value.startsWith('--') &&\n        node.nodes[2] === undefined\n      ) {\n        node.after = ' ';\n      } else {\n        node.after = '';\n      }\n      if (\n        node.nodes[4] &&\n        node.nodes[0].value.toLowerCase().indexOf('-aspect-ratio') === 3\n      ) {\n        const [a, b] = aspectRatio(\n          Number(node.nodes[2].value),\n          Number(node.nodes[4].value)\n        );\n\n        node.nodes[2].value = a.toString();\n        node.nodes[4].value = b.toString();\n      }\n    } else if (node.type === 'space') {\n      node.value = ' ';\n    } else {\n      const prevWord = params.nodes[index - 2];\n\n      if (\n        node.value.toLowerCase() === 'all' &&\n        rule.name.toLowerCase() === 'media' &&\n        !prevWord\n      ) {\n        const nextWord = params.nodes[index + 2];\n\n        if (!legacy || nextWord) {\n          removeNode(node);\n        }\n\n        if (nextWord && nextWord.value.toLowerCase() === 'and') {\n          const nextSpace = params.nodes[index + 1];\n          const secondSpace = params.nodes[index + 3];\n\n          removeNode(nextWord);\n          removeNode(nextSpace);\n          removeNode(secondSpace);\n        }\n      }\n    }\n  }, true);\n\n  rule.params = sortAndDedupe(getArguments(params).map(split));\n\n  if (!rule.params.length) {\n    rule.raws.afterName = '';\n  }\n}\n\nconst allBugBrowers = new Set(['ie 10', 'ie 11']);\n\n/**\n * @type {import('postcss').PluginCreator<browserslist.Options>}\n * @param {browserslist.Options} options\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator(options = {}) {\n  const browsers = browserslist(null, {\n    stats: options.stats,\n    path: __dirname,\n    env: options.env,\n  });\n\n  const hasAllBug = browsers.some((browser) => allBugBrowers.has(browser));\n  return {\n    postcssPlugin: 'postcss-minify-params',\n\n    OnceExit(css) {\n      css.walkAtRules((rule) => transform(hasAllBug, rule));\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]}