{"version":3,"sources":["index.js","lib/map.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst valueParser = require('postcss-value-parser');\nconst mappings = require('./lib/map.js');\n\n/**\n * @param {string} value\n * @return {string}\n */\nfunction transform(value) {\n  const { nodes } = valueParser(value);\n\n  if (nodes.length === 1) {\n    return value;\n  }\n\n  const values = nodes\n    .filter((list, index) => index % 2 === 0)\n    .filter((node) => node.type === 'word')\n    .map((n) => n.value.toLowerCase());\n\n  if (values.length === 0) {\n    return value;\n  }\n\n  const match = mappings.get(values.toString());\n\n  if (!match) {\n    return value;\n  }\n\n  return match;\n}\n\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-display-values',\n\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(/^display$/i, (decl) => {\n            const value = decl.value;\n\n            if (!value) {\n              return;\n            }\n\n            if (cache.has(value)) {\n              decl.value = cache.get(value);\n\n              return;\n            }\n\n            const result = transform(value);\n\n            decl.value = result;\n            cache.set(value, result);\n          });\n        },\n      };\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n","\nconst block = 'block';\nconst flex = 'flex';\nconst flow = 'flow';\nconst flowRoot = 'flow-root';\nconst grid = 'grid';\nconst inline = 'inline';\nconst inlineBlock = 'inline-block';\nconst inlineFlex = 'inline-flex';\nconst inlineGrid = 'inline-grid';\nconst inlineTable = 'inline-table';\nconst listItem = 'list-item';\nconst ruby = 'ruby';\nconst rubyBase = 'ruby-base';\nconst rubyText = 'ruby-text';\nconst runIn = 'run-in';\nconst table = 'table';\nconst tableCell = 'table-cell';\nconst tableCaption = 'table-caption';\n\n/**\n * Specification: https://drafts.csswg.org/css-display/#the-display-properties\n */\n\nmodule.exports = new Map([\n  [[block, flow].toString(), block],\n  [[block, flowRoot].toString(), flowRoot],\n  [[inline, flow].toString(), inline],\n  [[inline, flowRoot].toString(), inlineBlock],\n  [[runIn, flow].toString(), runIn],\n  [[listItem, block, flow].toString(), listItem],\n  [[inline, flow, listItem].toString(), inline + ' ' + listItem],\n  [[block, flex].toString(), flex],\n  [[inline, flex].toString(), inlineFlex],\n  [[block, grid].toString(), grid],\n  [[inline, grid].toString(), inlineGrid],\n  [[inline, ruby].toString(), ruby],\n  // `block ruby` is same\n  [[block, table].toString(), table],\n  [[inline, table].toString(), inlineTable],\n  [[tableCell, flow].toString(), tableCell],\n  [[tableCaption, flow].toString(), tableCaption],\n  [[rubyBase, flow].toString(), rubyBase],\n  [[rubyText, flow].toString(), rubyText],\n]);\n"]}