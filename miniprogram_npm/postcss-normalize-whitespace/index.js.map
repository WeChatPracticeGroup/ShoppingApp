{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst valueParser = require('postcss-value-parser');\n\nconst atrule = 'atrule';\nconst decl = 'decl';\nconst rule = 'rule';\nconst variableFunctions = new Set(['var', 'env', 'constant']);\n\n/**\n * @param {valueParser.Node} node\n * @return {void}\n */\nfunction reduceCalcWhitespaces(node) {\n  if (node.type === 'space') {\n    node.value = ' ';\n  } else if (node.type === 'function') {\n    if (!variableFunctions.has(node.value.toLowerCase())) {\n      node.before = node.after = '';\n    }\n  }\n}\n/**\n * @param {valueParser.Node} node\n * @return {void | false}\n */\nfunction reduceWhitespaces(node) {\n  if (node.type === 'space') {\n    node.value = ' ';\n  } else if (node.type === 'div') {\n    node.before = node.after = '';\n  } else if (node.type === 'function') {\n    if (!variableFunctions.has(node.value.toLowerCase())) {\n      node.before = node.after = '';\n    }\n    if (node.value.toLowerCase() === 'calc') {\n      valueParser.walk(node.nodes, reduceCalcWhitespaces);\n      return false;\n    }\n  }\n}\n\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-whitespace',\n\n    OnceExit(css) {\n      const cache = new Map();\n\n      css.walk((node) => {\n        const { type } = node;\n\n        if ([decl, rule, atrule].includes(type) && node.raws.before) {\n          node.raws.before = node.raws.before.replace(/\\s/g, '');\n        }\n\n        if (type === decl) {\n          // Ensure that !important values do not have any excess whitespace\n          if (node.important) {\n            node.raws.important = '!important';\n          }\n\n          // Remove whitespaces around ie 9 hack\n          node.value = node.value.replace(/\\s*(\\\\9)\\s*/, '$1');\n          const value = node.value;\n\n          if (cache.has(value)) {\n            node.value = cache.get(value);\n          } else {\n            const parsed = valueParser(node.value);\n            const result = parsed.walk(reduceWhitespaces).toString();\n\n            // Trim whitespace inside functions & dividers\n            node.value = result;\n            cache.set(value, result);\n          }\n\n          if (node.prop.startsWith('--') && node.value === '') {\n            node.value = ' ';\n          }\n          // Remove extra semicolons and whitespace before the declaration\n          if (node.raws.before) {\n            const prev = node.prev();\n\n            if (prev && prev.type !== rule) {\n              node.raws.before = node.raws.before.replace(/;/g, '');\n            }\n          }\n\n          node.raws.between = ':';\n          node.raws.semicolon = false;\n        } else if (type === rule || type === atrule) {\n          node.raws.between = node.raws.after = '';\n          node.raws.semicolon = false;\n        }\n      });\n\n      // Remove final newline\n      css.raws.after = '';\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]}