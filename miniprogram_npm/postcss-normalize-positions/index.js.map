{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst valueParser = require('postcss-value-parser');\n\nconst directionKeywords = new Set(['top', 'right', 'bottom', 'left', 'center']);\n\nconst center = '50%';\nconst horizontal = new Map([\n  ['right', '100%'],\n  ['left', '0'],\n]);\nconst verticalValue = new Map([\n  ['bottom', '100%'],\n  ['top', '0'],\n]);\nconst mathFunctions = new Set(['calc', 'min', 'max', 'clamp']);\nconst variableFunctions = new Set(['var', 'env', 'constant']);\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isCommaNode(node) {\n  return node.type === 'div' && node.value === ',';\n}\n\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isVariableFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return variableFunctions.has(node.value.toLowerCase());\n}\n\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isMathFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n  return mathFunctions.has(node.value.toLowerCase());\n}\n\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isNumberNode(node) {\n  if (node.type !== 'word') {\n    return false;\n  }\n\n  const value = parseFloat(node.value);\n\n  return !isNaN(value);\n}\n\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isDimensionNode(node) {\n  if (node.type !== 'word') {\n    return false;\n  }\n\n  const parsed = valueParser.unit(node.value);\n\n  if (!parsed) {\n    return false;\n  }\n\n  return parsed.unit !== '';\n}\n\n/**\n * @param {string} value\n * @return {string}\n */\nfunction transform(value) {\n  const parsed = valueParser(value);\n  /** @type {({start: number, end: number} | {start: null, end: null})[]} */\n  const ranges = [];\n  let rangeIndex = 0;\n  let shouldContinue = true;\n\n  parsed.nodes.forEach((node, index) => {\n    // After comma (`,`) follows next background\n    if (isCommaNode(node)) {\n      rangeIndex += 1;\n      shouldContinue = true;\n\n      return;\n    }\n\n    if (!shouldContinue) {\n      return;\n    }\n\n    // After separator (`/`) follows `background-size` values\n    // Avoid them\n    if (node.type === 'div' && node.value === '/') {\n      shouldContinue = false;\n\n      return;\n    }\n\n    if (!ranges[rangeIndex]) {\n      ranges[rangeIndex] = {\n        start: null,\n        end: null,\n      };\n    }\n\n    // Do not try to be processed `var and `env` function inside background\n    if (isVariableFunctionNode(node)) {\n      shouldContinue = false;\n      ranges[rangeIndex].start = null;\n      ranges[rangeIndex].end = null;\n\n      return;\n    }\n\n    const isPositionKeyword =\n      (node.type === 'word' &&\n        directionKeywords.has(node.value.toLowerCase())) ||\n      isDimensionNode(node) ||\n      isNumberNode(node) ||\n      isMathFunctionNode(node);\n\n    if (ranges[rangeIndex].start === null && isPositionKeyword) {\n      ranges[rangeIndex].start = index;\n      ranges[rangeIndex].end = index;\n\n      return;\n    }\n\n    if (ranges[rangeIndex].start !== null) {\n      if (node.type === 'space') {\n        return;\n      } else if (isPositionKeyword) {\n        ranges[rangeIndex].end = index;\n\n        return;\n      }\n\n      return;\n    }\n  });\n\n  ranges.forEach((range) => {\n    if (range.start === null) {\n      return;\n    }\n\n    const nodes = parsed.nodes.slice(range.start, range.end + 1);\n\n    if (nodes.length > 3) {\n      return;\n    }\n\n    const firstNode = nodes[0].value.toLowerCase();\n    const secondNode =\n      nodes[2] && nodes[2].value ? nodes[2].value.toLowerCase() : null;\n\n    if (nodes.length === 1 || secondNode === 'center') {\n      if (secondNode) {\n        nodes[2].value = nodes[1].value = '';\n      }\n\n      const map = new Map([...horizontal, ['center', center]]);\n\n      if (map.has(firstNode)) {\n        nodes[0].value = /** @type {string}*/ (map.get(firstNode));\n      }\n\n      return;\n    }\n\n    if (secondNode !== null) {\n      if (firstNode === 'center' && directionKeywords.has(secondNode)) {\n        nodes[0].value = nodes[1].value = '';\n\n        if (horizontal.has(secondNode)) {\n          nodes[2].value = /** @type {string} */ (horizontal.get(secondNode));\n        }\n        return;\n      }\n\n      if (horizontal.has(firstNode) && verticalValue.has(secondNode)) {\n        nodes[0].value = /** @type {string} */ (horizontal.get(firstNode));\n        nodes[2].value = /** @type {string} */ (verticalValue.get(secondNode));\n\n        return;\n      } else if (verticalValue.has(firstNode) && horizontal.has(secondNode)) {\n        nodes[0].value = /** @type {string} */ (horizontal.get(secondNode));\n        nodes[2].value = /** @type {string} */ (verticalValue.get(firstNode));\n\n        return;\n      }\n    }\n  });\n\n  return parsed.toString();\n}\n\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-positions',\n\n    OnceExit(css) {\n      const cache = new Map();\n\n      css.walkDecls(\n        /^(background(-position)?|(-\\w+-)?perspective-origin)$/i,\n        (decl) => {\n          const value = decl.value;\n\n          if (!value) {\n            return;\n          }\n\n          if (cache.has(value)) {\n            decl.value = cache.get(value);\n\n            return;\n          }\n\n          const result = transform(value);\n\n          decl.value = result;\n          cache.set(value, result);\n        }\n      );\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]}