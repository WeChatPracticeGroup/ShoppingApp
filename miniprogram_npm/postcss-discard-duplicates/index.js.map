{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n/**\n * @param {string | undefined} value\n * @return {string | undefined}\n */\nfunction trimValue(value) {\n  return value ? value.trim() : value;\n}\n\n/**\n * @param {{nodes: import('postcss').Node[]}} node\n * @return {boolean}\n */\nfunction empty(node) {\n  return !node.nodes.filter((child) => child.type !== 'comment').length;\n}\n\n/**\n * @param {import('postcss').AnyNode} nodeA\n * @param {import('postcss').AnyNode} nodeB\n * @return {boolean}\n */\nfunction equals(nodeA, nodeB) {\n  const a = /** @type {any} */ (nodeA);\n  const b = /** @type {any} */ (nodeB);\n  if (a.type !== b.type) {\n    return false;\n  }\n\n  if (a.important !== b.important) {\n    return false;\n  }\n\n  if ((a.raws && !b.raws) || (!a.raws && b.raws)) {\n    return false;\n  }\n\n  switch (a.type) {\n    case 'rule':\n      if (a.selector !== b.selector) {\n        return false;\n      }\n      break;\n    case 'atrule':\n      if (a.name !== b.name || a.params !== b.params) {\n        return false;\n      }\n\n      if (a.raws && trimValue(a.raws.before) !== trimValue(b.raws.before)) {\n        return false;\n      }\n\n      if (\n        a.raws &&\n        trimValue(a.raws.afterName) !== trimValue(b.raws.afterName)\n      ) {\n        return false;\n      }\n      break;\n    case 'decl':\n      if (a.prop !== b.prop || a.value !== b.value) {\n        return false;\n      }\n\n      if (a.raws && trimValue(a.raws.before) !== trimValue(b.raws.before)) {\n        return false;\n      }\n      break;\n  }\n\n  if (a.nodes) {\n    if (a.nodes.length !== b.nodes.length) {\n      return false;\n    }\n\n    for (let i = 0; i < a.nodes.length; i++) {\n      if (!equals(a.nodes[i], b.nodes[i])) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @param {import('postcss').Rule} last\n * @param {import('postcss').AnyNode[]} nodes\n * @return {void}\n */\nfunction dedupeRule(last, nodes) {\n  let index = nodes.indexOf(last) - 1;\n  while (index >= 0) {\n    const node = nodes[index--];\n    if (node && node.type === 'rule' && node.selector === last.selector) {\n      last.each((child) => {\n        if (child.type === 'decl') {\n          dedupeNode(child, node.nodes);\n        }\n      });\n\n      if (empty(node)) {\n        node.remove();\n      }\n    }\n  }\n}\n\n/**\n * @param {import('postcss').AtRule | import('postcss').Declaration} last\n * @param {import('postcss').AnyNode[]} nodes\n * @return {void}\n */\nfunction dedupeNode(last, nodes) {\n  let index = nodes.includes(last) ? nodes.indexOf(last) - 1 : nodes.length - 1;\n\n  while (index >= 0) {\n    const node = nodes[index--];\n    if (node && equals(node, last)) {\n      node.remove();\n    }\n  }\n}\n\n/**\n * @param {import('postcss').AnyNode} root\n * @return {void}\n */\nfunction dedupe(root) {\n  const { nodes } =\n    /** @type {import('postcss').Container<import('postcss').ChildNode>} */ (\n      root\n    );\n\n  if (!nodes) {\n    return;\n  }\n\n  let index = nodes.length - 1;\n  while (index >= 0) {\n    let last = nodes[index--];\n    if (!last || !last.parent) {\n      continue;\n    }\n    dedupe(last);\n    if (last.type === 'rule') {\n      dedupeRule(last, nodes);\n    } else if (last.type === 'atrule' || last.type === 'decl') {\n      dedupeNode(last, nodes);\n    }\n  }\n}\n\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-discard-duplicates',\n    OnceExit(css) {\n      dedupe(css);\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]}