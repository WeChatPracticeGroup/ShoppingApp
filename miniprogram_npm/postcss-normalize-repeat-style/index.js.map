{"version":3,"sources":["index.js","lib/map.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst valueParser = require('postcss-value-parser');\nconst mappings = require('./lib/map');\n\n/**\n * @param {unknown} item\n * @param {number} index\n * @return {boolean}\n */\nfunction evenValues(item, index) {\n  return index % 2 === 0;\n}\n\nconst repeatKeywords = new Set(mappings.values());\n\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isCommaNode(node) {\n  return node.type === 'div' && node.value === ',';\n}\n\nconst variableFunctions = new Set(['var', 'env', 'constant']);\n/**\n * @param {valueParser.Node} node\n * @return {boolean}\n */\nfunction isVariableFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return variableFunctions.has(node.value.toLowerCase());\n}\n\n/**\n * @param {string} value\n * @return {string}\n */\nfunction transform(value) {\n  const parsed = valueParser(value);\n\n  if (parsed.nodes.length === 1) {\n    return value;\n  }\n  /** @type {{start: number?, end: number?}[]} */\n  const ranges = [];\n  let rangeIndex = 0;\n  let shouldContinue = true;\n\n  parsed.nodes.forEach((node, index) => {\n    // After comma (`,`) follows next background\n    if (isCommaNode(node)) {\n      rangeIndex += 1;\n      shouldContinue = true;\n\n      return;\n    }\n\n    if (!shouldContinue) {\n      return;\n    }\n\n    // After separator (`/`) follows `background-size` values\n    // Avoid them\n    if (node.type === 'div' && node.value === '/') {\n      shouldContinue = false;\n\n      return;\n    }\n\n    if (!ranges[rangeIndex]) {\n      ranges[rangeIndex] = {\n        start: null,\n        end: null,\n      };\n    }\n\n    // Do not try to be processed `var and `env` function inside background\n    if (isVariableFunctionNode(node)) {\n      shouldContinue = false;\n      ranges[rangeIndex].start = null;\n      ranges[rangeIndex].end = null;\n\n      return;\n    }\n\n    const isRepeatKeyword =\n      node.type === 'word' && repeatKeywords.has(node.value.toLowerCase());\n\n    if (ranges[rangeIndex].start === null && isRepeatKeyword) {\n      ranges[rangeIndex].start = index;\n      ranges[rangeIndex].end = index;\n\n      return;\n    }\n\n    if (ranges[rangeIndex].start !== null) {\n      if (node.type === 'space') {\n        return;\n      } else if (isRepeatKeyword) {\n        ranges[rangeIndex].end = index;\n\n        return;\n      }\n\n      return;\n    }\n  });\n\n  ranges.forEach((range) => {\n    if (range.start === null) {\n      return;\n    }\n\n    const nodes = parsed.nodes.slice(\n      range.start,\n      /** @type {number} */ (range.end) + 1\n    );\n\n    if (nodes.length !== 3) {\n      return;\n    }\n    const key = nodes\n      .filter(evenValues)\n      .map((n) => n.value.toLowerCase())\n      .toString();\n\n    const match = mappings.get(key);\n\n    if (match) {\n      nodes[0].value = match;\n      nodes[1].value = nodes[2].value = '';\n    }\n  });\n\n  return parsed.toString();\n}\n\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-repeat-style',\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(\n            /^(background(-repeat)?|(-\\w+-)?mask-repeat)$/i,\n            (decl) => {\n              const value = decl.value;\n\n              if (!value) {\n                return;\n              }\n\n              if (cache.has(value)) {\n                decl.value = cache.get(value);\n\n                return;\n              }\n\n              const result = transform(value);\n\n              decl.value = result;\n              cache.set(value, result);\n            }\n          );\n        },\n      };\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n","\nmodule.exports = new Map([\n  [['repeat', 'no-repeat'].toString(), 'repeat-x'],\n  [['no-repeat', 'repeat'].toString(), 'repeat-y'],\n  [['repeat', 'repeat'].toString(), 'repeat'],\n  [['space', 'space'].toString(), 'space'],\n  [['round', 'round'].toString(), 'round'],\n  [['no-repeat', 'no-repeat'].toString(), 'no-repeat'],\n]);\n"]}