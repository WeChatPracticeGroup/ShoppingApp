{"version":3,"sources":["index.js","rawCache.js","getArguments.js","sameParent.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ACFA,AFMA,ACHA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst rawCache = require('./rawCache.js');\nconst getArguments = require('./getArguments.js');\nconst sameParent = require('./sameParent.js');\n\nmodule.exports = { rawCache, getArguments, sameParent };\n","\n\n/**\n * @type {import('postcss').PluginCreator<void>}\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'cssnano-util-raw-cache',\n    /**\n     * @param {import('postcss').Root} css\n     * @param {{result: import('postcss').Result & {root: {rawCache?: any}}}} arg\n     */\n    OnceExit(css, { result }) {\n      result.root.rawCache = {\n        colon: ':',\n        indent: '',\n        beforeDecl: '',\n        beforeRule: '',\n        beforeOpen: '',\n        beforeClose: '',\n        beforeComment: '',\n        after: '',\n        emptyBody: '',\n        commentLeft: '',\n        commentRight: '',\n      };\n    },\n  };\n}\n\npluginCreator.postcss = true;\n\nmodule.exports = pluginCreator;\n","\n/**\n * Extracts the arguments of a CSS function or AtRule.\n *\n * @param {import('postcss-value-parser').ParsedValue | import('postcss-value-parser').FunctionNode} node\n * @return {import('postcss-value-parser').Node[][]}\n */\nmodule.exports = function getArguments(node) {\n  /** @type {import('postcss-value-parser').Node[][]} */\n  const list = [[]];\n  for (const child of node.nodes) {\n    if (child.type !== 'div') {\n      list[list.length - 1].push(child);\n    } else {\n      list.push([]);\n    }\n  }\n  return list;\n};\n","\n\n/**\n * @param {import('postcss').AnyNode} nodeA\n * @param {import('postcss').AnyNode} nodeB\n * @return {boolean}\n */\nfunction checkMatch(nodeA, nodeB) {\n  if (nodeA.type === 'atrule' && nodeB.type === 'atrule') {\n    return (\n      nodeA.params === nodeB.params &&\n      nodeA.name.toLowerCase() === nodeB.name.toLowerCase()\n    );\n  }\n  return nodeA.type === nodeB.type;\n}\n\n/** @typedef {import('postcss').AnyNode & {parent?: Child}} Child */\n/**\n * @param {Child} nodeA\n * @param {Child} nodeB\n * @return {boolean}\n */\nfunction sameParent(nodeA, nodeB) {\n  if (!nodeA.parent) {\n    // A is orphaned, return if B is orphaned as well\n    return !nodeB.parent;\n  }\n\n  if (!nodeB.parent) {\n    // B is orphaned and A is not\n    return false;\n  }\n\n  // Check if parents match\n  if (!checkMatch(nodeA.parent, nodeB.parent)) {\n    return false;\n  }\n\n  // Check parents' parents\n  return sameParent(nodeA.parent, nodeB.parent);\n}\n\nmodule.exports = sameParent;\n"]}