{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst charset = 'charset';\n// eslint-disable-next-line no-control-regex\nconst nonAscii = /[^\\x00-\\x7F]/;\n\n/**\n * @typedef {{add?: boolean}} Options\n */\n/**\n * @type {import('postcss').PluginCreator<Options>}\n * @param {Options} opts\n * @return {import('postcss').Plugin}\n */\nfunction pluginCreator(opts = {}) {\n  return {\n    postcssPlugin: 'postcss-normalize-' + charset,\n\n    OnceExit(css, { AtRule }) {\n      /** @type {import('postcss').AtRule | undefined} */\n      let charsetRule;\n      /** @type {import('postcss').Node | undefined} */\n      let nonAsciiNode;\n\n      css.walk((node) => {\n        if (node.type === 'atrule' && node.name === charset) {\n          if (!charsetRule) {\n            charsetRule = node;\n          }\n          node.remove();\n        } else if (\n          !nonAsciiNode &&\n          node.parent === css &&\n          nonAscii.test(node.toString())\n        ) {\n          nonAsciiNode = node;\n        }\n      });\n\n      if (nonAsciiNode) {\n        if (!charsetRule && opts.add !== false) {\n          charsetRule = new AtRule({\n            name: charset,\n            params: '\"utf-8\"',\n          });\n        }\n        if (charsetRule) {\n          charsetRule.source = nonAsciiNode.source;\n          css.prepend(charsetRule);\n        }\n      }\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]}